Shader "ZGON : Bumped Detail Spec 01" {
	Properties {
		_Color ("Main Color", Color) = (1,1,1,1)
		_TrimColor ("Trim Color", Color) = (1,1,1,1)
		_VertexMaskColor ("Vertex Mask Color", Color) = (0.5,0.5,0.5,1)
		_SpecColor ("Specular Color", Color) = (1.0, 1.0, 1.0, 1)
		_TrimSpecColor ("Trim Specular Color", Color) = (0.5, 0.5, 0.5, 1)
		_MainSpecColor ("Main Specular Color", Color) = (0.5, 0.5, 0.5, 1)		
		_Shininess ("Main Shininess", Range (0.01, 0.15)) = 0.078125
		_TrimShininess ("Trim Shininess", Range (0.01, 0.15)) = 0.078125
		_BodyOcclusionPower ("Body Occlusion Power", Range(0.0, 3.0)) = 1.0
		_BodyOcclusionColor ("Body Occlusion Color", Color) = (0,0,0,1)
		_BodyBumpPower ("Body Normalmap Power", Range(0.0, 5.0)) = 1.0
		_BumpPower ("Normalmap Power", Range(0.0, 3.0)) = 1.0
		_BumpDetailPower ("Detail Normalmap Power", Range(0.0, 4.0)) = 1.0	
		_DetailTexEnable ("Detail Texture Enable", Range(0.0, 1.0)) = 0.0	
		_DetailTexOffset ("Detail Texture Offset", Range(0.0, 1.0)) = 1.0	
		_DetailTexScale ("Detail Texture Scale", Range(1.0, 10.0)) = 2.0	
		_DetailTexPower ("Detail Texture Power", Range(1.0, 4.0)) = 1.5	
		_DetailTexColor ("Detail Texture Color", Color) = (0,0,0,1)
		_AtlasOffsetX ("Atlas Offset X", Float) = 0.0
		_AtlasOffsetY ("Atlas Offset Y", Float) = 0.0
		_AtlasScaleX ("Atlas Scale X", Float) = 1.0
		_AtlasScaleY ("Atlas Scale Y", Float) = 1.0
		_MainTex ("Base (RGB)", 2D) = "white" {}		
		_BumpMap ("Normalmap", 2D) = "bump" {}
		_BumpDetailTex ("Bump Detail (RGB)", 2D) = "bump" {}
		_BodyBumpTex ("Body Normalmap (RGB)", 2D) = "bump" {}
		_BodyOcclusionTex ("Body Occlusion (RGB)", 2D) = "white" {}
		_BumpTrimTex ("Trim Normalmap (RGB)", 2D) = "white" {}
		_DiffuseTrimTex ("Trim Diffuse (RGB)", 2D) = "white" {}
	}
	SubShader {
		Tags { "RenderType"="Opaque" }
		LOD 200
		
			
	Pass {
		Name "FORWARD"
		Tags { "LightMode" = "ForwardBase" }
Program "vp" {
// Vertex combos: 12
//   opengl - ALU: 8 to 81
//   d3d9 - ALU: 8 to 84
//   d3d11 - ALU: 1 to 39, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_WorldSpaceLightPos0]
Vector 15 [unity_SHAr]
Vector 16 [unity_SHAg]
Vector 17 [unity_SHAb]
Vector 18 [unity_SHBr]
Vector 19 [unity_SHBg]
Vector 20 [unity_SHBb]
Vector 21 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 22 [unity_Scale]
Vector 23 [_MainTex_ST]
Vector 24 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 45 ALU
PARAM c[25] = { { 1 },
		state.matrix.mvp,
		program.local[5..24] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R1.xyz, vertex.normal, c[22].w;
DP3 R2.w, R1, c[6];
DP3 R0.x, R1, c[5];
DP3 R0.z, R1, c[7];
MOV R0.y, R2.w;
MOV R0.w, c[0].x;
MUL R1, R0.xyzz, R0.yzzx;
DP4 R2.z, R0, c[17];
DP4 R2.y, R0, c[16];
DP4 R2.x, R0, c[15];
MUL R0.w, R2, R2;
MAD R0.w, R0.x, R0.x, -R0;
DP4 R0.z, R1, c[20];
DP4 R0.y, R1, c[19];
DP4 R0.x, R1, c[18];
ADD R0.xyz, R2, R0;
MUL R1.xyz, R0.w, c[21];
ADD result.texcoord[2].xyz, R0, R1;
MOV R1.xyz, c[13];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[22].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[14];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP3 result.texcoord[1].y, R3, R1;
DP3 result.texcoord[3].y, R1, R2;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[3].z, vertex.normal, R2;
DP3 result.texcoord[3].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[24].xyxy, c[24];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[23], c[23].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 45 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [unity_SHAr]
Vector 15 [unity_SHAg]
Vector 16 [unity_SHAb]
Vector 17 [unity_SHBr]
Vector 18 [unity_SHBg]
Vector 19 [unity_SHBb]
Vector 20 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_MainTex_ST]
Vector 23 [_BodyBumpTex_ST]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r1.xyz, v2, c21.w
dp3 r2.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r2.w
mov r0.w, c24.x
mul r1, r0.xyzz, r0.yzzx
dp4 r2.z, r0, c16
dp4 r2.y, r0, c15
dp4 r2.x, r0, c14
mul r0.w, r2, r2
mad r0.w, r0.x, r0.x, -r0
dp4 r0.z, r1, c19
dp4 r0.y, r1, c18
dp4 r0.x, r1, c17
mul r1.xyz, r0.w, c20
add r0.xyz, r2, r0
add o4.xyz, r0, r1
mov r0.w, c24.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c21.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c13, r0
mov r0, c9
mov r1, c8
dp4 r4.y, c13, r0
dp4 r4.x, c13, r1
dp3 o3.y, r4, r2
dp3 o5.y, r2, r3
dp3 o3.z, v2, r4
dp3 o3.x, r4, v1
dp3 o5.z, v2, r3
dp3 o5.x, v1, r3
mov o2, v5
mad o1.zw, v4.xyxy, c23.xyxy, c23
mad o1.xy, v3, c22, c22.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 256 // 256 used size, 26 vars
Vector 224 [_MainTex_ST] 4
Vector 240 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 42 instructions, 5 temp regs, 0 temp arrays:
// ALU 23 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkijbgpbgmdlmoiogkoelipcgmpnhmbpiabaaaaaaceaiaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcgmagaaaaeaaaabaajlabaaaa
fjaaaaaeegiocaaaaaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacafaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaoaaaaaaogikcaaaaaaaaaaaaoaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaapaaaaaa
kgiocaaaaaaaaaaaapaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaegbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaai
hcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
lcaabaaaabaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaabaaaaaaegaibaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaa
abaaaaaaegadbaaaabaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaiadp
bbaaaaaibcaabaaaacaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaabaaaaaa
bbaaaaaiccaabaaaacaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaabaaaaaa
bbaaaaaiecaabaaaacaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaadaaaaaajgacbaaaabaaaaaaegakbaaaabaaaaaabbaaaaai
bcaabaaaaeaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaadaaaaaabbaaaaai
ccaabaaaaeaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaadaaaaaabbaaaaai
ecaabaaaaeaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaadaaaaaaaaaaaaah
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaahicaabaaa
aaaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadcaaaaak
hccabaaaaeaaaaaaegiccaaaacaaaaaabiaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaaegacbaaa
abaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_12).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_OFF
    #define SHADOWS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 542
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:527(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_12).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_OFF
    #define SHADOWS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 542
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:527(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 526
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 507
v2f_surf vert_surf( in appdata_full v ) {
    #line 509
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 513
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 517
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 521
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 542
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 14 [unity_LightmapST]
Vector 15 [_MainTex_ST]
Vector 16 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 8 ALU
PARAM c[17] = { program.local[0],
		state.matrix.mvp,
		program.local[5..16] };
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[16].xyxy, c[16];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[15], c[15].zwzw;
MAD result.texcoord[1].xy, vertex.texcoord[1], c[14], c[14].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 8 instructions, 0 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"vs_3_0
; 8 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_position0 v0
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov o2, v5
mad o1.zw, v4.xyxy, c14.xyxy, c14
mad o1.xy, v3, c13, c13.zwzw
mad o3.xy, v4, c12, c12.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 272 // 272 used size, 27 vars
Vector 224 [unity_LightmapST] 4
Vector 240 [_MainTex_ST] 4
Vector 256 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerDraw" 336 // 64 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
BindCB "$Globals" 0
BindCB "UnityPerDraw" 1
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 1 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkcbhpfpiiejemlaopgckecpcaadbeoioabaaaaaafaadaaaaadaaaaaa
cmaaaaaapeaaaaaaiaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoieaaaaaaaeaaaaaa
aiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaahnaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl
fdeieefcmiabaaaaeaaaabaahcaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaa
fjaaaaaeegiocaaaabaaaaaaaeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagiaaaaacabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaapaaaaaaogikcaaaaaaaaaaaapaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaabaaaaaaa
kgiocaaaaaaaaaaabaaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
dcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaaaoaaaaaa
ogikcaaaaaaaaaaaaoaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 glstate_matrix_mvp;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_OFF
    #define SHADOWS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 503
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 521
uniform sampler2D unity_Lightmap;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 522
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 525
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 529
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 533
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    #line 537
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * lm);
    c.w = o.Alpha;
    #line 541
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:523(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 glstate_matrix_mvp;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_OFF
    #define SHADOWS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 503
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 521
uniform sampler2D unity_Lightmap;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return ((8.0 * color.w) * color.xyz);
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 522
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 525
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 529
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 533
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    #line 537
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * lm);
    c.w = o.Alpha;
    #line 541
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:523(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 503
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 521
uniform sampler2D unity_Lightmap;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 506
v2f_surf vert_surf( in appdata_full v ) {
    #line 508
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 512
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 516
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 503
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 521
uniform sampler2D unity_Lightmap;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 522
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 525
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 529
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 533
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    #line 537
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * lm);
    c.w = o.Alpha;
    #line 541
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Matrix 9 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [unity_LightmapST]
Vector 17 [_MainTex_ST]
Vector 18 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 21 ALU
PARAM c[19] = { { 1 },
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
TEMP R2;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, R0, vertex.attrib[14].w;
MOV R0.xyz, c[13];
MOV R0.w, c[0].x;
DP4 R2.z, R0, c[11];
DP4 R2.x, R0, c[9];
DP4 R2.y, R0, c[10];
MAD R0.xyz, R2, c[15].w, -vertex.position;
DP3 result.texcoord[2].y, R0, R1;
DP3 result.texcoord[2].z, vertex.normal, R0;
DP3 result.texcoord[2].x, R0, vertex.attrib[14];
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[18].xyxy, c[18];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[17], c[17].zwzw;
MAD result.texcoord[1].xy, vertex.texcoord[1], c[16], c[16].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 21 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 8 [_World2Object]
Vector 13 [unity_Scale]
Vector 14 [unity_LightmapST]
Vector 15 [_MainTex_ST]
Vector 16 [_BodyBumpTex_ST]
"vs_3_0
; 22 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r0.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r0, v1.w
mov r0.xyz, c12
mov r0.w, c17.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
mad r0.xyz, r2, c13.w, -v0
dp3 o4.y, r0, r1
dp3 o4.z, v2, r0
dp3 o4.x, r0, v1
mov o2, v5
mad o1.zw, v4.xyxy, c16.xyxy, c16
mad o1.xy, v3, c15, c15.zwzw
mad o3.xy, v4, c14, c14.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 272 // 272 used size, 27 vars
Vector 224 [unity_LightmapST] 4
Vector 240 [_MainTex_ST] 4
Vector 256 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgdomedokdecgkcfpocmljlgfmmgbnffoabaaaaaabiafaaaaadaaaaaa
cmaaaaaapeaaaaaajiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefchiadaaaa
eaaaabaanoaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaapaaaaaa
ogikcaaaaaaaaaaaapaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaa
agiecaaaaaaaaaaabaaaaaaakgiocaaaaaaaaaaabaaaaaaadgaaaaafpccabaaa
acaaaaaaegbobaaaafaaaaaadcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaa
egiacaaaaaaaaaaaaoaaaaaaogikcaaaaaaaaaaaaoaaaaaadiaaaaahhcaabaaa
aaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
jgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaa
abaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaa
baaaaaahcccabaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bccabaaaaeaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaa
aeaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_6 * (((_World2Object * tmpvar_7).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_ON
    #define DIRLIGHTMAP_ON 1
#endif
#ifndef SHADOWS_OFF
    #define SHADOWS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    #line 542
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture2D( unity_LightmapInd, IN.lmap.xy);
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    #line 546
    c.xyz += (o.Albedo * lm);
    c.w = o.Alpha;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:527(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_6 * (((_World2Object * tmpvar_7).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_ON
    #define DIRLIGHTMAP_ON 1
#endif
#ifndef SHADOWS_OFF
    #define SHADOWS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return ((8.0 * color.w) * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    #line 542
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture2D( unity_LightmapInd, IN.lmap.xy);
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    #line 546
    c.xyz += (o.Albedo * lm);
    c.w = o.Alpha;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:527(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 526
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 507
v2f_surf vert_surf( in appdata_full v ) {
    #line 509
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 513
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 517
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 522
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    #line 542
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    #line 546
    c.xyz += (o.Albedo * lm);
    c.w = o.Alpha;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_SHAr]
Vector 17 [unity_SHAg]
Vector 18 [unity_SHAb]
Vector 19 [unity_SHBr]
Vector 20 [unity_SHBg]
Vector 21 [unity_SHBb]
Vector 22 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 23 [unity_Scale]
Vector 24 [_MainTex_ST]
Vector 25 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 50 ALU
PARAM c[26] = { { 1, 0.5 },
		state.matrix.mvp,
		program.local[5..25] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R1.xyz, vertex.normal, c[23].w;
DP3 R2.w, R1, c[6];
DP3 R0.x, R1, c[5];
DP3 R0.z, R1, c[7];
MOV R0.y, R2.w;
MOV R0.w, c[0].x;
MUL R1, R0.xyzz, R0.yzzx;
DP4 R2.z, R0, c[18];
DP4 R2.y, R0, c[17];
DP4 R2.x, R0, c[16];
MUL R0.w, R2, R2;
MAD R0.w, R0.x, R0.x, -R0;
DP4 R0.z, R1, c[21];
DP4 R0.y, R1, c[20];
DP4 R0.x, R1, c[19];
ADD R0.xyz, R2, R0;
MUL R1.xyz, R0.w, c[22];
ADD result.texcoord[2].xyz, R0, R1;
MOV R1.xyz, c[13];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[23].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[15];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R0.w, vertex.position, c[4];
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
DP3 result.texcoord[1].y, R3, R1;
DP3 result.texcoord[3].y, R1, R2;
MUL R1.xyz, R0.xyww, c[0].y;
MUL R1.y, R1, c[14].x;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[3].z, vertex.normal, R2;
DP3 result.texcoord[3].x, vertex.attrib[14], R2;
ADD result.texcoord[4].xy, R1, R1.z;
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[4].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[25].xyxy, c[25];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[24], c[24].zwzw;
END
# 50 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_SHAr]
Vector 17 [unity_SHAg]
Vector 18 [unity_SHAb]
Vector 19 [unity_SHBr]
Vector 20 [unity_SHBg]
Vector 21 [unity_SHBb]
Vector 22 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 23 [unity_Scale]
Vector 24 [_MainTex_ST]
Vector 25 [_BodyBumpTex_ST]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
def c26, 1.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r1.xyz, v2, c23.w
dp3 r2.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r2.w
mov r0.w, c26.x
mul r1, r0.xyzz, r0.yzzx
dp4 r2.z, r0, c18
dp4 r2.y, r0, c17
dp4 r2.x, r0, c16
mul r0.w, r2, r2
mad r0.w, r0.x, r0.x, -r0
dp4 r0.z, r1, c21
dp4 r0.y, r1, c20
dp4 r0.x, r1, c19
mul r1.xyz, r0.w, c22
add r0.xyz, r2, r0
add o4.xyz, r0, r1
mov r0.w, c26.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c23.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c15, r0
mov r0, c9
dp4 r4.y, c15, r0
mov r1, c8
dp4 r4.x, c15, r1
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c26.y
mul r1.y, r1, c13.x
dp3 o3.y, r4, r2
dp3 o5.y, r2, r3
dp3 o3.z, v2, r4
dp3 o3.x, r4, v1
dp3 o5.z, v2, r3
dp3 o5.x, v1, r3
mad o6.xy, r1.z, c14.zwzw, r1
mov o0, r0
mov o2, v5
mov o6.zw, r0
mad o1.zw, v4.xyxy, c25.xyxy, c25
mad o1.xy, v3, c24, c24.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 320 // 320 used size, 27 vars
Vector 288 [_MainTex_ST] 4
Vector 304 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 6 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedapfgaenjgbejbadbpihpgehbekmlemmfabaaaaaaneaiaaaaadaaaaaa
cmaaaaaapeaaaaaamiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheommaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaamfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklfdeieefcaeahaaaaeaaaabaambabaaaafjaaaaaeegiocaaa
aaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagiaaaaacagaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaa
egiacaaaaaaaaaaabcaaaaaaogikcaaaaaaaaaaabcaaaaaadcaaaaalmccabaaa
abaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaabdaaaaaakgiocaaaaaaaaaaa
bdaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaahhcaabaaa
abaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
jgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaa
acaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaacaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahcccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaah
bccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaaheccabaaa
adaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
egbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaaihcaabaaaadaaaaaa
fgafbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaaklcaabaaaacaaaaaa
egiicaaaadaaaaaaamaaaaaaagaabaaaacaaaaaaegaibaaaadaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaaacaaaaaaegadbaaa
acaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaiadpbbaaaaaibcaabaaa
adaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaacaaaaaabbaaaaaiccaabaaa
adaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaacaaaaaabbaaaaaiecaabaaa
adaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaacaaaaaadiaaaaahpcaabaaa
aeaaaaaajgacbaaaacaaaaaaegakbaaaacaaaaaabbaaaaaibcaabaaaafaaaaaa
egiocaaaacaaaaaabfaaaaaaegaobaaaaeaaaaaabbaaaaaiccaabaaaafaaaaaa
egiocaaaacaaaaaabgaaaaaaegaobaaaaeaaaaaabbaaaaaiecaabaaaafaaaaaa
egiocaaaacaaaaaabhaaaaaaegaobaaaaeaaaaaaaaaaaaahhcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaafaaaaaadiaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaacaaaaaabiaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaj
hcaabaaaacaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
acaaaaaaegacbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
baaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaah
eccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaagaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaagaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_12).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = texture2DProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 536
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 538
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 542
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 546
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 550
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:517(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_8;
  tmpvar_8[0] = _Object2World[0].xyz;
  tmpvar_8[1] = _Object2World[1].xyz;
  tmpvar_8[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (tmpvar_8 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  highp float vC_17;
  mediump vec3 x3_18;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAr, normal_16);
  x1_20.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAg, normal_16);
  x1_20.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAb, normal_16);
  x1_20.z = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_16.xyzz * normal_16.yzzx);
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBr, tmpvar_24);
  x2_19.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBg, tmpvar_24);
  x2_19.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBb, tmpvar_24);
  x2_19.z = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y));
  vC_17 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = (unity_SHC.xyz * vC_17);
  x3_18 = tmpvar_29;
  tmpvar_15 = ((x1_20 + x2_19) + x3_18);
  shlight_3 = tmpvar_15;
  tmpvar_6 = shlight_3;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_7.zw;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_11 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = o_30;
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 460
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 502
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 389
#line 402
#line 410
#line 422
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 434
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 438
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 442
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 446
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 450
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 454
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 458
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 467
#line 513
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 416
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 418
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 410
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 414
    return OUT;
}
#line 422
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 426
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 430
    return OUT;
}
#line 389
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 393
    OUT = normalize(OUT);
    return OUT;
}
#line 402
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 406
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 467
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 471
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 475
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 479
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 483
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 489
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 494
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = texture2DProj( _ShadowMapTexture, shadowCoord).x;
    return shadow;
}
#line 535
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 537
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 541
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 545
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 549
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:516(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 516
v2f_surf vert_surf( in appdata_full v ) {
    #line 518
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 522
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 526
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 530
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 534
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 536
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 538
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 542
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 546
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 550
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_ProjectionParams]
Vector 15 [unity_LightmapST]
Vector 16 [_MainTex_ST]
Vector 17 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 13 ALU
PARAM c[18] = { { 0.5 },
		state.matrix.mvp,
		program.local[5..17] };
TEMP R0;
TEMP R1;
DP4 R0.w, vertex.position, c[4];
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R1.xyz, R0.xyww, c[0].x;
MUL R1.y, R1, c[13].x;
ADD result.texcoord[2].xy, R1, R1.z;
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[2].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[17].xyxy, c[17];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[16], c[16].zwzw;
MAD result.texcoord[1].xy, vertex.texcoord[1], c[15], c[15].zwzw;
END
# 13 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_ProjectionParams]
Vector 13 [_ScreenParams]
Vector 14 [unity_LightmapST]
Vector 15 [_MainTex_ST]
Vector 16 [_BodyBumpTex_ST]
"vs_3_0
; 13 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
def c17, 0.50000000, 0, 0, 0
dcl_position0 v0
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c17.x
mul r1.y, r1, c12.x
mad o4.xy, r1.z, c13.zwzw, r1
mov o0, r0
mov o2, v5
mov o4.zw, r0
mad o1.zw, v4.xyxy, c16.xyxy, c16
mad o1.xy, v3, c15, c15.zwzw
mad o3.xy, v4, c14, c14.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 336 // 336 used size, 28 vars
Vector 288 [unity_LightmapST] 4
Vector 304 [_MainTex_ST] 4
Vector 320 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 64 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 14 instructions, 2 temp regs, 0 temp arrays:
// ALU 4 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedalmiblnfmhplpjfnobmohcdkhajndafaabaaaaaabaaeaaaaadaaaaaa
cmaaaaaapeaaaaaajiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefchaacaaaa
eaaaabaajmaaaaaafjaaaaaeegiocaaaaaaaaaaabfaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaaeaaaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaal
dccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaabdaaaaaaogikcaaa
aaaaaaaabdaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaa
aaaaaaaabeaaaaaakgiocaaaaaaaaaaabeaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaafaaaaaadcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaaegiacaaa
aaaaaaaabcaaaaaaogikcaaaaaaaaaaabcaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
mccabaaaaeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 512
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = texture2DProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 532
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 534
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 538
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 542
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 546
    lowp vec4 c = vec4( 0.0);
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    #line 550
    c.w = o.Alpha;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:517(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = o_3;
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 460
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 502
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 389
#line 402
#line 410
#line 422
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 434
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 438
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 442
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 446
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 450
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 454
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 458
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 467
#line 511
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return ((8.0 * color.w) * color.xyz);
}
#line 416
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 418
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 410
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 414
    return OUT;
}
#line 422
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 426
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 430
    return OUT;
}
#line 389
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 393
    OUT = normalize(OUT);
    return OUT;
}
#line 402
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 406
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 467
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 471
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 475
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 479
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 483
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 489
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 494
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = texture2DProj( _ShadowMapTexture, shadowCoord).x;
    return shadow;
}
#line 531
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 533
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 537
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 541
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 545
    lowp vec4 c = vec4( 0.0);
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * max( min( lm, ((atten * 2.0) * lmtex.xyz)), (lm * atten)));
    #line 549
    c.w = o.Alpha;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:516(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 512
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 515
v2f_surf vert_surf( in appdata_full v ) {
    #line 517
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 521
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 525
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 529
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 512
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 532
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 534
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 538
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 542
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 546
    lowp vec4 c = vec4( 0.0);
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    #line 550
    c.w = o.Alpha;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Matrix 9 [_World2Object]
Vector 16 [unity_Scale]
Vector 17 [unity_LightmapST]
Vector 18 [_MainTex_ST]
Vector 19 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 26 ALU
PARAM c[20] = { { 1, 0.5 },
		state.matrix.mvp,
		program.local[5..19] };
TEMP R0;
TEMP R1;
TEMP R2;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R0.xyz, R0, vertex.attrib[14].w;
MOV R1.xyz, c[13];
MOV R1.w, c[0].x;
DP4 R0.w, vertex.position, c[4];
DP4 R2.z, R1, c[11];
DP4 R2.x, R1, c[9];
DP4 R2.y, R1, c[10];
MAD R2.xyz, R2, c[16].w, -vertex.position;
DP3 result.texcoord[2].y, R2, R0;
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R1.xyz, R0.xyww, c[0].y;
MUL R1.y, R1, c[14].x;
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, R2, vertex.attrib[14];
ADD result.texcoord[3].xy, R1, R1.z;
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[3].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[19].xyxy, c[19];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[18], c[18].zwzw;
MAD result.texcoord[1].xy, vertex.texcoord[1], c[17], c[17].zwzw;
END
# 26 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 8 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [unity_LightmapST]
Vector 17 [_MainTex_ST]
Vector 18 [_BodyBumpTex_ST]
"vs_3_0
; 27 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c19, 1.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r0.xyz, v2.yzxw, r0.zxyw, -r1
mul r0.xyz, r0, v1.w
mov r1.xyz, c12
mov r1.w, c19.x
dp4 r0.w, v0, c3
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mad r2.xyz, r2, c15.w, -v0
dp3 o4.y, r2, r0
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c19.y
mul r1.y, r1, c13.x
dp3 o4.z, v2, r2
dp3 o4.x, r2, v1
mad o5.xy, r1.z, c14.zwzw, r1
mov o0, r0
mov o2, v5
mov o5.zw, r0
mad o1.zw, v4.xyxy, c18.xyxy, c18
mad o1.xy, v3, c17, c17.zwzw
mad o3.xy, v4, c16, c16.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 336 // 336 used size, 28 vars
Vector 288 [unity_LightmapST] 4
Vector 304 [_MainTex_ST] 4
Vector 320 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 25 instructions, 3 temp regs, 0 temp arrays:
// ALU 11 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhehecicgjbdhpehjjadbekfopkdapnpdabaaaaaamiafaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcbaaeaaaaeaaaabaaaeabaaaa
fjaaaaaeegiocaaaaaaaaaaabfaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaaddccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaa
afaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaabdaaaaaaogikcaaaaaaaaaaa
bdaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
beaaaaaakgiocaaaaaaaaaaabeaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaa
bcaaaaaaogikcaaaaaaaaaaabcaaaaaadiaaaaahhcaabaaaabaaaaaajgbebaaa
abaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaajgbebaaaacaaaaaa
cgbjbaaaabaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaa
abaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaacaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaa
aeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaacaaaaaabdaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaa
pgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaa
aeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbccabaaaaeaaaaaa
egbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaa
acaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaa
akiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaafaaaaaa
kgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaakgakbaaaabaaaaaamgaabaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_6 * (((_World2Object * tmpvar_7).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_ON
    #define DIRLIGHTMAP_ON 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 513
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 534
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = texture2DProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 536
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 538
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 542
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 546
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 550
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture2D( unity_LightmapInd, IN.lmap.xy);
    #line 554
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    c.w = o.Alpha;
    #line 558
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:537(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _WorldSpaceCameraPos;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_4.zw;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_7 * (((_World2Object * tmpvar_8).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD3 = o_9;
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_ON
    #define DIRLIGHTMAP_ON 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 460
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 502
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 389
#line 402
#line 410
#line 422
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 434
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 438
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 442
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 446
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 450
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 454
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 458
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 467
#line 512
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 533
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return ((8.0 * color.w) * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 416
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 418
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 410
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 414
    return OUT;
}
#line 422
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 426
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 430
    return OUT;
}
#line 389
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 393
    OUT = normalize(OUT);
    return OUT;
}
#line 402
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 406
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 467
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 471
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 475
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 479
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 483
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 489
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 494
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = texture2DProj( _ShadowMapTexture, shadowCoord).x;
    return shadow;
}
#line 535
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 537
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 541
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 545
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 549
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture2D( unity_LightmapInd, IN.lmap.xy);
    #line 553
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    c.xyz += (o.Albedo * max( min( lm, ((atten * 2.0) * lmtex.xyz)), (lm * atten)));
    c.w = o.Alpha;
    #line 557
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:536(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 513
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 534
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 516
v2f_surf vert_surf( in appdata_full v ) {
    #line 518
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 522
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 526
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 530
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 513
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 534
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 536
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 538
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 542
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 546
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 550
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    #line 554
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    c.w = o.Alpha;
    #line 558
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_WorldSpaceLightPos0]
Vector 15 [unity_4LightPosX0]
Vector 16 [unity_4LightPosY0]
Vector 17 [unity_4LightPosZ0]
Vector 18 [unity_4LightAtten0]
Vector 19 [unity_LightColor0]
Vector 20 [unity_LightColor1]
Vector 21 [unity_LightColor2]
Vector 22 [unity_LightColor3]
Vector 23 [unity_SHAr]
Vector 24 [unity_SHAg]
Vector 25 [unity_SHAb]
Vector 26 [unity_SHBr]
Vector 27 [unity_SHBg]
Vector 28 [unity_SHBb]
Vector 29 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 30 [unity_Scale]
Vector 31 [_MainTex_ST]
Vector 32 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 76 ALU
PARAM c[33] = { { 1, 0 },
		state.matrix.mvp,
		program.local[5..32] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
MUL R3.xyz, vertex.normal, c[30].w;
DP4 R0.x, vertex.position, c[6];
ADD R1, -R0.x, c[16];
DP3 R3.w, R3, c[6];
DP3 R4.x, R3, c[5];
DP3 R3.x, R3, c[7];
MUL R2, R3.w, R1;
DP4 R0.x, vertex.position, c[5];
ADD R0, -R0.x, c[15];
MUL R1, R1, R1;
MOV R4.z, R3.x;
MAD R2, R4.x, R0, R2;
MOV R4.w, c[0].x;
DP4 R4.y, vertex.position, c[7];
MAD R1, R0, R0, R1;
ADD R0, -R4.y, c[17];
MAD R1, R0, R0, R1;
MAD R0, R3.x, R0, R2;
MUL R2, R1, c[18];
MOV R4.y, R3.w;
RSQ R1.x, R1.x;
RSQ R1.y, R1.y;
RSQ R1.w, R1.w;
RSQ R1.z, R1.z;
MUL R0, R0, R1;
ADD R1, R2, c[0].x;
RCP R1.x, R1.x;
RCP R1.y, R1.y;
RCP R1.w, R1.w;
RCP R1.z, R1.z;
MAX R0, R0, c[0].y;
MUL R0, R0, R1;
MUL R1.xyz, R0.y, c[20];
MAD R1.xyz, R0.x, c[19], R1;
MAD R0.xyz, R0.z, c[21], R1;
MAD R1.xyz, R0.w, c[22], R0;
MUL R0, R4.xyzz, R4.yzzx;
MUL R1.w, R3, R3;
DP4 R3.z, R0, c[28];
DP4 R3.y, R0, c[27];
DP4 R3.x, R0, c[26];
MAD R1.w, R4.x, R4.x, -R1;
MUL R0.xyz, R1.w, c[29];
MOV R1.w, c[0].x;
DP4 R2.z, R4, c[25];
DP4 R2.y, R4, c[24];
DP4 R2.x, R4, c[23];
ADD R2.xyz, R2, R3;
ADD R0.xyz, R2, R0;
ADD result.texcoord[2].xyz, R0, R1;
MOV R1.xyz, c[13];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[30].w, -vertex.position;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R1, c[14];
MUL R0.xyz, R0, vertex.attrib[14].w;
DP4 R3.z, R1, c[11];
DP4 R3.y, R1, c[10];
DP4 R3.x, R1, c[9];
DP3 result.texcoord[1].y, R3, R0;
DP3 result.texcoord[3].y, R0, R2;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[3].z, vertex.normal, R2;
DP3 result.texcoord[3].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[32].xyxy, c[32];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[31], c[31].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 76 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [unity_4LightPosX0]
Vector 15 [unity_4LightPosY0]
Vector 16 [unity_4LightPosZ0]
Vector 17 [unity_4LightAtten0]
Vector 18 [unity_LightColor0]
Vector 19 [unity_LightColor1]
Vector 20 [unity_LightColor2]
Vector 21 [unity_LightColor3]
Vector 22 [unity_SHAr]
Vector 23 [unity_SHAg]
Vector 24 [unity_SHAb]
Vector 25 [unity_SHBr]
Vector 26 [unity_SHBg]
Vector 27 [unity_SHBb]
Vector 28 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_MainTex_ST]
Vector 31 [_BodyBumpTex_ST]
"vs_3_0
; 79 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c32, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r3.xyz, v2, c29.w
dp4 r0.x, v0, c5
add r1, -r0.x, c15
dp3 r3.w, r3, c5
dp3 r4.x, r3, c4
dp3 r3.x, r3, c6
mul r2, r3.w, r1
dp4 r0.x, v0, c4
add r0, -r0.x, c14
mul r1, r1, r1
mov r4.z, r3.x
mad r2, r4.x, r0, r2
mov r4.w, c32.x
dp4 r4.y, v0, c6
mad r1, r0, r0, r1
add r0, -r4.y, c16
mad r1, r0, r0, r1
mad r0, r3.x, r0, r2
mul r2, r1, c17
mov r4.y, r3.w
rsq r1.x, r1.x
rsq r1.y, r1.y
rsq r1.w, r1.w
rsq r1.z, r1.z
mul r0, r0, r1
add r1, r2, c32.x
dp4 r2.z, r4, c24
dp4 r2.y, r4, c23
dp4 r2.x, r4, c22
rcp r1.x, r1.x
rcp r1.y, r1.y
rcp r1.w, r1.w
rcp r1.z, r1.z
max r0, r0, c32.y
mul r0, r0, r1
mul r1.xyz, r0.y, c19
mad r1.xyz, r0.x, c18, r1
mad r0.xyz, r0.z, c20, r1
mad r1.xyz, r0.w, c21, r0
mul r0, r4.xyzz, r4.yzzx
mul r1.w, r3, r3
dp4 r3.z, r0, c27
dp4 r3.y, r0, c26
dp4 r3.x, r0, c25
mad r1.w, r4.x, r4.x, -r1
mul r0.xyz, r1.w, c28
add r2.xyz, r2, r3
add r0.xyz, r2, r0
add o4.xyz, r0, r1
mov r1.w, c32.x
mov r1.xyz, c12
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
mad r3.xyz, r0, c29.w, -v0
mov r1.xyz, v1
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r1.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c13, r0
mov r1, c9
mov r0, c8
dp4 r4.y, c13, r1
dp4 r4.x, c13, r0
dp3 o3.y, r4, r2
dp3 o5.y, r2, r3
dp3 o3.z, v2, r4
dp3 o3.x, r4, v1
dp3 o5.z, v2, r3
dp3 o5.x, v1, r3
mov o2, v5
mad o1.zw, v4.xyxy, c31.xyxy, c31
mad o1.xy, v3, c30, c30.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 256 // 256 used size, 26 vars
Vector 224 [_MainTex_ST] 4
Vector 240 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 66 instructions, 7 temp regs, 0 temp arrays:
// ALU 36 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedapphlgfiodcffgcanpglmpdjfnppgaojabaaaaaahealaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefclmajaaaaeaaaabaagpacaaaa
fjaaaaaeegiocaaaaaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacahaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaoaaaaaaogikcaaaaaaaaaaaaoaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaapaaaaaa
kgiocaaaaaaaaaaaapaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadgaaaaaf
icaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaaihcaabaaaacaaaaaaegbcbaaa
acaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaaklcaabaaaacaaaaaaegiicaaa
adaaaaaaamaaaaaaagaabaaaacaaaaaaegaibaaaadaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaaacaaaaaaegadbaaaacaaaaaa
bbaaaaaibcaabaaaacaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaabaaaaaa
bbaaaaaiccaabaaaacaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaabaaaaaa
bbaaaaaiecaabaaaacaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaadaaaaaajgacbaaaabaaaaaaegakbaaaabaaaaaabbaaaaai
bcaabaaaaeaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaadaaaaaabbaaaaai
ccaabaaaaeaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaadaaaaaabbaaaaai
ecaabaaaaeaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaadaaaaaaaaaaaaah
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaahicaabaaa
aaaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaacaaaaaabiaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaadaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaaadaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaaadaaaaaa
egiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaj
pcaabaaaaeaaaaaafgafbaiaebaaaaaaadaaaaaaegiocaaaacaaaaaaadaaaaaa
diaaaaahpcaabaaaafaaaaaafgafbaaaabaaaaaaegaobaaaaeaaaaaadiaaaaah
pcaabaaaaeaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaaaaaaaaajpcaabaaa
agaaaaaaagaabaiaebaaaaaaadaaaaaaegiocaaaacaaaaaaacaaaaaaaaaaaaaj
pcaabaaaadaaaaaakgakbaiaebaaaaaaadaaaaaaegiocaaaacaaaaaaaeaaaaaa
dcaaaaajpcaabaaaafaaaaaaegaobaaaagaaaaaaagaabaaaabaaaaaaegaobaaa
afaaaaaadcaaaaajpcaabaaaabaaaaaaegaobaaaadaaaaaakgakbaaaabaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaaeaaaaaaegaobaaaagaaaaaaegaobaaa
agaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaadaaaaaaegaobaaaaeaaaaaaeeaaaaafpcaabaaaaeaaaaaaegaobaaa
adaaaaaadcaaaaanpcaabaaaadaaaaaaegaobaaaadaaaaaaegiocaaaacaaaaaa
afaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaoaaaaakpcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpegaobaaaadaaaaaa
diaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaaeaaaaaadeaaaaak
pcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaadaaaaaaegaobaaaabaaaaaa
diaaaaaihcaabaaaadaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaahaaaaaa
dcaaaaakhcaabaaaadaaaaaaegiccaaaacaaaaaaagaaaaaaagaabaaaabaaaaaa
egacbaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaiaaaaaa
kgakbaaaabaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaajaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaahhccabaaa
aeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaa
abaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaah
cccabaaaafaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaa
afaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaafaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_8;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  highp float vC_17;
  mediump vec3 x3_18;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAr, normal_16);
  x1_20.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAg, normal_16);
  x1_20.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAb, normal_16);
  x1_20.z = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_16.xyzz * normal_16.yzzx);
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBr, tmpvar_24);
  x2_19.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBg, tmpvar_24);
  x2_19.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBb, tmpvar_24);
  x2_19.z = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y));
  vC_17 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = (unity_SHC.xyz * vC_17);
  x3_18 = tmpvar_29;
  tmpvar_15 = ((x1_20 + x2_19) + x3_18);
  shlight_3 = tmpvar_15;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_30.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_30.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_30.z);
  highp vec4 tmpvar_34;
  tmpvar_34 = (((tmpvar_31 * tmpvar_31) + (tmpvar_32 * tmpvar_32)) + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_35;
  tmpvar_35 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_31 * tmpvar_8.x) + (tmpvar_32 * tmpvar_8.y)) + (tmpvar_33 * tmpvar_8.z)) * inversesqrt(tmpvar_34))) * (1.0/((1.0 + (tmpvar_34 * unity_4LightAtten0)))));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_35.x) + (unity_LightColor[1].xyz * tmpvar_35.y)) + (unity_LightColor[2].xyz * tmpvar_35.z)) + (unity_LightColor[3].xyz * tmpvar_35.w)));
  tmpvar_6 = tmpvar_36;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_11 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_OFF
    #define SHADOWS_OFF 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 528
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 530
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 534
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 538
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    #line 542
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:508(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_8;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  highp float vC_17;
  mediump vec3 x3_18;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAr, normal_16);
  x1_20.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAg, normal_16);
  x1_20.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAb, normal_16);
  x1_20.z = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_16.xyzz * normal_16.yzzx);
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBr, tmpvar_24);
  x2_19.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBg, tmpvar_24);
  x2_19.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBb, tmpvar_24);
  x2_19.z = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y));
  vC_17 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = (unity_SHC.xyz * vC_17);
  x3_18 = tmpvar_29;
  tmpvar_15 = ((x1_20 + x2_19) + x3_18);
  shlight_3 = tmpvar_15;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_30.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_30.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_30.z);
  highp vec4 tmpvar_34;
  tmpvar_34 = (((tmpvar_31 * tmpvar_31) + (tmpvar_32 * tmpvar_32)) + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_35;
  tmpvar_35 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_31 * tmpvar_8.x) + (tmpvar_32 * tmpvar_8.y)) + (tmpvar_33 * tmpvar_8.z)) * inversesqrt(tmpvar_34))) * (1.0/((1.0 + (tmpvar_34 * unity_4LightAtten0)))));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_35.x) + (unity_LightColor[1].xyz * tmpvar_35.y)) + (unity_LightColor[2].xyz * tmpvar_35.z)) + (unity_LightColor[3].xyz * tmpvar_35.w)));
  tmpvar_6 = tmpvar_36;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_11 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_OFF
    #define SHADOWS_OFF 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 528
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 530
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 534
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 538
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    #line 542
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:508(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 95
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 99
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 103
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 107
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 111
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 115
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 507
v2f_surf vert_surf( in appdata_full v ) {
    #line 509
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 513
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 517
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 521
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    #line 526
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 528
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 530
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 534
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 538
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    #line 542
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_4LightPosX0]
Vector 17 [unity_4LightPosY0]
Vector 18 [unity_4LightPosZ0]
Vector 19 [unity_4LightAtten0]
Vector 20 [unity_LightColor0]
Vector 21 [unity_LightColor1]
Vector 22 [unity_LightColor2]
Vector 23 [unity_LightColor3]
Vector 24 [unity_SHAr]
Vector 25 [unity_SHAg]
Vector 26 [unity_SHAb]
Vector 27 [unity_SHBr]
Vector 28 [unity_SHBg]
Vector 29 [unity_SHBb]
Vector 30 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 31 [unity_Scale]
Vector 32 [_MainTex_ST]
Vector 33 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 81 ALU
PARAM c[34] = { { 1, 0, 0.5 },
		state.matrix.mvp,
		program.local[5..33] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
MUL R3.xyz, vertex.normal, c[31].w;
DP4 R0.x, vertex.position, c[6];
ADD R1, -R0.x, c[17];
DP3 R3.w, R3, c[6];
DP3 R4.x, R3, c[5];
DP3 R3.x, R3, c[7];
MUL R2, R3.w, R1;
DP4 R0.x, vertex.position, c[5];
ADD R0, -R0.x, c[16];
MUL R1, R1, R1;
MOV R4.z, R3.x;
MAD R2, R4.x, R0, R2;
MOV R4.w, c[0].x;
DP4 R4.y, vertex.position, c[7];
MAD R1, R0, R0, R1;
ADD R0, -R4.y, c[18];
MAD R1, R0, R0, R1;
MAD R0, R3.x, R0, R2;
MUL R2, R1, c[19];
MOV R4.y, R3.w;
RSQ R1.x, R1.x;
RSQ R1.y, R1.y;
RSQ R1.w, R1.w;
RSQ R1.z, R1.z;
MUL R0, R0, R1;
ADD R1, R2, c[0].x;
RCP R1.x, R1.x;
RCP R1.y, R1.y;
RCP R1.w, R1.w;
RCP R1.z, R1.z;
MAX R0, R0, c[0].y;
MUL R0, R0, R1;
MUL R1.xyz, R0.y, c[21];
MAD R1.xyz, R0.x, c[20], R1;
MAD R0.xyz, R0.z, c[22], R1;
MAD R1.xyz, R0.w, c[23], R0;
MUL R0, R4.xyzz, R4.yzzx;
MUL R1.w, R3, R3;
DP4 R3.z, R0, c[29];
DP4 R3.y, R0, c[28];
DP4 R3.x, R0, c[27];
MAD R1.w, R4.x, R4.x, -R1;
MUL R0.xyz, R1.w, c[30];
MOV R1.w, c[0].x;
DP4 R0.w, vertex.position, c[4];
DP4 R2.z, R4, c[26];
DP4 R2.y, R4, c[25];
DP4 R2.x, R4, c[24];
ADD R2.xyz, R2, R3;
ADD R0.xyz, R2, R0;
ADD result.texcoord[2].xyz, R0, R1;
MOV R1.xyz, c[13];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[31].w, -vertex.position;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R1, c[15];
MUL R0.xyz, R0, vertex.attrib[14].w;
DP4 R3.z, R1, c[11];
DP4 R3.y, R1, c[10];
DP4 R3.x, R1, c[9];
DP3 result.texcoord[1].y, R3, R0;
DP3 result.texcoord[3].y, R0, R2;
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R1.xyz, R0.xyww, c[0].z;
MUL R1.y, R1, c[14].x;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[3].z, vertex.normal, R2;
DP3 result.texcoord[3].x, vertex.attrib[14], R2;
ADD result.texcoord[4].xy, R1, R1.z;
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[4].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[33].xyxy, c[33];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[32], c[32].zwzw;
END
# 81 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_4LightPosX0]
Vector 17 [unity_4LightPosY0]
Vector 18 [unity_4LightPosZ0]
Vector 19 [unity_4LightAtten0]
Vector 20 [unity_LightColor0]
Vector 21 [unity_LightColor1]
Vector 22 [unity_LightColor2]
Vector 23 [unity_LightColor3]
Vector 24 [unity_SHAr]
Vector 25 [unity_SHAg]
Vector 26 [unity_SHAb]
Vector 27 [unity_SHBr]
Vector 28 [unity_SHBg]
Vector 29 [unity_SHBb]
Vector 30 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 31 [unity_Scale]
Vector 32 [_MainTex_ST]
Vector 33 [_BodyBumpTex_ST]
"vs_3_0
; 84 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
def c34, 1.00000000, 0.00000000, 0.50000000, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r3.xyz, v2, c31.w
dp4 r0.x, v0, c5
add r1, -r0.x, c17
dp3 r3.w, r3, c5
dp3 r4.x, r3, c4
dp3 r3.x, r3, c6
mul r2, r3.w, r1
dp4 r0.x, v0, c4
add r0, -r0.x, c16
mul r1, r1, r1
mov r4.z, r3.x
mad r2, r4.x, r0, r2
mov r4.w, c34.x
dp4 r4.y, v0, c6
mad r1, r0, r0, r1
add r0, -r4.y, c18
mad r1, r0, r0, r1
mad r0, r3.x, r0, r2
mul r2, r1, c19
mov r4.y, r3.w
rsq r1.x, r1.x
rsq r1.y, r1.y
rsq r1.w, r1.w
rsq r1.z, r1.z
mul r0, r0, r1
add r1, r2, c34.x
dp4 r2.z, r4, c26
dp4 r2.y, r4, c25
dp4 r2.x, r4, c24
rcp r1.x, r1.x
rcp r1.y, r1.y
rcp r1.w, r1.w
rcp r1.z, r1.z
max r0, r0, c34.y
mul r0, r0, r1
mul r1.xyz, r0.y, c21
mad r1.xyz, r0.x, c20, r1
mad r0.xyz, r0.z, c22, r1
mad r1.xyz, r0.w, c23, r0
mul r0, r4.xyzz, r4.yzzx
mul r1.w, r3, r3
dp4 r3.z, r0, c29
dp4 r3.y, r0, c28
dp4 r3.x, r0, c27
mad r1.w, r4.x, r4.x, -r1
mul r0.xyz, r1.w, c30
add r2.xyz, r2, r3
add r0.xyz, r2, r0
add o4.xyz, r0, r1
mov r1.w, c34.x
mov r1.xyz, c12
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
mad r3.xyz, r0, c31.w, -v0
mov r1.xyz, v1
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r1.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c15, r0
mov r0, c8
dp4 r4.x, c15, r0
mov r1, c9
dp4 r4.y, c15, r1
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c34.z
mul r1.y, r1, c13.x
dp3 o3.y, r4, r2
dp3 o5.y, r2, r3
dp3 o3.z, v2, r4
dp3 o3.x, r4, v1
dp3 o5.z, v2, r3
dp3 o5.x, v1, r3
mad o6.xy, r1.z, c14.zwzw, r1
mov o0, r0
mov o2, v5
mov o6.zw, r0
mad o1.zw, v4.xyxy, c33.xyxy, c33
mad o1.xy, v3, c32, c32.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 320 // 320 used size, 27 vars
Vector 288 [_MainTex_ST] 4
Vector 304 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 71 instructions, 8 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedfckklfblnfhfjgeeeclidmndcedfobhlabaaaaaaceamaaaaadaaaaaa
cmaaaaaapeaaaaaamiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheommaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaamfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklfdeieefcfeakaaaaeaaaabaajfacaaaafjaaaaaeegiocaaa
aaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagiaaaaacaiaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaa
egiacaaaaaaaaaaabcaaaaaaogikcaaaaaaaaaaabcaaaaaadcaaaaalmccabaaa
abaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaabdaaaaaakgiocaaaaaaaaaaa
bdaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaahhcaabaaa
abaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
jgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaa
acaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaacaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahcccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaah
bccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaaheccabaaa
adaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaaaaaaiadpdiaaaaaihcaabaaaadaaaaaaegbcbaaaacaaaaaapgipcaaa
adaaaaaabeaaaaaadiaaaaaihcaabaaaaeaaaaaafgafbaaaadaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaaklcaabaaaadaaaaaaegiicaaaadaaaaaaamaaaaaa
agaabaaaadaaaaaaegaibaaaaeaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
adaaaaaaaoaaaaaakgakbaaaadaaaaaaegadbaaaadaaaaaabbaaaaaibcaabaaa
adaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaacaaaaaabbaaaaaiccaabaaa
adaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaacaaaaaabbaaaaaiecaabaaa
adaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaacaaaaaadiaaaaahpcaabaaa
aeaaaaaajgacbaaaacaaaaaaegakbaaaacaaaaaabbaaaaaibcaabaaaafaaaaaa
egiocaaaacaaaaaabfaaaaaaegaobaaaaeaaaaaabbaaaaaiccaabaaaafaaaaaa
egiocaaaacaaaaaabgaaaaaaegaobaaaaeaaaaaabbaaaaaiecaabaaaafaaaaaa
egiocaaaacaaaaaabhaaaaaaegaobaaaaeaaaaaaaaaaaaahhcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaafaaaaaadiaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaadaaaaaa
egiccaaaacaaaaaabiaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaadiaaaaai
hcaabaaaaeaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
hcaabaaaaeaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aeaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaeaaaaaaaaaaaaajpcaabaaaafaaaaaa
fgafbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaadaaaaaadiaaaaahpcaabaaa
agaaaaaafgafbaaaacaaaaaaegaobaaaafaaaaaadiaaaaahpcaabaaaafaaaaaa
egaobaaaafaaaaaaegaobaaaafaaaaaaaaaaaaajpcaabaaaahaaaaaaagaabaia
ebaaaaaaaeaaaaaaegiocaaaacaaaaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaa
kgakbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaaeaaaaaadcaaaaajpcaabaaa
agaaaaaaegaobaaaahaaaaaaagaabaaaacaaaaaaegaobaaaagaaaaaadcaaaaaj
pcaabaaaacaaaaaaegaobaaaaeaaaaaakgakbaaaacaaaaaaegaobaaaagaaaaaa
dcaaaaajpcaabaaaafaaaaaaegaobaaaahaaaaaaegaobaaaahaaaaaaegaobaaa
afaaaaaadcaaaaajpcaabaaaaeaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaa
egaobaaaafaaaaaaeeaaaaafpcaabaaaafaaaaaaegaobaaaaeaaaaaadcaaaaan
pcaabaaaaeaaaaaaegaobaaaaeaaaaaaegiocaaaacaaaaaaafaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaoaaaaakpcaabaaaaeaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpegaobaaaaeaaaaaadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaafaaaaaadeaaaaakpcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaah
pcaabaaaacaaaaaaegaobaaaaeaaaaaaegaobaaaacaaaaaadiaaaaaihcaabaaa
aeaaaaaafgafbaaaacaaaaaaegiccaaaacaaaaaaahaaaaaadcaaaaakhcaabaaa
aeaaaaaaegiccaaaacaaaaaaagaaaaaaagaabaaaacaaaaaaegacbaaaaeaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaakgakbaaaacaaaaaa
egacbaaaaeaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaajaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaahhccabaaaaeaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaaabaaaaaa
aeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaacaaaaaadcaaaaal
hcaabaaaacaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
adaaaaaabdaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaapgipcaaa
adaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaagaaaaaakgaobaaa
aaaaaaaaaaaaaaahdccabaaaagaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_8;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  highp float vC_17;
  mediump vec3 x3_18;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAr, normal_16);
  x1_20.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAg, normal_16);
  x1_20.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAb, normal_16);
  x1_20.z = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_16.xyzz * normal_16.yzzx);
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBr, tmpvar_24);
  x2_19.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBg, tmpvar_24);
  x2_19.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBb, tmpvar_24);
  x2_19.z = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y));
  vC_17 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = (unity_SHC.xyz * vC_17);
  x3_18 = tmpvar_29;
  tmpvar_15 = ((x1_20 + x2_19) + x3_18);
  shlight_3 = tmpvar_15;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_30.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_30.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_30.z);
  highp vec4 tmpvar_34;
  tmpvar_34 = (((tmpvar_31 * tmpvar_31) + (tmpvar_32 * tmpvar_32)) + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_35;
  tmpvar_35 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_31 * tmpvar_8.x) + (tmpvar_32 * tmpvar_8.y)) + (tmpvar_33 * tmpvar_8.z)) * inversesqrt(tmpvar_34))) * (1.0/((1.0 + (tmpvar_34 * unity_4LightAtten0)))));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_35.x) + (unity_LightColor[1].xyz * tmpvar_35.y)) + (unity_LightColor[2].xyz * tmpvar_35.z)) + (unity_LightColor[3].xyz * tmpvar_35.w)));
  tmpvar_6 = tmpvar_36;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_11 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 538
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = texture2DProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 538
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 542
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 546
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 550
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 554
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:539(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_8;
  tmpvar_8[0] = _Object2World[0].xyz;
  tmpvar_8[1] = _Object2World[1].xyz;
  tmpvar_8[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1.xyz;
  tmpvar_11 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_2.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_2.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_2.z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_9;
  mediump vec3 tmpvar_16;
  mediump vec4 normal_17;
  normal_17 = tmpvar_15;
  highp float vC_18;
  mediump vec3 x3_19;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAr, normal_17);
  x1_21.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAg, normal_17);
  x1_21.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHAb, normal_17);
  x1_21.z = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_17.xyzz * normal_17.yzzx);
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBr, tmpvar_25);
  x2_20.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBg, tmpvar_25);
  x2_20.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHBb, tmpvar_25);
  x2_20.z = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = ((normal_17.x * normal_17.x) - (normal_17.y * normal_17.y));
  vC_18 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (unity_SHC.xyz * vC_18);
  x3_19 = tmpvar_30;
  tmpvar_16 = ((x1_21 + x2_20) + x3_19);
  shlight_3 = tmpvar_16;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_31.z);
  highp vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_32 * tmpvar_9.x) + (tmpvar_33 * tmpvar_9.y)) + (tmpvar_34 * tmpvar_9.z)) * inversesqrt(tmpvar_35))) * (1.0/((1.0 + (tmpvar_35 * unity_4LightAtten0)))));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y)) + (unity_LightColor[2].xyz * tmpvar_36.z)) + (unity_LightColor[3].xyz * tmpvar_36.w)));
  tmpvar_6 = tmpvar_37;
  highp vec4 o_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_40;
  tmpvar_40.x = tmpvar_39.x;
  tmpvar_40.y = (tmpvar_39.y * _ProjectionParams.x);
  o_38.xy = (tmpvar_40 + tmpvar_39.w);
  o_38.zw = tmpvar_7.zw;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_12 * (((_World2Object * tmpvar_14).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = o_38;
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 460
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 502
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 389
#line 402
#line 410
#line 422
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 434
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 438
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 442
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 446
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 450
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 454
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 458
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 467
#line 513
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 537
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 416
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 418
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 410
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 414
    return OUT;
}
#line 422
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 426
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 430
    return OUT;
}
#line 389
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 393
    OUT = normalize(OUT);
    return OUT;
}
#line 402
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 406
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 467
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 471
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 475
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 479
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 483
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 489
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 494
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = texture2DProj( _ShadowMapTexture, shadowCoord).x;
    return shadow;
}
#line 537
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 541
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 545
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 549
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 553
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:538(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 538
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 95
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 99
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 103
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 107
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 111
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 115
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 516
v2f_surf vert_surf( in appdata_full v ) {
    #line 518
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 522
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 526
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 530
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    #line 534
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 538
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 538
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 542
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 546
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 550
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 554
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_12).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef SHADOWS_NATIVE
    #define SHADOWS_NATIVE 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#extension GL_EXT_shadow_samplers : require
float xll_shadow2D(sampler2DShadow s, vec3 coord) { return shadow2DEXT (s, coord); }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 536
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 538
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 542
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 546
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 550
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:517(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 516
v2f_surf vert_surf( in appdata_full v ) {
    #line 518
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 522
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 526
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 530
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 534
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 536
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 538
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 542
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 546
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 550
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef SHADOWS_NATIVE
    #define SHADOWS_NATIVE 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#extension GL_EXT_shadow_samplers : require
float xll_shadow2D(sampler2DShadow s, vec3 coord) { return shadow2DEXT (s, coord); }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 512
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 532
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 534
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 538
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 542
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 546
    lowp vec4 c = vec4( 0.0);
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    #line 550
    c.w = o.Alpha;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:517(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 512
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 515
v2f_surf vert_surf( in appdata_full v ) {
    #line 517
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 521
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 525
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 529
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 512
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 532
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 534
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 538
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 542
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 546
    lowp vec4 c = vec4( 0.0);
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    #line 550
    c.w = o.Alpha;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_6 * (((_World2Object * tmpvar_7).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_ON
    #define DIRLIGHTMAP_ON 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef SHADOWS_NATIVE
    #define SHADOWS_NATIVE 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#extension GL_EXT_shadow_samplers : require
float xll_shadow2D(sampler2DShadow s, vec3 coord) { return shadow2DEXT (s, coord); }
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 513
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 534
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 536
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 538
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 542
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 546
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 550
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture2D( unity_LightmapInd, IN.lmap.xy);
    #line 554
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    c.w = o.Alpha;
    #line 558
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:537(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 513
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 534
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 516
v2f_surf vert_surf( in appdata_full v ) {
    #line 518
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 522
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 526
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 530
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 513
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 534
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 536
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 538
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 542
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 546
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 550
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    #line 554
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    c.w = o.Alpha;
    #line 558
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_8;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  highp float vC_17;
  mediump vec3 x3_18;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAr, normal_16);
  x1_20.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAg, normal_16);
  x1_20.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAb, normal_16);
  x1_20.z = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_16.xyzz * normal_16.yzzx);
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBr, tmpvar_24);
  x2_19.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBg, tmpvar_24);
  x2_19.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBb, tmpvar_24);
  x2_19.z = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y));
  vC_17 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = (unity_SHC.xyz * vC_17);
  x3_18 = tmpvar_29;
  tmpvar_15 = ((x1_20 + x2_19) + x3_18);
  shlight_3 = tmpvar_15;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_30.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_30.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_30.z);
  highp vec4 tmpvar_34;
  tmpvar_34 = (((tmpvar_31 * tmpvar_31) + (tmpvar_32 * tmpvar_32)) + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_35;
  tmpvar_35 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_31 * tmpvar_8.x) + (tmpvar_32 * tmpvar_8.y)) + (tmpvar_33 * tmpvar_8.z)) * inversesqrt(tmpvar_34))) * (1.0/((1.0 + (tmpvar_34 * unity_4LightAtten0)))));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_35.x) + (unity_LightColor[1].xyz * tmpvar_35.y)) + (unity_LightColor[2].xyz * tmpvar_35.z)) + (unity_LightColor[3].xyz * tmpvar_35.w)));
  tmpvar_6 = tmpvar_36;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_11 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef SHADOWS_SCREEN
    #define SHADOWS_SCREEN 1
#endif
#ifndef SHADOWS_NATIVE
    #define SHADOWS_NATIVE 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#extension GL_EXT_shadow_samplers : require
float xll_shadow2D(sampler2DShadow s, vec3 coord) { return shadow2DEXT (s, coord); }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 538
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 538
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 542
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 546
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 550
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 554
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:539(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 538
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 95
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 99
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 103
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 107
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 111
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 115
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 516
v2f_surf vert_surf( in appdata_full v ) {
    #line 518
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 522
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 526
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 530
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    #line 534
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 461
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 503
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 437
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 441
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 445
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 449
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 453
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 457
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 468
#line 514
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 538
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 417
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 421
    return OUT;
}
#line 411
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 413
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 423
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 425
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 429
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 403
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 405
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 409
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 468
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 472
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 476
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 480
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 484
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 490
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 495
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 538
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 542
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 546
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 550
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 554
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 6
//   opengl - ALU: 43 to 164, TEX: 5 to 11
//   d3d9 - ALU: 38 to 157, TEX: 5 to 11
//   d3d11 - ALU: 23 to 91, TEX: 5 to 11, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 149 ALU, 8 TEX
PARAM c[25] = { program.local[0..22],
		{ 0.5, 0, 1, 0.025 },
		{ 2, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MOV R5.xy, c[23].yzzw;
MOV R0.z, c[21].x;
MOV R0.w, c[22].x;
MOV R0.y, c[20].x;
MOV R0.x, c[19];
MAD R5.zw, fragment.texcoord[0], R0, R0.xyxy;
MOV R0.w, c[23].z;
TEX R1.yw, R5.zwzw, texture[4], 2D;
MAD R0.xy, R1.wyzw, c[24].x, -R0.w;
MUL R1.xy, R0, R0;
ADD_SAT R0.z, R1.x, R1.y;
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MAD R3.xy, R3.wyzw, c[24].x, -R0.w;
ADD R0.z, -R0, c[23];
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[23].xxzw;
MUL R1.xyz, R1, c[10].x;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD R1.w, -R5.y, c[10].x;
ADD R1.xyz, R1, c[23].xxzw;
CMP R1.xyz, -R1.w, R0, R1;
TEX R4.yw, fragment.texcoord[0], texture[5], 2D;
MOV R0.xy, c[10].x;
MOV R0.z, c[23].y;
MAD R0.xyz, R1, R0, R1;
MUL R1.zw, fragment.texcoord[0], c[14].x;
DP3 R1.x, R0, R0;
TEX R1.yw, R1.zwzw, texture[6], 2D;
RSQ R1.z, R1.x;
MUL R2.xyz, R1.z, R0;
ADD_SAT R0.z, R3, R3.w;
MAD R1.xy, R1.wyzw, c[24].x, -R0.w;
MUL R1.zw, R1.xyxy, R1.xyxy;
MAD R0.xy, R4.wyzw, c[24].x, -R0.w;
MUL R4.xy, R0, R0;
ADD_SAT R1.z, R1, R1.w;
ADD_SAT R2.w, R4.x, R4.y;
ADD R2.w, -R2, c[23].z;
RSQ R3.z, R2.w;
ADD R0.z, -R0, c[23];
RSQ R2.w, R0.z;
RCP R0.z, R3.z;
RCP R3.z, R2.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
MOV R0.xy, c[9].x;
MOV R0.z, c[23].y;
MAD R3.xyz, R3, R0, R2;
DP3 R1.w, R3, R3;
ADD R1.z, -R1, c[23];
RSQ R0.x, R1.z;
RCP R1.z, R0.x;
RSQ R1.w, R1.w;
MOV R0.z, c[23].y;
MOV R0.xy, c[11].x;
MUL R4.xyz, R1, R0;
MAD R0.xyz, R1, R0, R2;
MAD R4.xyz, R1.w, R3, R4;
DP3 R1.y, R4, R4;
DP3 R1.x, R0, R0;
RSQ R2.w, R1.x;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R4;
ABS R3.w, c[11].x;
CMP R4.x, -R3.w, c[23].z, c[23].y;
MUL R0.xyz, R2.w, R0;
ABS R4.y, c[9].x;
CMP R2.w, -R4.y, c[23].z, c[23].y;
MUL R4.z, R2.w, R4.x;
CMP R4.y, -R4, c[23], c[23].z;
MUL R4.y, R4.x, R4;
ABS R4.z, R4;
CMP R4.x, -R4.z, c[23].y, c[23].z;
MUL R4.z, R4.x, R4.y;
CMP R0.xyz, -R4.z, R0, R1;
MUL R1.xyz, R1.w, R3;
CMP R3.x, -R3.w, c[23].y, c[23].z;
MUL R2.w, R2, R3.x;
ABS R1.w, R4.y;
CMP R1.w, -R1, c[23].y, c[23].z;
MUL R1.w, R4.x, R1;
MUL R3.y, R1.w, R2.w;
ABS R3.x, R2.w;
CMP R0.xyz, -R3.y, R1, R0;
CMP R2.w, -R3.x, c[23].y, c[23].z;
MUL R1.x, R1.w, R2.w;
CMP R0.xyz, -R1.x, R2, R0;
DP3 R1.w, fragment.texcoord[3], fragment.texcoord[3];
MOV R2.y, c[17].x;
RSQ R1.w, R1.w;
MOV R1.xyz, fragment.texcoord[1];
MAD R1.xyz, R1.w, fragment.texcoord[3], R1;
DP3 R1.w, R0, fragment.texcoord[1];
DP3 R2.x, R1, R1;
RSQ R2.x, R2.x;
MUL R1.xyz, R2.x, R1;
DP3 R0.x, R0, R1;
ADD R2.y, -R2, c[18].x;
MAD R2.x, fragment.color.primary, R2.y, c[17];
MUL R0.y, R2.x, c[24];
MAX R0.x, R0, c[23].y;
POW R2.w, R0.x, R0.y;
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R1.xyz, R0, c[2];
ADD R2.xyz, -R0.w, c[6];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[3], -R1;
MAD R0.xyz, fragment.color.primary.x, R0, R1;
MAD R2.xyz, fragment.color.primary.y, R2, c[23].z;
MUL R0.xyz, R0, R2;
TEX R1.x, R5.zwzw, texture[3], 2D;
ADD R0.w, -R1.x, c[23].z;
ADD R2.xy, fragment.texcoord[0].zwzw, c[13].x;
MUL R1.xy, R2, c[14].x;
TEX R2.xy, R1, texture[6], 2D;
ADD R2.x, R2, R2.y;
MUL R2.w, R0.y, R2;
MUL_SAT R0.w, R0, c[8].x;
ADD R1.xyz, -R5.y, c[7];
MAD R1.xyz, R0.w, R1, c[23].z;
MUL R0.xyz, R0, R1;
MAX R2.y, R5.x, c[15].x;
ADD R2.x, R2, -c[23];
MAD_SAT R2.x, R2, R2.y, c[23].w;
ADD R0.w, -R2.x, c[23].z;
MUL R2.x, R0.w, c[15];
MOV R0.w, c[12].x;
ADD R1.xyz, -R5.y, c[16];
MAD R1.xyz, R2.x, R1, c[23].z;
SLT R0.w, c[23].x, R0;
ABS R0.w, R0;
MUL R1.xyz, R0, R1;
CMP R0.w, -R0, c[23].y, c[23].z;
CMP R1.xyz, -R0.w, R0, R1;
MOV R0.xyz, c[5];
ADD R0.xyz, -R0, c[4];
MAX R1.w, R1, c[23].y;
MUL R2.xyz, R1, c[0];
MOV R0.w, c[23].z;
MAD R0.xyz, fragment.color.primary.x, R0, c[5];
MUL R0, R0, c[1];
MUL R0.w, R0, c[0];
MUL R2.xyz, R2, R1.w;
MUL R0.xyz, R0, c[0];
MAD R0.xyz, R0, R2.w, R2;
MUL R0.xyz, R0, c[24].x;
MAD result.color.xyz, R1, fragment.texcoord[2], R0;
MUL result.color.w, R2, R0;
END
# 149 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
"ps_3_0
; 145 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c23, -0.50000000, -1.00000000, 1.00000000, 0.00000000
def c24, 0.02500000, 2.00000000, -1.00000000, 128.00000000
def c25, 0.50000000, 1.00000000, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4.xyz
texld r3.yw, v0, s2
mad_pp r3.xy, r3.wyzw, c24.y, c24.z
mov r0.z, c21.x
mov r0.w, c22.x
mov r0.y, c20.x
mov r0.x, c19
mad r5.xy, v0.zwzw, r0.zwzw, r0
texld r0.yw, r5, s4
mad_pp r0.xy, r0.wyzw, c24.y, c24.z
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c23
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
add r1.xyz, r0, c23.xxyw
mul r1.xyz, r1, c10.x
mov r0.w, c10.x
add r0.w, c23.y, r0
add r1.xyz, r1, c25.xxyw
cmp r1.xyz, -r0.w, r1, r0
mov r0.xy, c10.x
mov r0.z, c23.w
mad r2.xyz, r1, r0, r1
mul r0.xy, v0.zwzw, c14.x
texld r0.yw, r0, s6
mad_pp r1.xy, r0.wyzw, c24.y, c24.z
dp3 r0.z, r2, r2
rsq r0.x, r0.z
mul_pp r1.zw, r1.xyxy, r1.xyxy
mul r2.xyz, r0.x, r2
texld r0.yw, v0, s5
mad_pp r0.xy, r0.wyzw, c24.y, c24.z
mul_pp r3.zw, r0.xyxy, r0.xyxy
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp_sat r2.w, r3.z, r3
add_pp r0.w, -r2, c23.z
rsq_pp r2.w, r0.w
add_pp r0.z, -r0, c23
rsq_pp r0.w, r0.z
rcp_pp r0.z, r2.w
rcp_pp r3.z, r0.w
add r3.xyz, r3, -r0
mad r3.xyz, v1.x, r3, r0
add_pp_sat r0.w, r1.z, r1
mov r0.xy, c9.x
mov r0.z, c23.w
mad r3.xyz, r3, r0, r2
add_pp r0.w, -r0, c23.z
rsq_pp r0.x, r0.w
rcp_pp r1.z, r0.x
dp3 r0.w, r3, r3
rsq r0.w, r0.w
mov r0.z, c23.w
mov r0.xy, c11.x
mul r4.xyz, r1, r0
mad r0.xyz, r1, r0, r2
mad r4.xyz, r0.w, r3, r4
dp3 r1.x, r4, r4
dp3 r1.y, r0, r0
rsq r1.w, r1.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, r4
abs r2.w, c11.x
cmp r4.x, -r2.w, c23.w, c23.z
mul r0.xyz, r1.w, r0
abs r4.y, c9.x
cmp r1.w, -r4.y, c23, c23.z
mul_pp r3.w, r1, r4.x
cmp r4.y, -r4, c23.z, c23.w
cmp r2.w, -r2, c23.z, c23
abs_pp r3.w, r3
mul_pp r1.w, r1, r2
mul_pp r4.x, r4, r4.y
cmp_pp r3.w, -r3, c23.z, c23
mul_pp r4.y, r3.w, r4.x
cmp_pp r0.xyz, -r4.y, r1, r0
mul r1.xyz, r0.w, r3
abs_pp r0.w, r4.x
cmp_pp r0.w, -r0, c23.z, c23
mul_pp r0.w, r3, r0
mul_pp r2.w, r0, r1
cmp_pp r1.xyz, -r2.w, r0, r1
abs_pp r1.w, r1
cmp_pp r1.w, -r1, c23.z, c23
mul_pp r0.w, r0, r1
cmp_pp r3.xyz, -r0.w, r1, r2
dp3_pp r2.w, v4, v4
mov_pp r1.x, c18
rsq_pp r2.w, r2.w
mov_pp r0.xyz, v2
mad_pp r0.xyz, r2.w, v4, r0
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
add_pp r1.x, -c17, r1
mad_pp r0.w, v1.x, r1.x, c17.x
dp3_pp r0.x, r3, r0
mul_pp r1.y, r0.w, c24.w
max_pp r1.x, r0, c23.w
pow r0, r1.x, r1.y
mov r0.w, r0.x
mov_pp r1.xyz, c6
add_pp r2.xyz, c23.y, r1
texld r0.xyz, v0, s0
mul r1.xyz, r0, c2
texld r0.xyz, v0, s1
mad r0.xyz, r0, c3, -r1
mad r0.xyz, v1.x, r0, r1
mad_pp r2.xyz, v1.y, r2, c23.z
mul r0.xyz, r0, r2
mul r1.w, r0.y, r0
dp3_pp r0.w, r3, v2
add r2.xy, v0.zwzw, c13.x
texld r1.x, r5, s3
max_pp r2.w, r0, c23
add r0.w, -r1.x, c23.z
mov r1.xyz, c7
mul_sat r0.w, r0, c8.x
add r1.xyz, c23.y, r1
mad r1.xyz, r0.w, r1, c23.z
mul r1.xyz, r0, r1
mul r2.xy, r2, c14.x
texld r0.xy, r2, s6
add r0.x, r0, r0.y
mov r0.z, c15.x
max r0.y, c23.w, r0.z
add r0.x, r0, c23
mad_sat r0.w, r0.x, r0.y, c24.x
mov r0.xyz, c16
add r0.w, -r0, c23.z
mul r0.w, r0, c15.x
add r0.xyz, c23.y, r0
mad r0.xyz, r0.w, r0, c23.z
mov r0.w, c12.x
mul r0.xyz, r1, r0
add_pp r0.w, c23.x, r0
cmp_pp r1.xyz, -r0.w, r1, r0
mov_pp r0.xyz, c4
mul_pp r2.xyz, r1, c0
add_pp r0.xyz, -c5, r0
mov_pp r0.w, c23.z
mad_pp r0.xyz, v1.x, r0, c5
mul_pp r0, r0, c1
mul_pp r0.w, r0, c0
mul_pp r2.xyz, r2, r2.w
mul_pp r0.xyz, r0, c0
mad r0.xyz, r0, r1.w, r2
mul r0.xyz, r0, c24.y
mad_pp oC0.xyz, r1, v3, r0
mul oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
ConstBuffer "$Globals" 256 // 212 used size, 26 vars
Vector 16 [_LightColor0] 4
Vector 32 [_SpecColor] 4
Vector 48 [_Color] 3
Vector 64 [_TrimColor] 3
Vector 80 [_TrimSpecColor] 3
Vector 96 [_MainSpecColor] 3
Vector 112 [_VertexMaskColor] 3
Vector 128 [_BodyOcclusionColor] 3
Float 140 [_BodyOcclusionPower]
Float 144 [_BumpPower]
Float 148 [_BodyBumpPower]
Float 152 [_BumpDetailPower]
Float 156 [_DetailTexEnable]
Float 160 [_DetailTexOffset]
Float 164 [_DetailTexScale]
Float 168 [_DetailTexPower]
Vector 176 [_DetailTexColor] 3
Float 188 [_Shininess]
Float 192 [_TrimShininess]
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [_BumpDetailTex] 2D 2
// 118 instructions, 6 temp regs, 0 temp arrays:
// ALU 75 float, 0 int, 2 uint
// TEX 8 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcmncemnkjgbfedcbpmkclhcjkdgkdkdnabaaaaaacibbaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
aebaaaaaeaaaaaaaabaeaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
gcbaaaadpcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaafaaaaaadcaaaaapdcaabaaaaaaaaaaa
hgapbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaa
dcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaa
dkaabaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaa
dkiacaaaaaaaaaaaamaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaa
akiacaaaaaaaaaaaanaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
jgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaadaaaaaaaagabaaaaeaaaaaaaaaaaaaiicaabaaaaaaaaaaa
akaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaaiaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaa
acaaaaaahgapbaaaacaaaaaaapaaaaahbcaabaaaabaaaaaaegaabaaaabaaaaaa
egaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaacaaaaaaakaabaaaabaaaaaaaaaaaaakhcaabaaa
abaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamalpaaaamalpaaaaialpaaaaaaaa
aaaaaaakhcaabaaaacaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaadcaaaaanhcaabaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaa
egacbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaiadpaaaaaaaabnaaaaai
icaabaaaabaaaaaaabeaaaaaaaaaiadpbkiacaaaaaaaaaaaajaaaaaadhaaaaaj
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
dgaaaaafecaabaaaacaaaaaaabeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaa
fgijcaaaaaaaaaaaajaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
agacbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaag
bcaabaaaadaaaaaaakiacaaaaaaaaaaaajaaaaaadgaaaaafecaabaaaadaaaaaa
abeaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaa
adaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaah
ocaabaaaadaaaaaaagajbaaaaaaaaaaaagaabaaaadaaaaaabiaaaaaldcaabaaa
aeaaaaaaigiacaaaaaaaaaaaajaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaadjaaaaalmcaabaaaaeaaaaaakgiccaaaaaaaaaaaajaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaa
aeaaaaaaegaabaaaaeaaaaaaabaaaaahecaabaaaaeaaaaaackaabaaaaeaaaaaa
dkaabaaaaeaaaaaadhaaaaajhcaabaaaacaaaaaafgafbaaaaeaaaaaajgahbaaa
adaaaaaaegacbaaaacaaaaaadiaaaaaigcaabaaaadaaaaaakgblbaaaabaaaaaa
fgifcaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaadaaaaaa
eghobaaaagaaaaaaaagabaaaacaaaaaadcaaaaapgcaabaaaadaaaaaapganbaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaaaaa
aaaaialpaaaaialpaaaaaaaadiaaaaahdcaabaaaafaaaaaapgapbaaaacaaaaaa
jgafbaaaadaaaaaadgaaaaafecaabaaaafaaaaaaabeaaaaaaaaaaaaadcaaaaaj
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaegacbaaaafaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagaabaaaadaaaaaaegacbaaa
afaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadhaaaaajhcaabaaaabaaaaaaagaabaaa
aeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaa
dhaaaaajhcaabaaaaaaaaaaakgakbaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaadaaaaaa
deaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
ccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbjbaaaafaaaaaa
fgafbaaaabaaaaaaagbjbaaaadaaaaaabaaaaaahbcaabaaaacaaaaaajgahbaaa
abaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaacpaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaakccaabaaaaaaaaaaadkiacaiaebaaaaaaaaaaaaaa
alaaaaaaakiacaaaaaaaaaaaamaaaaaadcaaaaakccaabaaaaaaaaaaaakbabaaa
acaaaaaabkaabaaaaaaaaaaadkiacaaaaaaaaaaaalaaaaaadiaaaaahccaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaaaeddiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaabjaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaadiaaaaaiocaabaaaabaaaaaaagajbaaaadaaaaaa
agijcaaaaaaaaaaaadaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaaaaaaaaaaeaaaaaajgahbaiaebaaaaaaabaaaaaadcaaaaajocaabaaa
abaaaaaaagbabaaaacaaaaaaagajbaaaacaaaaaafgaobaaaabaaaaaaaaaaaaal
hcaabaaaacaaaaaaegiccaaaaaaaaaaaahaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaafgbfbaaaacaaaaaaegacbaaa
acaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahocaabaaa
abaaaaaafgaobaaaabaaaaaaagajbaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaackaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaafaaaaaaegiccaiaebaaaaaaaaaaaaaaagaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaagaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegiocaaaaaaaaaaaacaaaaaadiaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaadiaaaaahhcaabaaaacaaaaaa
agaabaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaa
aaaaaaaadkaabaaaacaaaaaaaaaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
aiaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaa
abaaaaaaaaaaaaaigcaabaaaabaaaaaakgblbaaaabaaaaaaagiacaaaaaaaaaaa
akaaaaaadiaaaaaigcaabaaaabaaaaaafgagbaaaabaaaaaafgifcaaaaaaaaaaa
akaaaaaaefaaaaajpcaabaaaadaaaaaajgafbaaaabaaaaaaeghobaaaagaaaaaa
aagabaaaacaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaakaabaaa
adaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaalp
deaaaaaiccaabaaaabaaaaaackiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaaa
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaabeaaaaa
mnmmmmdmaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaa
akaaaaaaaaaaaaalocaabaaaabaaaaaaagijcaaaaaaaaaaaalaaaaaaaceaaaaa
aaaaaaaaaaaaialpaaaaialpaaaaialpdcaaaaamocaabaaaabaaaaaapgapbaaa
aaaaaaaafgaobaaaabaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaiadpaaaaiadp
diaaaaahocaabaaaabaaaaaaagajbaaaaaaaaaaafgaobaaaabaaaaaadbaaaaai
icaabaaaaaaaaaaaabeaaaaaaaaaaadpdkiacaaaaaaaaaaaajaaaaaadhaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaajgahbaaaabaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaabaaaaaaagajbaaaaaaaaaaaagijcaaaaaaaaaaaabaaaaaa
dcaaaaajhcaabaaaabaaaaaajgahbaaaabaaaaaaagaabaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
dcaaaaajhccabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_Color]
Vector 1 [_TrimColor]
Vector 2 [_VertexMaskColor]
Vector 3 [_BodyOcclusionColor]
Float 4 [_BodyOcclusionPower]
Float 8 [_DetailTexEnable]
Float 9 [_DetailTexOffset]
Float 10 [_DetailTexScale]
Float 11 [_DetailTexPower]
Vector 12 [_DetailTexColor]
Float 13 [_AtlasOffsetX]
Float 14 [_AtlasOffsetY]
Float 15 [_AtlasScaleX]
Float 16 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [unity_Lightmap] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 43 ALU, 5 TEX
PARAM c[19] = { program.local[0..16],
		{ 1, 0, 0.5, 0.025 },
		{ 8 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R1.xyz, R0, c[0];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[1], -R1;
MOV R0.w, c[17].x;
MAD R1.xyz, fragment.color.primary.x, R0, R1;
ADD R0.xyz, -R0.w, c[2];
MAD R0.xyz, fragment.color.primary.y, R0, c[17].x;
MUL R1.xyz, R1, R0;
ADD R0.xy, fragment.texcoord[0].zwzw, c[9].x;
MUL R0.xy, R0, c[10].x;
TEX R0.xy, R0, texture[6], 2D;
ADD R0.x, R0, R0.y;
MOV R2.w, c[14].x;
MOV R2.z, c[13].x;
MOV R2.x, c[15];
MOV R2.y, c[16].x;
MAD R2.xy, fragment.texcoord[0].zwzw, R2, R2.zwzw;
TEX R2.x, R2, texture[3], 2D;
ADD R0.z, -R2.x, c[17].x;
MUL_SAT R1.w, R0.z, c[4].x;
MOV R0.zw, c[17].xyxy;
ADD R2.xyz, -R0.z, c[3];
MAD R2.xyz, R1.w, R2, c[17].x;
MUL R1.xyz, R1, R2;
MAX R0.y, R0.w, c[11].x;
ADD R0.x, R0, -c[17].z;
MAD_SAT R0.x, R0, R0.y, c[17].w;
ADD R0.x, -R0, c[17];
MUL R0.w, R0.x, c[11].x;
ADD R0.xyz, -R0.z, c[12];
MAD R0.xyz, R0.w, R0, c[17].x;
MOV R1.w, c[8].x;
SLT R0.w, c[17].z, R1;
ABS R0.w, R0;
MUL R0.xyz, R1, R0;
CMP R0.w, -R0, c[17].y, c[17].x;
CMP R0.xyz, -R0.w, R1, R0;
TEX R2, fragment.texcoord[1], texture[7], 2D;
MUL R1.xyz, R2.w, R2;
MUL R0.xyz, R1, R0;
MUL result.color.xyz, R0, c[18].x;
MOV result.color.w, c[17].y;
END
# 43 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_Color]
Vector 1 [_TrimColor]
Vector 2 [_VertexMaskColor]
Vector 3 [_BodyOcclusionColor]
Float 4 [_BodyOcclusionPower]
Float 5 [_DetailTexEnable]
Float 6 [_DetailTexOffset]
Float 7 [_DetailTexScale]
Float 8 [_DetailTexPower]
Vector 9 [_DetailTexColor]
Float 10 [_AtlasOffsetX]
Float 11 [_AtlasOffsetY]
Float 12 [_AtlasScaleX]
Float 13 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [unity_Lightmap] 2D
"ps_3_0
; 38 ALU, 5 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
dcl_2d s7
def c14, -1.00000000, 1.00000000, 0.00000000, 0.02500000
def c15, -0.50000000, 8.00000000, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xy
texld r0.xyz, v0, s0
mul r1.xyz, r0, c0
texld r0.xyz, v0, s1
mad r0.xyz, r0, c1, -r1
mad r0.xyz, v1.x, r0, r1
mov_pp r1.xyz, c2
add_pp r1.xyz, c14.x, r1
mad_pp r1.xyz, v1.y, r1, c14.y
mul r1.xyz, r0, r1
add r0.xy, v0.zwzw, c6.x
mul r0.xy, r0, c7.x
texld r0.xy, r0, s6
add r0.x, r0, r0.y
mov r1.w, c5.x
mov r2.z, c12.x
add r0.x, r0, c15
mov r2.w, c13.x
mov r2.y, c11.x
mov r2.x, c10
mad r2.xy, v0.zwzw, r2.zwzw, r2
texld r2.x, r2, s3
add r0.w, -r2.x, c14.y
mov r2.xyz, c3
mul_sat r0.z, r0.w, c4.x
add r2.xyz, c14.x, r2
mad r2.xyz, r0.z, r2, c14.y
mov r0.z, c8.x
max r0.y, c14.z, r0.z
mad_sat r0.w, r0.x, r0.y, c14
mov r0.xyz, c9
add r0.w, -r0, c14.y
mul r1.xyz, r1, r2
mul r0.w, r0, c8.x
add r0.xyz, c14.x, r0
mad r0.xyz, r0.w, r0, c14.y
mul r2.xyz, r1, r0
texld r0, v2, s7
add_pp r1.w, c15.x, r1
cmp_pp r1.xyz, -r1.w, r1, r2
mul_pp r0.xyz, r0.w, r0
mul_pp r0.xyz, r0, r1
mul_pp oC0.xyz, r0, c15.y
mov_pp oC0.w, c14.z
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
ConstBuffer "$Globals" 272 // 212 used size, 27 vars
Vector 48 [_Color] 3
Vector 64 [_TrimColor] 3
Vector 112 [_VertexMaskColor] 3
Vector 128 [_BodyOcclusionColor] 3
Float 140 [_BodyOcclusionPower]
Float 156 [_DetailTexEnable]
Float 160 [_DetailTexOffset]
Float 164 [_DetailTexScale]
Float 168 [_DetailTexPower]
Vector 176 [_DetailTexColor] 3
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 3
SetTexture 2 [_BodyOcclusionTex] 2D 2
SetTexture 3 [_BumpDetailTex] 2D 1
SetTexture 4 [unity_Lightmap] 2D 4
// 37 instructions, 3 temp regs, 0 temp arrays:
// ALU 23 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedigodjkbhjphpgnaklnjfohlfjhlnipopabaaaaaakiagaaaaadaaaaaa
cmaaaaaaliaaaaaaomaaaaaaejfdeheoieaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahnaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaa
abaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaa
fdfgfpfegbhcghgfheaaklklfdeieefcleafaaaaeaaaaaaagnabaaaafjaaaaae
egiocaaaaaaaaaaaaoaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaad
aagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadpcbabaaa
abaaaaaagcbaaaaddcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacadaaaaaaaaaaaaaidcaabaaaaaaaaaaaogbkbaaa
abaaaaaaagiacaaaaaaaaaaaakaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaa
aaaaaaaafgifcaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaalpdeaaaaaiccaabaaaaaaaaaaackiacaaaaaaaaaaa
akaaaaaaabeaaaaaaaaaaaaadccaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaamnmmmmdmaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackiacaaaaaaaaaaaakaaaaaaaaaaaaalocaabaaaaaaaaaaaagijcaaa
aaaaaaaaalaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaialpdcaaaaam
hcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagbabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaalhcaabaaaacaaaaaaegiccaaaaaaaaaaaahaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaafgbfbaaa
acaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaai
bcaabaaaacaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaamaaaaaadiaaaaai
ccaabaaaacaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaanaaaaaaaaaaaaai
dcaabaaaacaaaaaaegaabaaaacaaaaaajgifcaaaaaaaaaaaamaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadp
dicaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaaiaaaaaa
aaaaaaalhcaabaaaacaaaaaaegiccaaaaaaaaaaaaiaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadbaaaaaiicaabaaaaaaaaaaa
abeaaaaaaaaaaadpdkiacaaaaaaaaaaaajaaaaaadhaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaadaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaebdiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_BumpPower]
Float 9 [_BodyBumpPower]
Float 10 [_BumpDetailPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_Shininess]
Float 17 [_TrimShininess]
Float 18 [_AtlasOffsetX]
Float 19 [_AtlasOffsetY]
Float 20 [_AtlasScaleX]
Float 21 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 158 ALU, 10 TEX
PARAM c[26] = { program.local[0..21],
		{ 0, 0.5, 1, 0.025 },
		{ 2, -0.40824828, -0.70710677, 0.57735026 },
		{ -0.40824831, 0.70710677, 0.57735026, 8 },
		{ 0.81649655, 0, 0.57735026, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MOV R5.xy, c[22].xzzw;
MOV R0.z, c[20].x;
MOV R0.w, c[21].x;
MOV R0.y, c[19].x;
MOV R0.x, c[18];
MAD R5.zw, fragment.texcoord[0], R0, R0.xyxy;
MOV R0.w, c[22].z;
TEX R1.yw, R5.zwzw, texture[4], 2D;
MAD R0.xy, R1.wyzw, c[23].x, -R0.w;
MUL R1.xy, R0, R0;
ADD_SAT R0.z, R1.x, R1.y;
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MAD R3.xy, R3.wyzw, c[23].x, -R0.w;
ADD R0.z, -R0, c[22];
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[22].yyzw;
MUL R1.xyz, R1, c[9].x;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD R1.w, -R5.y, c[9].x;
ADD R1.xyz, R1, c[22].yyzw;
CMP R1.xyz, -R1.w, R0, R1;
TEX R4.yw, fragment.texcoord[0], texture[5], 2D;
MOV R0.xy, c[9].x;
MOV R0.z, c[22].x;
MAD R0.xyz, R1, R0, R1;
MUL R1.zw, fragment.texcoord[0], c[13].x;
DP3 R1.x, R0, R0;
TEX R1.yw, R1.zwzw, texture[6], 2D;
RSQ R1.z, R1.x;
MUL R2.xyz, R1.z, R0;
ADD_SAT R0.z, R3, R3.w;
MAD R1.xy, R1.wyzw, c[23].x, -R0.w;
MUL R1.zw, R1.xyxy, R1.xyxy;
MAD R0.xy, R4.wyzw, c[23].x, -R0.w;
MUL R4.xy, R0, R0;
ADD_SAT R1.z, R1, R1.w;
ADD_SAT R2.w, R4.x, R4.y;
ADD R2.w, -R2, c[22].z;
RSQ R3.z, R2.w;
ADD R0.z, -R0, c[22];
RSQ R2.w, R0.z;
RCP R0.z, R3.z;
RCP R3.z, R2.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
MOV R0.xy, c[8].x;
MOV R0.z, c[22].x;
MAD R3.xyz, R3, R0, R2;
DP3 R1.w, R3, R3;
ADD R1.z, -R1, c[22];
RSQ R0.x, R1.z;
RCP R1.z, R0.x;
RSQ R1.w, R1.w;
MOV R0.z, c[22].x;
MOV R0.xy, c[10].x;
MUL R4.xyz, R1, R0;
MAD R0.xyz, R1, R0, R2;
MAD R4.xyz, R1.w, R3, R4;
DP3 R1.y, R4, R4;
DP3 R1.x, R0, R0;
RSQ R2.w, R1.x;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R4;
ABS R3.w, c[10].x;
CMP R4.x, -R3.w, c[22].z, c[22];
MUL R0.xyz, R2.w, R0;
ABS R4.y, c[8].x;
CMP R2.w, -R4.y, c[22].z, c[22].x;
MUL R4.z, R2.w, R4.x;
CMP R4.y, -R4, c[22].x, c[22].z;
MUL R4.y, R4.x, R4;
ABS R4.z, R4;
CMP R4.x, -R4.z, c[22], c[22].z;
MUL R4.z, R4.x, R4.y;
CMP R0.xyz, -R4.z, R0, R1;
MUL R1.xyz, R1.w, R3;
ABS R1.w, R4.y;
CMP R3.x, -R3.w, c[22], c[22].z;
MUL R2.w, R2, R3.x;
CMP R1.w, -R1, c[22].x, c[22].z;
MUL R1.w, R4.x, R1;
MUL R3.y, R1.w, R2.w;
ABS R3.x, R2.w;
CMP R0.xyz, -R3.y, R1, R0;
CMP R2.w, -R3.x, c[22].x, c[22].z;
MUL R1.x, R1.w, R2.w;
CMP R0.xyz, -R1.x, R2, R0;
TEX R1, fragment.texcoord[1], texture[8], 2D;
MUL R1.xyz, R1.w, R1;
MUL R4.xyz, R1, c[24].w;
TEX R1, fragment.texcoord[1], texture[7], 2D;
DP3_SAT R2.z, R0, c[23].yzww;
DP3_SAT R2.y, R0, c[24];
DP3_SAT R2.x, R0, c[25];
DP3 R2.w, R2, R4;
MUL R1.xyz, R1.w, R1;
MUL R3.xyz, R1, R2.w;
MUL R2.xyz, R4.y, c[24];
MAD R2.xyz, R4.x, c[25], R2;
MAD R1.xyz, R4.z, c[23].yzww, R2;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
MOV R2.xyz, c[4];
ADD R2.xyz, -R2, c[3];
MAD R2.xyz, fragment.color.primary.x, R2, c[4];
DP3 R1.w, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.w, R1.w;
MAD R1.xyz, R1.w, fragment.texcoord[2], R1;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
DP3 R0.x, R0, R1;
MUL R2.xyz, R2, c[0];
MUL R3.xyz, R3, c[24].w;
MUL R4.xyz, R3, R2;
MOV R2.x, c[16];
ADD R2.x, -R2, c[17];
MAD R1.w, fragment.color.primary.x, R2.x, c[16].x;
ADD R2.xyz, -R0.w, c[5];
MAD R2.xyz, fragment.color.primary.y, R2, c[22].z;
MUL R0.y, R1.w, c[25].w;
MAX R0.x, R0, c[22];
POW R1.w, R0.x, R0.y;
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R1.xyz, R0, c[1];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[2], -R1;
MAD R0.xyz, fragment.color.primary.x, R0, R1;
MUL R0.xyz, R0, R2;
MUL R1.xyz, R0.y, R4;
TEX R4.x, R5.zwzw, texture[3], 2D;
ADD R0.w, -R4.x, c[22].z;
ADD R2.xy, fragment.texcoord[0].zwzw, c[12].x;
MUL R2.xy, R2, c[13].x;
TEX R4.xy, R2, texture[6], 2D;
MUL R1.xyz, R1, R1.w;
ADD R1.w, R4.x, R4.y;
MUL_SAT R0.w, R0, c[7].x;
ADD R2.xyz, -R5.y, c[6];
MAD R2.xyz, R0.w, R2, c[22].z;
MUL R0.xyz, R0, R2;
MAX R2.w, R5.x, c[14].x;
ADD R1.w, R1, -c[22].y;
MAD_SAT R1.w, R1, R2, c[22];
ADD R0.w, -R1, c[22].z;
MUL R1.w, R0, c[14].x;
MOV R0.w, c[11].x;
ADD R2.xyz, -R5.y, c[15];
SLT R0.w, c[22].y, R0;
MAD R2.xyz, R1.w, R2, c[22].z;
ABS R0.w, R0;
MUL R2.xyz, R0, R2;
CMP R0.w, -R0, c[22].x, c[22].z;
CMP R0.xyz, -R0.w, R0, R2;
MAD result.color.xyz, R0, R3, R1;
MOV result.color.w, c[22].x;
END
# 158 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_BumpPower]
Float 9 [_BodyBumpPower]
Float 10 [_BumpDetailPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_Shininess]
Float 17 [_TrimShininess]
Float 18 [_AtlasOffsetX]
Float 19 [_AtlasOffsetY]
Float 20 [_AtlasScaleX]
Float 21 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"ps_3_0
; 152 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c22, -0.50000000, -1.00000000, 1.00000000, 0.00000000
def c23, 0.02500000, 2.00000000, -1.00000000, 8.00000000
def c24, 0.50000000, 1.00000000, 128.00000000, 0
def c25, -0.40824828, -0.70710677, 0.57735026, 0
def c26, -0.40824831, 0.70710677, 0.57735026, 0
def c27, 0.81649655, 0.00000000, 0.57735026, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xyz
texld r4.yw, v0, s2
mad_pp r4.xy, r4.wyzw, c23.y, c23.z
mov r0.w, c19.x
mov r0.z, c18.x
mov r5.z, c22.w
mov r5.xy, c10.x
abs r4.w, c8.x
mov r0.x, c20
mov r0.y, c21.x
mad r0.xy, v0.zwzw, r0, r0.zwzw
texld r1.yw, r0, s4
mad_pp r1.xy, r1.wyzw, c23.y, c23.z
mul_pp r0.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c22
rsq_pp r0.z, r0.z
rcp_pp r1.z, r0.z
add r2.xyz, r1, c22.xxyw
mul r2.xyz, r2, c9.x
mov r0.z, c9.x
add r2.xyz, r2, c24.xxyw
add r0.z, c22.y, r0
cmp r1.xyz, -r0.z, r2, r1
mov r2.xy, c9.x
mov r2.z, c22.w
mad r2.xyz, r1, r2, r1
dp3 r0.z, r2, r2
mul r1.xy, v0.zwzw, c13.x
texld r1.yw, r1, s6
mad_pp r3.xy, r1.wyzw, c23.y, c23.z
rsq r0.z, r0.z
mul r1.xyz, r0.z, r2
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
texld r2.yw, v0, s5
mad_pp r2.xy, r2.wyzw, c23.y, c23.z
mul_pp r3.zw, r2.xyxy, r2.xyxy
mul_pp r2.zw, r4.xyxy, r4.xyxy
add_pp_sat r1.w, r3.z, r3
add_pp_sat r2.z, r2, r2.w
add_pp r2.z, -r2, c22
rsq_pp r2.w, r2.z
add_pp r1.w, -r1, c22.z
rsq_pp r1.w, r1.w
add_pp r0.z, -r0, c22
rsq_pp r0.z, r0.z
rcp_pp r3.z, r0.z
rcp_pp r2.z, r1.w
rcp_pp r4.z, r2.w
add r4.xyz, r4, -r2
mad r2.xyz, v1.x, r4, r2
mov r4.xy, c8.x
mov r4.z, c22.w
mad r2.xyz, r2, r4, r1
dp3 r0.w, r2, r2
mul r4.xyz, r3, r5
rsq r0.z, r0.w
mad r4.xyz, r0.z, r2, r4
mad r5.xyz, r3, r5, r1
dp3 r1.w, r4, r4
dp3 r0.w, r5, r5
rsq r1.w, r1.w
mul r3.xyz, r1.w, r4
abs r1.w, c10.x
mul r2.xyz, r0.z, r2
rsq r0.w, r0.w
mul r4.xyz, r0.w, r5
cmp r0.w, -r4, c22, c22.z
cmp r3.w, -r1, c22, c22.z
mul_pp r2.w, r0, r3
cmp r0.z, -r1.w, c22, c22.w
cmp r4.w, -r4, c22.z, c22
abs_pp r2.w, r2
mul_pp r3.w, r3, r4
cmp_pp r2.w, -r2, c22.z, c22
mul_pp r4.w, r2, r3
cmp_pp r3.xyz, -r4.w, r3, r4
texld r4, v2, s8
abs_pp r3.w, r3
mul_pp r0.w, r0, r0.z
cmp_pp r1.w, -r3, c22.z, c22
mul_pp r0.z, r2.w, r1.w
mul_pp r1.w, r0.z, r0
abs_pp r0.w, r0
cmp_pp r0.w, -r0, c22.z, c22
mul_pp r0.z, r0, r0.w
cmp_pp r3.xyz, -r1.w, r3, r2
cmp_pp r1.xyz, -r0.z, r3, r1
mul_pp r4.xyz, r4.w, r4
mul_pp r2.xyz, r4, c23.w
mul r4.xyz, r2.y, c26
mad r4.xyz, r2.x, c27, r4
mad r4.xyz, r2.z, c25, r4
dp3 r0.z, r4, r4
rsq r0.z, r0.z
dp3_pp_sat r3.z, r1, c25
dp3_pp_sat r3.y, r1, c26
dp3_pp_sat r3.x, r1, c27
dp3_pp r0.w, v3, v3
mul r4.xyz, r0.z, r4
rsq_pp r0.z, r0.w
mad_pp r4.xyz, r0.z, v3, r4
dp3_pp r0.z, r3, r2
dp3_pp r0.w, r4, r4
rsq_pp r0.w, r0.w
mul_pp r3.xyz, r0.w, r4
texld r2, v2, s7
mul_pp r2.xyz, r2.w, r2
mul_pp r2.xyz, r2, r0.z
dp3_pp r0.z, r1, r3
mul_pp r1.xyz, r2, c23.w
mov_pp r0.w, c17.x
mov_pp r2.xyz, c3
add_pp r0.w, -c16.x, r0
add_pp r2.xyz, -c4, r2
mad_pp r0.w, v1.x, r0, c16.x
mad_pp r2.xyz, v1.x, r2, c4
mul_pp r2.xyz, r2, c0
mov_pp r3.xyz, c5
add_pp r3.xyz, c22.y, r3
max_pp r0.z, r0, c22.w
mul_pp r0.w, r0, c24.z
pow r4, r0.z, r0.w
texld r5.xyz, v0, s0
mul r4.yzw, r5.xxyz, c1.xxyz
mov r0.z, r4.x
texld r4.x, r0, s3
add r0.w, -r4.x, c22.z
texld r5.xyz, v0, s1
mad r5.xyz, r5, c2, -r4.yzww
mad r5.xyz, v1.x, r5, r4.yzww
mad_pp r3.xyz, v1.y, r3, c22.z
add r4.xy, v0.zwzw, c12.x
mul r3.xyz, r5, r3
mul_pp r2.xyz, r1, r2
mul_pp r2.xyz, r3.y, r2
mul r0.xyz, r2, r0.z
mov r2.xyz, c6
mul_sat r0.w, r0, c7.x
add r2.xyz, c22.y, r2
mad r2.xyz, r0.w, r2, c22.z
mov r0.w, c14.x
mul r2.xyz, r3, r2
mul r4.xy, r4, c13.x
texld r3.xy, r4, s6
add r1.w, r3.x, r3.y
mov r3.xyz, c15
max r0.w, c22, r0
add r1.w, r1, c22.x
mad_sat r0.w, r1, r0, c23.x
add r0.w, -r0, c22.z
mul r0.w, r0, c14.x
add r3.xyz, c22.y, r3
mad r3.xyz, r0.w, r3, c22.z
mov r0.w, c11.x
mul r3.xyz, r2, r3
add_pp r0.w, c22.x, r0
cmp_pp r2.xyz, -r0.w, r2, r3
mad_pp oC0.xyz, r2, r1, r0
mov_pp oC0.w, c22
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
ConstBuffer "$Globals" 272 // 212 used size, 27 vars
Vector 32 [_SpecColor] 4
Vector 48 [_Color] 3
Vector 64 [_TrimColor] 3
Vector 80 [_TrimSpecColor] 3
Vector 96 [_MainSpecColor] 3
Vector 112 [_VertexMaskColor] 3
Vector 128 [_BodyOcclusionColor] 3
Float 140 [_BodyOcclusionPower]
Float 144 [_BumpPower]
Float 148 [_BodyBumpPower]
Float 152 [_BumpDetailPower]
Float 156 [_DetailTexEnable]
Float 160 [_DetailTexOffset]
Float 164 [_DetailTexScale]
Float 168 [_DetailTexPower]
Vector 176 [_DetailTexColor] 3
Float 188 [_Shininess]
Float 192 [_TrimShininess]
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [_BumpDetailTex] 2D 2
SetTexture 7 [unity_Lightmap] 2D 7
SetTexture 8 [unity_LightmapInd] 2D 8
// 129 instructions, 6 temp regs, 0 temp arrays:
// ALU 83 float, 0 int, 2 uint
// TEX 10 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcdabelddbnijkiehickfdcinnejjoppbabaaaaaamabcaaaaadaaaaaa
cmaaaaaanaaaaaaaaeabaaaaejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefclebbaaaaeaaaaaaagnaeaaaafjaaaaaeegiocaaaaaaaaaaa
aoaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaa
ahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fibiaaaeaahabaaaahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaa
gcbaaaadpcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaagcbaaaaddcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaaaaaaaaaidcaabaaaaaaaaaaaogbkbaaaabaaaaaaagiacaaaaaaaaaaa
akaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaafgifcaaaaaaaaaaa
akaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaagaaaaaa
aagabaaaacaaaaaaaaaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaalp
deaaaaaiccaabaaaaaaaaaaackiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaaa
dccaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
mnmmmmdmaaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpdiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaaaaaaaaa
akaaaaaaaaaaaaalocaabaaaaaaaaaaaagijcaaaaaaaaaaaalaaaaaaaceaaaaa
aaaaaaaaaaaaialpaaaaialpaaaaialpdcaaaaamhcaabaaaaaaaaaaaagaabaaa
aaaaaaaajgahbaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
agaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaaadaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
aaaaaaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agbabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegiccaaaaaaaaaaaahaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadcaaaaamhcaabaaaacaaaaaafgbfbaaaacaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaibcaabaaaacaaaaaackbabaaa
abaaaaaadkiacaaaaaaaaaaaamaaaaaadiaaaaaiccaabaaaacaaaaaadkbabaaa
abaaaaaaakiacaaaaaaaaaaaanaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaaa
acaaaaaajgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
acaaaaaaeghobaaaadaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaacaaaaaaeghobaaaaeaaaaaaaagabaaaadaaaaaaaaaaaaaiicaabaaa
aaaaaaaaakaabaiaebaaaaaaadaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaaiaaaaaaaaaaaaalhcaabaaa
adaaaaaaegiccaaaaaaaaaaaaiaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadcaaaaamhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahncaabaaaabaaaaaa
agajbaaaabaaaaaaagajbaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaigadbaaaabaaaaaadbaaaaaiicaabaaaaaaaaaaaabeaaaaaaaaaaadp
dkiacaaaaaaaaaaaajaaaaaadhaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaigadbaaaabaaaaaadcaaaaapfcaabaaaabaaaaaapganbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaaaaaaaaaeaaaaaaaaaaceaaaaaaaaaialp
aaaaaaaaaaaaialpaaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaaacaaaaaa
hgapbaaaacaaaaaaapaaaaahicaabaaaaaaaaaaaigaabaaaabaaaaaaigaabaaa
abaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaaaaaaaaakncaabaaaabaaaaaa
agajbaaaacaaaaaaaceaaaaaaaaamalpaaaaaaaaaaaamalpaaaaialpaaaaaaak
hcaabaaaacaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaadcaaaaanncaabaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaaagaobaaa
abaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaiadpbnaaaaaiicaabaaa
aaaaaaaaabeaaaaaaaaaiadpbkiacaaaaaaaaaaaajaaaaaadhaaaaajncaabaaa
abaaaaaapgapbaaaaaaaaaaaagaobaaaabaaaaaaagajbaaaacaaaaaadgaaaaaf
ecaabaaaacaaaaaaabeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaafgijcaaa
aaaaaaaaajaaaaaadcaaaaajncaabaaaabaaaaaaagaobaaaabaaaaaaagaibaaa
acaaaaaaagaobaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaigadbaaaabaaaaaa
igadbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
dcaabaaaacaaaaaaogbkbaaaabaaaaaafgifcaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaacaaaaaaeghobaaaagaaaaaaaagabaaaacaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaadaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaadiaaaaah
dcaabaaaacaaaaaapgapbaaaacaaaaaaegaabaaaacaaaaaadgaaaaafecaabaaa
acaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaadaaaaaaigadbaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahncaabaaaabaaaaaapgapbaaa
aaaaaaaaagaobaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaadaaaaaa
egacbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaa
aeaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaafaaaaaadcaaaaap
dcaabaaaaeaaaaaahgapbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaeaaaaaadkaabaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaabaaaaaadcaaaaapdcaabaaaafaaaaaahgapbaaaafaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaafaaaaaaegaabaaaafaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaafaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaa
aeaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaaeaaaaaaagbabaaa
acaaaaaaegacbaaaaeaaaaaaegacbaaaafaaaaaadgaaaaagbcaabaaaafaaaaaa
akiacaaaaaaaaaaaajaaaaaadgaaaaafecaabaaaafaaaaaaabeaaaaaaaaaaaaa
dcaaaaajhcaabaaaaeaaaaaaegacbaaaaeaaaaaaagacbaaaafaaaaaaigadbaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaaegacbaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaabiaaaaaldcaabaaaaeaaaaaa
igiacaaaaaaaaaaaajaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
djaaaaalmcaabaaaaeaaaaaakgiccaaaaaaaaaaaajaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaaaeaaaaaa
egaabaaaaeaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaeaaaaaadkaabaaa
aeaaaaaadhaaaaajncaabaaaabaaaaaafgafbaaaaeaaaaaaagajbaaaafaaaaaa
agaobaaaabaaaaaadhaaaaajncaabaaaabaaaaaaagaabaaaaeaaaaaaagajbaaa
adaaaaaaagaobaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaadhaaaaajncaabaaa
abaaaaaapgapbaaaaaaaaaaaagajbaaaacaaaaaaagaobaaaabaaaaaaapcaaaak
bcaabaaaacaaaaaaaceaaaaaolaffbdpdkmnbddpaaaaaaaaaaaaaaaamgaabaaa
abaaaaaabacaaaakccaabaaaacaaaaaaaceaaaaaomafnblopdaedfdpdkmnbddp
aaaaaaaaigadbaaaabaaaaaabacaaaakecaabaaaacaaaaaaaceaaaaaolafnblo
pdaedflpdkmnbddpaaaaaaaaigadbaaaabaaaaaaefaaaaajpcaabaaaadaaaaaa
egbabaaaadaaaaaaeghobaaaaiaaaaaaaagabaaaaiaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaaebdiaaaaahhcaabaaaadaaaaaa
egacbaaaadaaaaaapgapbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaadaaaaaa
eghobaaaahaaaaaaaagabaaaahaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaabeaaaaaaaaaaaebdiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaa
pgapbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaa
diaaaaakhcaabaaaaeaaaaaafgafbaaaadaaaaaaaceaaaaaomafnblopdaedfdp
dkmnbddpaaaaaaaadcaaaaamlcaabaaaadaaaaaaagaabaaaadaaaaaaaceaaaaa
olaffbdpaaaaaaaaaaaaaaaadkmnbddpegaibaaaaeaaaaaadcaaaaamhcaabaaa
adaaaaaakgakbaaaadaaaaaaaceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaa
egadbaaaadaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaabaaaaaahicaabaaa
acaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaadiaaaaahhcaabaaaaeaaaaaapgapbaaaacaaaaaaegbcbaaa
aeaaaaaadcaaaaajhcaabaaaadaaaaaaegacbaaaadaaaaaapgapbaaaaaaaaaaa
egacbaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
adaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaabaaaaaahicaabaaaaaaaaaaa
igadbaaaabaaaaaaegacbaaaadaaaaaadeaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaaacpaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
aaaaaaakbcaabaaaabaaaaaadkiacaiaebaaaaaaaaaaaaaaalaaaaaaakiacaaa
aaaaaaaaamaaaaaadcaaaaakbcaabaaaabaaaaaaakbabaaaacaaaaaaakaabaaa
abaaaaaadkiacaaaaaaaaaaaalaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaaeddiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabjaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaak
ncaabaaaabaaaaaaagijcaaaaaaaaaaaafaaaaaaagijcaiaebaaaaaaaaaaaaaa
agaaaaaadcaaaaakncaabaaaabaaaaaaagbabaaaacaaaaaaagaobaaaabaaaaaa
agijcaaaaaaaaaaaagaaaaaadiaaaaaincaabaaaabaaaaaaagaobaaaabaaaaaa
agijcaaaaaaaaaaaacaaaaaadiaaaaahncaabaaaabaaaaaaagaobaaaabaaaaaa
agajbaaaacaaaaaadiaaaaahhcaabaaaabaaaaaafgafbaaaabaaaaaaigadbaaa
abaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 152 ALU, 9 TEX
PARAM c[25] = { program.local[0..22],
		{ 0.5, 0, 1, 0.025 },
		{ 2, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MOV R5.xy, c[23].yzzw;
MOV R0.z, c[21].x;
MOV R0.w, c[22].x;
MOV R0.y, c[20].x;
MOV R0.x, c[19];
MAD R5.zw, fragment.texcoord[0], R0, R0.xyxy;
MOV R0.w, c[23].z;
TEX R1.yw, R5.zwzw, texture[4], 2D;
MAD R0.xy, R1.wyzw, c[24].x, -R0.w;
MUL R1.xy, R0, R0;
ADD_SAT R0.z, R1.x, R1.y;
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MAD R3.xy, R3.wyzw, c[24].x, -R0.w;
ADD R0.z, -R0, c[23];
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[23].xxzw;
MUL R1.xyz, R1, c[10].x;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD R1.w, -R5.y, c[10].x;
ADD R1.xyz, R1, c[23].xxzw;
CMP R1.xyz, -R1.w, R0, R1;
TEX R4.yw, fragment.texcoord[0], texture[5], 2D;
MOV R0.xy, c[10].x;
MOV R0.z, c[23].y;
MAD R0.xyz, R1, R0, R1;
MUL R1.zw, fragment.texcoord[0], c[14].x;
DP3 R1.x, R0, R0;
TEX R1.yw, R1.zwzw, texture[6], 2D;
RSQ R1.z, R1.x;
MUL R2.xyz, R1.z, R0;
ADD_SAT R0.z, R3, R3.w;
MAD R1.xy, R1.wyzw, c[24].x, -R0.w;
MUL R1.zw, R1.xyxy, R1.xyxy;
MAD R0.xy, R4.wyzw, c[24].x, -R0.w;
MUL R4.xy, R0, R0;
ADD_SAT R1.z, R1, R1.w;
ADD_SAT R2.w, R4.x, R4.y;
ADD R2.w, -R2, c[23].z;
RSQ R3.z, R2.w;
ADD R0.z, -R0, c[23];
RSQ R2.w, R0.z;
RCP R0.z, R3.z;
RCP R3.z, R2.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
MOV R0.xy, c[9].x;
MOV R0.z, c[23].y;
MAD R3.xyz, R3, R0, R2;
DP3 R1.w, R3, R3;
ADD R1.z, -R1, c[23];
RSQ R0.x, R1.z;
RCP R1.z, R0.x;
RSQ R1.w, R1.w;
MOV R0.z, c[23].y;
MOV R0.xy, c[11].x;
MUL R4.xyz, R1, R0;
MAD R0.xyz, R1, R0, R2;
MAD R4.xyz, R1.w, R3, R4;
DP3 R1.y, R4, R4;
DP3 R1.x, R0, R0;
RSQ R2.w, R1.x;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R4;
ABS R3.w, c[11].x;
CMP R4.x, -R3.w, c[23].z, c[23].y;
MUL R0.xyz, R2.w, R0;
ABS R4.y, c[9].x;
CMP R2.w, -R4.y, c[23].z, c[23].y;
MUL R4.z, R2.w, R4.x;
CMP R4.y, -R4, c[23], c[23].z;
MUL R4.y, R4.x, R4;
ABS R4.z, R4;
CMP R4.x, -R4.z, c[23].y, c[23].z;
MUL R4.z, R4.x, R4.y;
CMP R0.xyz, -R4.z, R0, R1;
MUL R1.xyz, R1.w, R3;
CMP R3.x, -R3.w, c[23].y, c[23].z;
MUL R2.w, R2, R3.x;
ABS R1.w, R4.y;
CMP R1.w, -R1, c[23].y, c[23].z;
MUL R1.w, R4.x, R1;
MUL R3.y, R1.w, R2.w;
ABS R3.x, R2.w;
CMP R0.xyz, -R3.y, R1, R0;
CMP R2.w, -R3.x, c[23].y, c[23].z;
MUL R1.x, R1.w, R2.w;
CMP R0.xyz, -R1.x, R2, R0;
DP3 R1.w, fragment.texcoord[3], fragment.texcoord[3];
MOV R2.y, c[17].x;
RSQ R1.w, R1.w;
MOV R1.xyz, fragment.texcoord[1];
MAD R1.xyz, R1.w, fragment.texcoord[3], R1;
DP3 R1.w, R0, fragment.texcoord[1];
DP3 R2.x, R1, R1;
RSQ R2.x, R2.x;
MUL R1.xyz, R2.x, R1;
DP3 R0.x, R0, R1;
ADD R2.y, -R2, c[18].x;
MAD R2.x, fragment.color.primary, R2.y, c[17];
MUL R0.y, R2.x, c[24];
MAX R0.x, R0, c[23].y;
POW R2.w, R0.x, R0.y;
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R1.xyz, R0, c[2];
ADD R2.xyz, -R0.w, c[6];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[3], -R1;
MAD R0.xyz, fragment.color.primary.x, R0, R1;
MAD R2.xyz, fragment.color.primary.y, R2, c[23].z;
MUL R1.xyz, R0, R2;
ADD R0.zw, fragment.texcoord[0], c[13].x;
MUL R2.xy, R0.zwzw, c[14].x;
TEX R2.xy, R2, texture[6], 2D;
ADD R2.x, R2, R2.y;
TEX R0.x, R5.zwzw, texture[3], 2D;
ADD R0.x, -R0, c[23].z;
MUL_SAT R0.w, R0.x, c[8].x;
ADD R0.xyz, -R5.y, c[7];
MAD R0.xyz, R0.w, R0, c[23].z;
MUL R0.xyz, R1, R0;
MUL R2.w, R1.y, R2;
MAX R2.y, R5.x, c[15].x;
ADD R2.x, R2, -c[23];
MAD_SAT R2.x, R2, R2.y, c[23].w;
ADD R0.w, -R2.x, c[23].z;
MUL R2.x, R0.w, c[15];
MOV R0.w, c[12].x;
ADD R1.xyz, -R5.y, c[16];
MAD R1.xyz, R2.x, R1, c[23].z;
SLT R0.w, c[23].x, R0;
ABS R0.w, R0;
MUL R1.xyz, R0, R1;
CMP R0.w, -R0, c[23].y, c[23].z;
CMP R1.xyz, -R0.w, R0, R1;
MOV R0.xyz, c[5];
ADD R0.xyz, -R0, c[4];
MAX R1.w, R1, c[23].y;
MUL R2.xyz, R1, c[0];
MOV R0.w, c[23].z;
MAD R0.xyz, fragment.color.primary.x, R0, c[5];
MUL R0, R0, c[1];
MUL R3.xyz, R0, c[0];
TXP R0.x, fragment.texcoord[4], texture[7], 2D;
MUL R2.xyz, R2, R1.w;
MUL R0.y, R0.x, c[24].x;
MAD R2.xyz, R3, R2.w, R2;
MUL R2.xyz, R2, R0.y;
MUL R0.z, R0.w, c[0].w;
MUL R0.y, R2.w, R0.z;
MAD result.color.xyz, R1, fragment.texcoord[2], R2;
MUL result.color.w, R0.x, R0.y;
END
# 152 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_ShadowMapTexture] 2D
"ps_3_0
; 147 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c23, -0.50000000, -1.00000000, 1.00000000, 0.00000000
def c24, 0.02500000, 2.00000000, -1.00000000, 128.00000000
def c25, 0.50000000, 1.00000000, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4.xyz
dcl_texcoord4 v5
texld r3.yw, v0, s2
mad_pp r3.xy, r3.wyzw, c24.y, c24.z
mov r0.z, c21.x
mov r0.w, c22.x
mov r0.y, c20.x
mov r0.x, c19
mad r5.xy, v0.zwzw, r0.zwzw, r0
texld r0.yw, r5, s4
mad_pp r0.xy, r0.wyzw, c24.y, c24.z
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c23
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
add r1.xyz, r0, c23.xxyw
mul r1.xyz, r1, c10.x
mov r0.w, c10.x
add r0.w, c23.y, r0
add r1.xyz, r1, c25.xxyw
cmp r1.xyz, -r0.w, r1, r0
mov r0.xy, c10.x
mov r0.z, c23.w
mad r2.xyz, r1, r0, r1
mul r0.xy, v0.zwzw, c14.x
texld r0.yw, r0, s6
mad_pp r1.xy, r0.wyzw, c24.y, c24.z
dp3 r0.z, r2, r2
rsq r0.x, r0.z
mul_pp r1.zw, r1.xyxy, r1.xyxy
mul r2.xyz, r0.x, r2
texld r0.yw, v0, s5
mad_pp r0.xy, r0.wyzw, c24.y, c24.z
mul_pp r3.zw, r0.xyxy, r0.xyxy
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp_sat r2.w, r3.z, r3
add_pp r0.w, -r2, c23.z
rsq_pp r2.w, r0.w
add_pp r0.z, -r0, c23
rsq_pp r0.w, r0.z
rcp_pp r0.z, r2.w
rcp_pp r3.z, r0.w
add r3.xyz, r3, -r0
mad r3.xyz, v1.x, r3, r0
add_pp_sat r0.w, r1.z, r1
mov r0.xy, c9.x
mov r0.z, c23.w
mad r3.xyz, r3, r0, r2
add_pp r0.w, -r0, c23.z
rsq_pp r0.x, r0.w
rcp_pp r1.z, r0.x
dp3 r0.w, r3, r3
rsq r0.w, r0.w
mov r0.z, c23.w
mov r0.xy, c11.x
mul r4.xyz, r1, r0
mad r0.xyz, r1, r0, r2
mad r4.xyz, r0.w, r3, r4
dp3 r1.x, r4, r4
dp3 r1.y, r0, r0
rsq r1.w, r1.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, r4
abs r2.w, c11.x
cmp r4.x, -r2.w, c23.w, c23.z
mul r0.xyz, r1.w, r0
abs r4.y, c9.x
cmp r1.w, -r4.y, c23, c23.z
mul_pp r3.w, r1, r4.x
cmp r4.y, -r4, c23.z, c23.w
cmp r2.w, -r2, c23.z, c23
abs_pp r3.w, r3
mul_pp r1.w, r1, r2
mul_pp r4.x, r4, r4.y
cmp_pp r3.w, -r3, c23.z, c23
mul_pp r4.y, r3.w, r4.x
cmp_pp r0.xyz, -r4.y, r1, r0
mul r1.xyz, r0.w, r3
abs_pp r0.w, r4.x
cmp_pp r0.w, -r0, c23.z, c23
mul_pp r0.w, r3, r0
mul_pp r2.w, r0, r1
cmp_pp r1.xyz, -r2.w, r0, r1
abs_pp r1.w, r1
cmp_pp r1.w, -r1, c23.z, c23
mul_pp r0.w, r0, r1
cmp_pp r3.xyz, -r0.w, r1, r2
dp3_pp r2.w, v4, v4
mov_pp r1.x, c18
rsq_pp r2.w, r2.w
mov_pp r0.xyz, v2
mad_pp r0.xyz, r2.w, v4, r0
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
add_pp r1.x, -c17, r1
mad_pp r0.w, v1.x, r1.x, c17.x
dp3_pp r0.x, r3, r0
mul_pp r1.y, r0.w, c24.w
max_pp r1.x, r0, c23.w
pow r0, r1.x, r1.y
mov r0.w, r0.x
mov_pp r1.xyz, c6
add_pp r2.xyz, c23.y, r1
texld r0.xyz, v0, s0
mul r1.xyz, r0, c2
texld r0.xyz, v0, s1
mad r0.xyz, r0, c3, -r1
mad r0.xyz, v1.x, r0, r1
mad_pp r2.xyz, v1.y, r2, c23.z
mul r0.xyz, r0, r2
mul r1.w, r0.y, r0
dp3_pp r0.w, r3, v2
add r2.xy, v0.zwzw, c13.x
texld r1.x, r5, s3
max_pp r2.w, r0, c23
add r0.w, -r1.x, c23.z
mov r1.xyz, c7
mul_sat r0.w, r0, c8.x
add r1.xyz, c23.y, r1
mad r1.xyz, r0.w, r1, c23.z
mul r1.xyz, r0, r1
mul r2.xy, r2, c14.x
texld r0.xy, r2, s6
add r0.x, r0, r0.y
mov r0.z, c15.x
max r0.y, c23.w, r0.z
add r0.x, r0, c23
mad_sat r0.w, r0.x, r0.y, c24.x
mov r0.xyz, c16
add r0.w, -r0, c23.z
mul r0.w, r0, c15.x
add r0.xyz, c23.y, r0
mad r0.xyz, r0.w, r0, c23.z
mov r0.w, c12.x
mul r0.xyz, r1, r0
add_pp r0.w, c23.x, r0
cmp_pp r1.xyz, -r0.w, r1, r0
mov_pp r0.xyz, c4
mul_pp r2.xyz, r1, c0
add_pp r0.xyz, -c5, r0
mov_pp r0.w, c23.z
mad_pp r0.xyz, v1.x, r0, c5
mul_pp r0, r0, c1
mul_pp r3.xyz, r0, c0
texldp r0.x, v5, s7
mul_pp r2.xyz, r2, r2.w
mul_pp r0.y, r0.x, c24
mad r2.xyz, r3, r1.w, r2
mul r2.xyz, r2, r0.y
mul_pp r0.z, r0.w, c0.w
mul r0.y, r1.w, r0.z
mad_pp oC0.xyz, r1, v3, r2
mul oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 320 // 276 used size, 27 vars
Vector 16 [_LightColor0] 4
Vector 32 [_SpecColor] 4
Vector 112 [_Color] 3
Vector 128 [_TrimColor] 3
Vector 144 [_TrimSpecColor] 3
Vector 160 [_MainSpecColor] 3
Vector 176 [_VertexMaskColor] 3
Vector 192 [_BodyOcclusionColor] 3
Float 204 [_BodyOcclusionPower]
Float 208 [_BumpPower]
Float 212 [_BodyBumpPower]
Float 216 [_BumpDetailPower]
Float 220 [_DetailTexEnable]
Float 224 [_DetailTexOffset]
Float 228 [_DetailTexScale]
Float 232 [_DetailTexPower]
Vector 240 [_DetailTexColor] 3
Float 252 [_Shininess]
Float 256 [_TrimShininess]
Float 260 [_AtlasOffsetX]
Float 264 [_AtlasOffsetY]
Float 268 [_AtlasScaleX]
Float 272 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 7
SetTexture 2 [_BumpTrimTex] 2D 6
SetTexture 3 [_BodyOcclusionTex] 2D 5
SetTexture 4 [_BodyBumpTex] 2D 4
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_BumpDetailTex] 2D 3
SetTexture 7 [_ShadowMapTexture] 2D 0
// 121 instructions, 6 temp regs, 0 temp arrays:
// ALU 77 float, 0 int, 2 uint
// TEX 9 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedahodpgkogdcbffoobeegfhinliaaaobgabaaaaaamebbaaaaadaaaaaa
cmaaaaaaaaabaaaadeabaaaaejfdeheommaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaamfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaagaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciibaaaaaeaaaaaaa
ccaeaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafkaaaaadaagabaaaaaaaaaaa
fkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaa
adaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaad
aagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaaddcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadlcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaagaaaaaadcaaaaapdcaabaaaaaaaaaaa
hgapbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaa
dcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaa
dkaabaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaa
dkiacaaaaaaaaaaabaaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaa
akiacaaaaaaaaaaabbaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
jgifcaaaaaaaaaaabaaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaaaaaaaaaiicaabaaaaaaaaaaa
akaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaamaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaa
acaaaaaahgapbaaaacaaaaaaapaaaaahbcaabaaaabaaaaaaegaabaaaabaaaaaa
egaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaacaaaaaaakaabaaaabaaaaaaaaaaaaakhcaabaaa
abaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamalpaaaamalpaaaaialpaaaaaaaa
aaaaaaakhcaabaaaacaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaadcaaaaanhcaabaaaabaaaaaafgifcaaaaaaaaaaaanaaaaaa
egacbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaiadpaaaaaaaabnaaaaai
icaabaaaabaaaaaaabeaaaaaaaaaiadpbkiacaaaaaaaaaaaanaaaaaadhaaaaaj
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
dgaaaaafecaabaaaacaaaaaaabeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaa
fgijcaaaaaaaaaaaanaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
agacbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaag
bcaabaaaadaaaaaaakiacaaaaaaaaaaaanaaaaaadgaaaaafecaabaaaadaaaaaa
abeaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaa
adaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaah
ocaabaaaadaaaaaaagajbaaaaaaaaaaaagaabaaaadaaaaaabiaaaaaldcaabaaa
aeaaaaaaigiacaaaaaaaaaaaanaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaadjaaaaalmcaabaaaaeaaaaaakgiccaaaaaaaaaaaanaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaa
aeaaaaaaegaabaaaaeaaaaaaabaaaaahecaabaaaaeaaaaaackaabaaaaeaaaaaa
dkaabaaaaeaaaaaadhaaaaajhcaabaaaacaaaaaafgafbaaaaeaaaaaajgahbaaa
adaaaaaaegacbaaaacaaaaaadiaaaaaigcaabaaaadaaaaaakgblbaaaabaaaaaa
fgifcaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaadaaaaaa
eghobaaaagaaaaaaaagabaaaadaaaaaadcaaaaapgcaabaaaadaaaaaapganbaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaaaaa
aaaaialpaaaaialpaaaaaaaadiaaaaahdcaabaaaafaaaaaapgapbaaaacaaaaaa
jgafbaaaadaaaaaadgaaaaafecaabaaaafaaaaaaabeaaaaaaaaaaaaadcaaaaaj
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaegacbaaaafaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagaabaaaadaaaaaaegacbaaa
afaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadhaaaaajhcaabaaaabaaaaaaagaabaaa
aeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaa
dhaaaaajhcaabaaaaaaaaaaakgakbaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaadaaaaaa
deaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
ccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbjbaaaafaaaaaa
fgafbaaaabaaaaaaagbjbaaaadaaaaaabaaaaaahbcaabaaaacaaaaaajgahbaaa
abaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaacpaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaakccaabaaaaaaaaaaadkiacaiaebaaaaaaaaaaaaaa
apaaaaaaakiacaaaaaaaaaaabaaaaaaadcaaaaakccaabaaaaaaaaaaaakbabaaa
acaaaaaabkaabaaaaaaaaaaadkiacaaaaaaaaaaaapaaaaaadiaaaaahccaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaaaeddiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaabjaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaahaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaadiaaaaaiocaabaaaabaaaaaaagajbaaaadaaaaaa
agijcaaaaaaaaaaaahaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaaaaaaaaaaiaaaaaajgahbaiaebaaaaaaabaaaaaadcaaaaajocaabaaa
abaaaaaaagbabaaaacaaaaaaagajbaaaacaaaaaafgaobaaaabaaaaaaaaaaaaal
hcaabaaaacaaaaaaegiccaaaaaaaaaaaalaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaafgbfbaaaacaaaaaaegacbaaa
acaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahocaabaaa
abaaaaaafgaobaaaabaaaaaaagajbaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaackaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaajaaaaaaegiccaiaebaaaaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaakaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegiocaaaaaaaaaaaacaaaaaadiaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
agaabaaaaaaaaaaaegaobaaaacaaaaaaaaaaaaalhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaamaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaam
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
jgahbaaaabaaaaaaaaaaaaaigcaabaaaabaaaaaakgblbaaaabaaaaaaagiacaaa
aaaaaaaaaoaaaaaadiaaaaaigcaabaaaabaaaaaafgagbaaaabaaaaaafgifcaaa
aaaaaaaaaoaaaaaaefaaaaajpcaabaaaadaaaaaajgafbaaaabaaaaaaeghobaaa
agaaaaaaaagabaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaa
akaabaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaalpdeaaaaaiccaabaaaabaaaaaackiacaaaaaaaaaaaaoaaaaaaabeaaaaa
aaaaaaaadccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaa
abeaaaaamnmmmmdmaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaackiacaaa
aaaaaaaaaoaaaaaaaaaaaaalocaabaaaabaaaaaaagijcaaaaaaaaaaaapaaaaaa
aceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaialpdcaaaaamocaabaaaabaaaaaa
pgapbaaaaaaaaaaafgaobaaaabaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaiadp
aaaaiadpdiaaaaahocaabaaaabaaaaaaagajbaaaaaaaaaaafgaobaaaabaaaaaa
dbaaaaaiicaabaaaaaaaaaaaabeaaaaaaaaaaadpdkiacaaaaaaaaaaaanaaaaaa
dhaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaajgahbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaaiocaabaaaabaaaaaaagajbaaaaaaaaaaaagijcaaaaaaaaaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaajgahbaaaabaaaaaaagaabaaaabaaaaaaegacbaaa
acaaaaaaaoaaaaahdcaabaaaacaaaaaaegbabaaaagaaaaaapgbpbaaaagaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaacaaaaaaeghobaaaahaaaaaaaagabaaa
aaaaaaaaaaaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaaakaabaaaadaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadcaaaaaj
hccabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_Color]
Vector 1 [_TrimColor]
Vector 2 [_VertexMaskColor]
Vector 3 [_BodyOcclusionColor]
Float 4 [_BodyOcclusionPower]
Float 8 [_DetailTexEnable]
Float 9 [_DetailTexOffset]
Float 10 [_DetailTexScale]
Float 11 [_DetailTexPower]
Vector 12 [_DetailTexColor]
Float 13 [_AtlasOffsetX]
Float 14 [_AtlasOffsetY]
Float 15 [_AtlasScaleX]
Float 16 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_ShadowMapTexture] 2D
SetTexture 8 [unity_Lightmap] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 49 ALU, 6 TEX
PARAM c[19] = { program.local[0..16],
		{ 1, 0, 0.5, 0.025 },
		{ 8, 2 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R1, fragment.texcoord[1], texture[8], 2D;
TXP R0.x, fragment.texcoord[2], texture[7], 2D;
MUL R2.xyz, R1, R0.x;
MUL R1.xyz, R1.w, R1;
MUL R1.xyz, R1, c[18].x;
MUL R2.xyz, R2, c[18].y;
MIN R2.xyz, R1, R2;
MUL R0.xyz, R1, R0.x;
MAX R0.xyz, R2, R0;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R1.xyz, R1, c[0];
TEX R2.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R2.xyz, R2, c[1], -R1;
MOV R0.w, c[17].x;
MAD R1.xyz, fragment.color.primary.x, R2, R1;
ADD R2.xyz, -R0.w, c[2];
MAD R2.xyz, fragment.color.primary.y, R2, c[17].x;
MUL R1.xyz, R1, R2;
ADD R2.xy, fragment.texcoord[0].zwzw, c[9].x;
MUL R2.xy, R2, c[10].x;
TEX R2.xy, R2, texture[6], 2D;
ADD R1.w, R2.x, R2.y;
MOV R2.zw, c[17].xyxy;
MOV R3.z, c[13].x;
MAX R2.x, R2.w, c[11];
ADD R1.w, R1, -c[17].z;
MAD_SAT R1.w, R1, R2.x, c[17];
MOV R3.x, c[15];
MOV R3.y, c[16].x;
MOV R3.w, c[14].x;
MAD R3.xy, fragment.texcoord[0].zwzw, R3, R3.zwzw;
TEX R3.x, R3, texture[3], 2D;
ADD R0.w, -R3.x, c[17].x;
ADD R3.xyz, -R2.z, c[3];
MUL_SAT R0.w, R0, c[4].x;
MAD R3.xyz, R0.w, R3, c[17].x;
ADD R0.w, -R1, c[17].x;
MOV R1.w, c[8].x;
MUL R1.xyz, R1, R3;
MUL R0.w, R0, c[11].x;
ADD R2.xyz, -R2.z, c[12];
MAD R2.xyz, R0.w, R2, c[17].x;
SLT R1.w, c[17].z, R1;
ABS R0.w, R1;
MUL R2.xyz, R1, R2;
CMP R0.w, -R0, c[17].y, c[17].x;
CMP R1.xyz, -R0.w, R1, R2;
MUL result.color.xyz, R1, R0;
MOV result.color.w, c[17].y;
END
# 49 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_Color]
Vector 1 [_TrimColor]
Vector 2 [_VertexMaskColor]
Vector 3 [_BodyOcclusionColor]
Float 4 [_BodyOcclusionPower]
Float 5 [_DetailTexEnable]
Float 6 [_DetailTexOffset]
Float 7 [_DetailTexScale]
Float 8 [_DetailTexPower]
Vector 9 [_DetailTexColor]
Float 10 [_AtlasOffsetX]
Float 11 [_AtlasOffsetY]
Float 12 [_AtlasScaleX]
Float 13 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_ShadowMapTexture] 2D
SetTexture 8 [unity_Lightmap] 2D
"ps_3_0
; 43 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c14, -1.00000000, 1.00000000, 0.00000000, 0.02500000
def c15, -0.50000000, 8.00000000, 2.00000000, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xy
dcl_texcoord2 v3
mov_pp r3.xyz, c2
add_pp r3.xyz, c14.x, r3
mov r1.w, c8.x
texldp r0.x, v3, s7
texld r2, v2, s8
mul_pp r1.xyz, r2, r0.x
mul_pp r2.xyz, r2.w, r2
mul_pp r2.xyz, r2, c15.y
mul_pp r1.xyz, r1, c15.z
min_pp r1.xyz, r2, r1
mul_pp r2.xyz, r2, r0.x
max_pp r1.xyz, r1, r2
texld r0.xyz, v0, s0
mul r0.xyz, r0, c0
texld r2.xyz, v0, s1
mad r2.xyz, r2, c1, -r0
mad r2.xyz, v1.x, r2, r0
mad_pp r3.xyz, v1.y, r3, c14.y
mul r2.xyz, r2, r3
add r3.xy, v0.zwzw, c6.x
mov r0.z, c12.x
mov r0.w, c13.x
mov r0.y, c11.x
mov r0.x, c10
mad r0.xy, v0.zwzw, r0.zwzw, r0
texld r0.x, r0, s3
add r0.w, -r0.x, c14.y
mov r0.xyz, c3
mul_sat r0.w, r0, c4.x
add r0.xyz, c14.x, r0
mad r0.xyz, r0.w, r0, c14.y
mul r0.xyz, r2, r0
mul r3.xy, r3, c7.x
texld r2.xy, r3, s6
add r0.w, r2.x, r2.y
mov r2.xyz, c9
max r1.w, c14.z, r1
add r0.w, r0, c15.x
mad_sat r0.w, r0, r1, c14
add r0.w, -r0, c14.y
mul r0.w, r0, c8.x
add r2.xyz, c14.x, r2
mad r2.xyz, r0.w, r2, c14.y
mov r0.w, c5.x
mul r2.xyz, r0, r2
add_pp r0.w, c15.x, r0
cmp_pp r0.xyz, -r0.w, r0, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c14.z
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 336 // 276 used size, 28 vars
Vector 112 [_Color] 3
Vector 128 [_TrimColor] 3
Vector 176 [_VertexMaskColor] 3
Vector 192 [_BodyOcclusionColor] 3
Float 204 [_BodyOcclusionPower]
Float 220 [_DetailTexEnable]
Float 224 [_DetailTexOffset]
Float 228 [_DetailTexScale]
Float 232 [_DetailTexPower]
Vector 240 [_DetailTexColor] 3
Float 260 [_AtlasOffsetX]
Float 264 [_AtlasOffsetY]
Float 268 [_AtlasScaleX]
Float 272 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 4
SetTexture 2 [_BodyOcclusionTex] 2D 3
SetTexture 3 [_BumpDetailTex] 2D 2
SetTexture 4 [_ShadowMapTexture] 2D 0
SetTexture 5 [unity_Lightmap] 2D 5
// 44 instructions, 3 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednkgpilammloceboilefkefejleihemfnabaaaaaaleahaaaaadaaaaaa
cmaaaaaanaaaaaaaaeabaaaaejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapalaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefckiagaaaaeaaaaaaakkabaaaafjaaaaaeegiocaaaaaaaaaaa
bcaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaae
aahabaaaafaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaaddcbabaaa
acaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadlcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacadaaaaaaaaaaaaaidcaabaaaaaaaaaaaogbkbaaa
abaaaaaaagiacaaaaaaaaaaaaoaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaa
aaaaaaaafgifcaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaadaaaaaaaagabaaaacaaaaaaaaaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaalpdeaaaaaiccaabaaaaaaaaaaackiacaaaaaaaaaaa
aoaaaaaaabeaaaaaaaaaaaaadccaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaamnmmmmdmaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackiacaaaaaaaaaaaaoaaaaaaaaaaaaalocaabaaaaaaaaaaaagijcaaa
aaaaaaaaapaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaialpdcaaaaam
hcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegiccaaaaaaaaaaaahaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaaiaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagbabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaalhcaabaaaacaaaaaaegiccaaaaaaaaaaaalaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaafgbfbaaa
acaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaai
bcaabaaaacaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaabaaaaaaadiaaaaai
ccaabaaaacaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaaaaaaaaai
dcaabaaaacaaaaaaegaabaaaacaaaaaajgifcaaaaaaaaaaabaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadp
dicaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaamaaaaaa
aaaaaaalhcaabaaaacaaaaaaegiccaaaaaaaaaaaamaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadbaaaaaiicaabaaaaaaaaaaa
abeaaaaaaaaaaadpdkiacaaaaaaaaaaaanaaaaaadhaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaaeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaadiaaaaahocaabaaa
abaaaaaapgapbaaaaaaaaaaaagajbaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaaebdiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaapgapbaaaaaaaaaaaddaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaa
agajbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaaabaaaaaaegacbaaa
acaaaaaadeaaaaahhcaabaaaabaaaaaajgahbaaaabaaaaaaegacbaaaacaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_BumpPower]
Float 9 [_BodyBumpPower]
Float 10 [_BumpDetailPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_Shininess]
Float 17 [_TrimShininess]
Float 18 [_AtlasOffsetX]
Float 19 [_AtlasOffsetY]
Float 20 [_AtlasScaleX]
Float 21 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_ShadowMapTexture] 2D
SetTexture 8 [unity_Lightmap] 2D
SetTexture 9 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 164 ALU, 11 TEX
PARAM c[26] = { program.local[0..21],
		{ 0, 0.5, 1, 0.025 },
		{ 2, -0.40824828, -0.70710677, 0.57735026 },
		{ -0.40824831, 0.70710677, 0.57735026, 8 },
		{ 0.81649655, 0, 0.57735026, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MOV R3.zw, c[22].xyxz;
MOV R0.x, c[20];
MOV R0.y, c[21].x;
MOV R0.w, c[19].x;
MOV R0.z, c[18].x;
MAD R3.xy, fragment.texcoord[0].zwzw, R0, R0.zwzw;
MOV R0.w, c[22].z;
TEX R1.yw, R3, texture[4], 2D;
MAD R0.xy, R1.wyzw, c[23].x, -R0.w;
MUL R1.xy, R0, R0;
ADD_SAT R0.z, R1.x, R1.y;
TEX R4.yw, fragment.texcoord[0], texture[2], 2D;
ADD R0.z, -R0, c[22];
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[22].yyzw;
MUL R1.xyz, R1, c[9].x;
ADD R1.xyz, R1, c[22].yyzw;
ADD R1.w, -R3, c[9].x;
CMP R0.xyz, -R1.w, R0, R1;
MAD R4.xy, R4.wyzw, c[23].x, -R0.w;
MOV R1.xy, c[9].x;
MOV R1.z, c[22].x;
MAD R0.xyz, R0, R1, R0;
MUL R1.xy, fragment.texcoord[0].zwzw, c[13].x;
TEX R1.yw, R1, texture[6], 2D;
MAD R2.xy, R1.wyzw, c[23].x, -R0.w;
DP3 R1.z, R0, R0;
RSQ R1.x, R1.z;
MUL R2.zw, R2.xyxy, R2.xyxy;
MUL R0.xyz, R1.x, R0;
TEX R1.yw, fragment.texcoord[0], texture[5], 2D;
MAD R1.xy, R1.wyzw, c[23].x, -R0.w;
MUL R4.zw, R1.xyxy, R1.xyxy;
ADD_SAT R4.z, R4, R4.w;
MUL R1.zw, R4.xyxy, R4.xyxy;
ADD_SAT R1.w, R1.z, R1;
ADD R1.z, -R4, c[22];
ADD R1.w, -R1, c[22].z;
RSQ R1.w, R1.w;
RCP R4.z, R1.w;
ADD_SAT R1.w, R2.z, R2;
RSQ R1.z, R1.z;
RCP R1.z, R1.z;
ADD R4.xyz, R4, -R1;
MAD R1.xyz, fragment.color.primary.x, R4, R1;
ADD R1.w, -R1, c[22].z;
RSQ R1.w, R1.w;
RCP R2.z, R1.w;
ABS R4.w, c[10].x;
MOV R4.xy, c[8].x;
MOV R4.z, c[22].x;
MAD R1.xyz, R1, R4, R0;
DP3 R2.w, R1, R1;
RSQ R1.w, R2.w;
MOV R5.z, c[22].x;
MOV R5.xy, c[10].x;
MUL R4.xyz, R2, R5;
MAD R5.xyz, R2, R5, R0;
MAD R4.xyz, R1.w, R1, R4;
DP3 R2.y, R5, R5;
DP3 R2.x, R4, R4;
MUL R1.xyz, R1.w, R1;
RSQ R2.w, R2.y;
RSQ R2.x, R2.x;
MUL R2.xyz, R2.x, R4;
MUL R4.xyz, R2.w, R5;
ABS R5.y, c[8].x;
CMP R2.w, -R5.y, c[22].z, c[22].x;
CMP R5.x, -R4.w, c[22].z, c[22];
MUL R5.z, R2.w, R5.x;
CMP R1.w, -R4, c[22].x, c[22].z;
MUL R1.w, R2, R1;
ABS R2.w, R1;
CMP R5.y, -R5, c[22].x, c[22].z;
MUL R5.y, R5.x, R5;
ABS R5.z, R5;
CMP R5.x, -R5.z, c[22], c[22].z;
MUL R5.z, R5.x, R5.y;
CMP R2.xyz, -R5.z, R4, R2;
ABS R4.x, R5.y;
CMP R4.x, -R4, c[22], c[22].z;
MUL R4.x, R5, R4;
MUL R1.w, R4.x, R1;
CMP R1.xyz, -R1.w, R1, R2;
CMP R2.w, -R2, c[22].x, c[22].z;
MUL R1.w, R4.x, R2;
CMP R0.xyz, -R1.w, R0, R1;
TEX R1, fragment.texcoord[1], texture[9], 2D;
MUL R1.xyz, R1.w, R1;
MUL R4.xyz, R1, c[24].w;
TEX R1, fragment.texcoord[1], texture[8], 2D;
DP3_SAT R2.z, R0, c[23].yzww;
DP3_SAT R2.x, R0, c[25];
DP3_SAT R2.y, R0, c[24];
DP3 R2.y, R2, R4;
MUL R5.xyz, R1.w, R1;
MUL R2.yzw, R5.xxyz, R2.y;
TXP R2.x, fragment.texcoord[3], texture[7], 2D;
MUL R5.xyz, R1, R2.x;
MUL R1.xyz, R2.yzww, c[24].w;
MUL R2.yzw, R4.y, c[24].xxyz;
MAD R4.xyw, R4.x, c[25].xyzz, R2.yzzw;
MAD R4.xyz, R4.z, c[23].yzww, R4.xyww;
DP3 R1.w, R4, R4;
RSQ R1.w, R1.w;
MUL R4.xyz, R1.w, R4;
MUL R5.xyz, R5, c[23].x;
DP3 R1.w, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.w, R1.w;
MAD R4.xyz, R1.w, fragment.texcoord[2], R4;
DP3 R2.w, R4, R4;
RSQ R2.w, R2.w;
MUL R4.xyz, R2.w, R4;
DP3 R0.y, R0, R4;
MOV R1.w, c[16].x;
ADD R1.w, -R1, c[17].x;
MAD R1.w, fragment.color.primary.x, R1, c[16].x;
TEX R4.xyz, fragment.texcoord[0], texture[0], 2D;
MIN R5.xyz, R1, R5;
MUL R2.xyz, R1, R2.x;
MAX R2.xyz, R5, R2;
MOV R5.xyz, c[4];
ADD R5.xyz, -R5, c[3];
MAD R5.xyz, fragment.color.primary.x, R5, c[4];
MUL R5.xyz, R5, c[0];
MUL R1.xyz, R1, R5;
MUL R0.x, R1.w, c[25].w;
MAX R0.y, R0, c[22].x;
POW R1.w, R0.y, R0.x;
ADD R0.xyz, -R0.w, c[5];
MUL R4.xyz, R4, c[1];
TEX R5.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R5.xyz, R5, c[2], -R4;
MAD R0.xyz, fragment.color.primary.y, R0, c[22].z;
MAD R4.xyz, fragment.color.primary.x, R5, R4;
MUL R4.xyz, R4, R0;
MUL R0.xyz, R4.y, R1;
TEX R1.x, R3, texture[3], 2D;
ADD R0.w, -R1.x, c[22].z;
MUL R0.xyz, R0, R1.w;
ADD R1.zw, fragment.texcoord[0], c[12].x;
MUL R1.xy, R1.zwzw, c[13].x;
TEX R3.xy, R1, texture[6], 2D;
MUL_SAT R2.w, R0, c[7].x;
ADD R1.w, R3.x, R3.y;
MAX R0.w, R3.z, c[14].x;
ADD R1.w, R1, -c[22].y;
MAD_SAT R0.w, R1, R0, c[22];
ADD R1.xyz, -R3.w, c[6];
MAD R1.xyz, R2.w, R1, c[22].z;
ADD R0.w, -R0, c[22].z;
MOV R1.w, c[11].x;
MUL R1.xyz, R4, R1;
MUL R0.w, R0, c[14].x;
ADD R3.xyz, -R3.w, c[15];
MAD R3.xyz, R0.w, R3, c[22].z;
SLT R1.w, c[22].y, R1;
ABS R0.w, R1;
MUL R3.xyz, R1, R3;
CMP R0.w, -R0, c[22].x, c[22].z;
CMP R1.xyz, -R0.w, R1, R3;
MAD result.color.xyz, R1, R2, R0;
MOV result.color.w, c[22].x;
END
# 164 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_BumpPower]
Float 9 [_BodyBumpPower]
Float 10 [_BumpDetailPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_Shininess]
Float 17 [_TrimShininess]
Float 18 [_AtlasOffsetX]
Float 19 [_AtlasOffsetY]
Float 20 [_AtlasScaleX]
Float 21 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_ShadowMapTexture] 2D
SetTexture 8 [unity_Lightmap] 2D
SetTexture 9 [unity_LightmapInd] 2D
"ps_3_0
; 157 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c22, -0.50000000, -1.00000000, 1.00000000, 0.00000000
def c23, 0.02500000, 2.00000000, -1.00000000, 8.00000000
def c24, 0.50000000, 1.00000000, 128.00000000, 0
def c25, -0.40824828, -0.70710677, 0.57735026, 0
def c26, -0.40824831, 0.70710677, 0.57735026, 0
def c27, 0.81649655, 0.00000000, 0.57735026, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4
texld r4.yw, v0, s2
mad_pp r4.xy, r4.wyzw, c23.y, c23.z
mov r0.w, c19.x
mov r0.z, c18.x
mov r5.z, c22.w
mov r5.xy, c10.x
abs r4.w, c8.x
mov r0.x, c20
mov r0.y, c21.x
mad r0.xy, v0.zwzw, r0, r0.zwzw
texld r1.yw, r0, s4
mad_pp r1.xy, r1.wyzw, c23.y, c23.z
mul_pp r0.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c22
rsq_pp r0.z, r0.z
rcp_pp r1.z, r0.z
add r2.xyz, r1, c22.xxyw
mul r2.xyz, r2, c9.x
mov r0.z, c9.x
add r2.xyz, r2, c24.xxyw
add r0.z, c22.y, r0
cmp r1.xyz, -r0.z, r2, r1
mov r2.xy, c9.x
mov r2.z, c22.w
mad r2.xyz, r1, r2, r1
dp3 r0.z, r2, r2
mul r1.xy, v0.zwzw, c13.x
texld r1.yw, r1, s6
mad_pp r3.xy, r1.wyzw, c23.y, c23.z
rsq r0.z, r0.z
mul r1.xyz, r0.z, r2
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
texld r2.yw, v0, s5
mad_pp r2.xy, r2.wyzw, c23.y, c23.z
mul_pp r3.zw, r2.xyxy, r2.xyxy
mul_pp r2.zw, r4.xyxy, r4.xyxy
add_pp_sat r1.w, r3.z, r3
add_pp_sat r2.z, r2, r2.w
add_pp r2.z, -r2, c22
rsq_pp r2.w, r2.z
add_pp r1.w, -r1, c22.z
rsq_pp r1.w, r1.w
add_pp r0.z, -r0, c22
rsq_pp r0.z, r0.z
rcp_pp r3.z, r0.z
rcp_pp r2.z, r1.w
rcp_pp r4.z, r2.w
add r4.xyz, r4, -r2
mad r2.xyz, v1.x, r4, r2
mov r4.xy, c8.x
mov r4.z, c22.w
mad r2.xyz, r2, r4, r1
dp3 r0.w, r2, r2
mul r4.xyz, r3, r5
rsq r0.z, r0.w
mad r4.xyz, r0.z, r2, r4
mad r5.xyz, r3, r5, r1
dp3 r1.w, r4, r4
dp3 r0.w, r5, r5
rsq r1.w, r1.w
mul r3.xyz, r1.w, r4
abs r1.w, c10.x
rsq r0.w, r0.w
mul r4.xyz, r0.w, r5
cmp r0.w, -r4, c22, c22.z
cmp r3.w, -r1, c22, c22.z
mul_pp r2.w, r0, r3
cmp r4.w, -r4, c22.z, c22
mul r2.xyz, r0.z, r2
cmp r0.z, -r1.w, c22, c22.w
abs_pp r2.w, r2
mul_pp r3.w, r3, r4
cmp_pp r2.w, -r2, c22.z, c22
mul_pp r4.w, r2, r3
abs_pp r3.w, r3
cmp_pp r3.xyz, -r4.w, r3, r4
mul_pp r1.w, r0, r0.z
cmp_pp r3.w, -r3, c22.z, c22
mul_pp r0.z, r2.w, r3.w
mul_pp r0.w, r0.z, r1
cmp_pp r2.xyz, -r0.w, r3, r2
abs_pp r1.w, r1
cmp_pp r0.w, -r1, c22.z, c22
mul_pp r0.z, r0, r0.w
cmp_pp r2.xyz, -r0.z, r2, r1
texld r3, v2, s9
mul_pp r3.xyz, r3.w, r3
mul_pp r3.xyz, r3, c23.w
mul r4.xyz, r3.y, c26
dp3_pp_sat r1.z, r2, c25
dp3_pp_sat r1.y, r2, c26
dp3_pp_sat r1.x, r2, c27
dp3_pp r0.z, r1, r3
mad r4.xyz, r3.x, c27, r4
mad r1.xyz, r3.z, c25, r4
texld r4, v2, s8
mul_pp r3.xyz, r4.w, r4
mul_pp r3.xyz, r3, r0.z
dp3 r0.w, r1, r1
rsq r0.z, r0.w
mul r5.xyz, r0.z, r1
texldp r1.x, v4, s7
mul_pp r4.xyz, r4, r1.x
dp3_pp r0.z, v3, v3
rsq_pp r0.z, r0.z
mad_pp r1.yzw, r0.z, v3.xxyz, r5.xxyz
dp3_pp r0.z, r1.yzww, r1.yzww
rsq_pp r0.z, r0.z
mul_pp r5.xyz, r0.z, r1.yzww
dp3_pp r0.z, r2, r5
mul_pp r3.xyz, r3, c23.w
mul_pp r4.xyz, r4, c23.y
mov_pp r0.w, c17.x
mov_pp r2.xyz, c3
add_pp r0.w, -c16.x, r0
add_pp r2.xyz, -c4, r2
mad_pp r0.w, v1.x, r0, c16.x
mad_pp r2.xyz, v1.x, r2, c4
mul_pp r2.xyz, r2, c0
mul_pp r2.xyz, r3, r2
min_pp r4.xyz, r3, r4
mul_pp r1.xyz, r3, r1.x
mov_pp r3.xyz, c5
add_pp r3.xyz, c22.y, r3
max_pp r1.xyz, r4, r1
max_pp r0.z, r0, c22.w
mul_pp r0.w, r0, c24.z
pow r4, r0.z, r0.w
texld r5.xyz, v0, s0
mul r4.yzw, r5.xxyz, c1.xxyz
texld r5.xyz, v0, s1
mad r5.xyz, r5, c2, -r4.yzww
mad r5.xyz, v1.x, r5, r4.yzww
mov r0.z, r4.x
mad_pp r3.xyz, v1.y, r3, c22.z
mul r3.xyz, r5, r3
mul_pp r5.xyz, r3.y, r2
texld r2.x, r0, s3
add r0.w, -r2.x, c22.z
mov r2.xyz, c6
add r4.xy, v0.zwzw, c12.x
mul_sat r0.w, r0, c7.x
add r2.xyz, c22.y, r2
mad r2.xyz, r0.w, r2, c22.z
mov r0.w, c14.x
mul r2.xyz, r3, r2
mul r4.xy, r4, c13.x
texld r3.xy, r4, s6
add r1.w, r3.x, r3.y
mov r3.xyz, c15
mul r0.xyz, r5, r0.z
max r0.w, c22, r0
add r1.w, r1, c22.x
mad_sat r0.w, r1, r0, c23.x
add r0.w, -r0, c22.z
mul r0.w, r0, c14.x
add r3.xyz, c22.y, r3
mad r3.xyz, r0.w, r3, c22.z
mov r0.w, c11.x
mul r3.xyz, r2, r3
add_pp r0.w, c22.x, r0
cmp_pp r2.xyz, -r0.w, r2, r3
mad_pp oC0.xyz, r2, r1, r0
mov_pp oC0.w, c22
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 336 // 276 used size, 28 vars
Vector 32 [_SpecColor] 4
Vector 112 [_Color] 3
Vector 128 [_TrimColor] 3
Vector 144 [_TrimSpecColor] 3
Vector 160 [_MainSpecColor] 3
Vector 176 [_VertexMaskColor] 3
Vector 192 [_BodyOcclusionColor] 3
Float 204 [_BodyOcclusionPower]
Float 208 [_BumpPower]
Float 212 [_BodyBumpPower]
Float 216 [_BumpDetailPower]
Float 220 [_DetailTexEnable]
Float 224 [_DetailTexOffset]
Float 228 [_DetailTexScale]
Float 232 [_DetailTexPower]
Vector 240 [_DetailTexColor] 3
Float 252 [_Shininess]
Float 256 [_TrimShininess]
Float 260 [_AtlasOffsetX]
Float 264 [_AtlasOffsetY]
Float 268 [_AtlasScaleX]
Float 272 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 7
SetTexture 2 [_BumpTrimTex] 2D 6
SetTexture 3 [_BodyOcclusionTex] 2D 5
SetTexture 4 [_BodyBumpTex] 2D 4
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_BumpDetailTex] 2D 3
SetTexture 7 [_ShadowMapTexture] 2D 0
SetTexture 8 [unity_Lightmap] 2D 8
SetTexture 9 [unity_LightmapInd] 2D 9
// 136 instructions, 8 temp regs, 0 temp arrays:
// ALU 89 float, 0 int, 2 uint
// TEX 11 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmaffknbhlihgdhkmldjnhebdjegojppaabaaaaaammbdaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
kibcaaaaeaaaaaaakkaeaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaad
aagabaaaaiaaaaaafkaaaaadaagabaaaajaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaa
ffffaaaafibiaaaeaahabaaaajaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaaddcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadlcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
aiaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaagaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaa
abaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaabaaaaaaa
diaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaa
aaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaabaaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaafaaaaaaaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaabaaaaaa
abeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaamaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaaacaaaaaahgapbaaaacaaaaaa
apaaaaahbcaabaaaabaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaaakaabaaaabaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaamalpaaaamalpaaaaialpaaaaaaaaaaaaaaakhcaabaaaacaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaadcaaaaan
hcaabaaaabaaaaaafgifcaaaaaaaaaaaanaaaaaaegacbaaaabaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaiadpaaaaaaaabnaaaaaiicaabaaaabaaaaaaabeaaaaa
aaaaiadpbkiacaaaaaaaaaaaanaaaaaadhaaaaajhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadgaaaaafecaabaaaacaaaaaa
abeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaafgijcaaaaaaaaaaaanaaaaaa
dcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaagacbaaaacaaaaaaegacbaaa
abaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaa
aaaaaaaaanaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaahocaabaaaadaaaaaaagajbaaa
aaaaaaaaagaabaaaadaaaaaabiaaaaaldcaabaaaaeaaaaaaigiacaaaaaaaaaaa
anaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadjaaaaalmcaabaaa
aeaaaaaakgiccaaaaaaaaaaaanaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaaaeaaaaaaegaabaaaaeaaaaaa
abaaaaahecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaadhaaaaaj
hcaabaaaacaaaaaafgafbaaaaeaaaaaajgahbaaaadaaaaaaegacbaaaacaaaaaa
diaaaaaigcaabaaaadaaaaaakgblbaaaabaaaaaafgifcaaaaaaaaaaaaoaaaaaa
efaaaaajpcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaagaaaaaaaagabaaa
adaaaaaadcaaaaapgcaabaaaadaaaaaapganbaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaaaaa
diaaaaahdcaabaaaafaaaaaapgapbaaaacaaaaaajgafbaaaadaaaaaadgaaaaaf
ecaabaaaafaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaabaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagaabaaaadaaaaaaegacbaaaafaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaadhaaaaajhcaabaaaabaaaaaaagaabaaaaeaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaadhaaaaajhcaabaaaaaaaaaaa
kgakbaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaapcaaaakbcaabaaa
abaaaaaaaceaaaaaolaffbdpdkmnbddpaaaaaaaaaaaaaaaaigaabaaaaaaaaaaa
bacaaaakccaabaaaabaaaaaaaceaaaaaomafnblopdaedfdpdkmnbddpaaaaaaaa
egacbaaaaaaaaaaabacaaaakecaabaaaabaaaaaaaceaaaaaolafnblopdaedflp
dkmnbddpaaaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
adaaaaaaeghobaaaajaaaaaaaagabaaaajaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaaebdiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaapgapbaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaadaaaaaaeghobaaa
aiaaaaaaaagabaaaaiaaaaaadiaaaaahccaabaaaabaaaaaadkaabaaaadaaaaaa
abeaaaaaaaaaaaebdiaaaaahocaabaaaabaaaaaaagajbaaaadaaaaaafgafbaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaajgahbaaaabaaaaaa
aoaaaaahdcaabaaaaeaaaaaaegbabaaaafaaaaaapgbpbaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaa
aaaaaaahicaabaaaabaaaaaaakaabaaaaeaaaaaaakaabaaaaeaaaaaadiaaaaah
hcaabaaaaeaaaaaaegacbaaaabaaaaaaagaabaaaaeaaaaaadiaaaaahhcaabaaa
adaaaaaaegacbaaaadaaaaaapgapbaaaabaaaaaaddaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadeaaaaahhcaabaaaadaaaaaaegacbaaa
aeaaaaaaegacbaaaadaaaaaaaaaaaaaidcaabaaaaeaaaaaaogbkbaaaabaaaaaa
agiacaaaaaaaaaaaaoaaaaaadiaaaaaidcaabaaaaeaaaaaaegaabaaaaeaaaaaa
fgifcaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaagaaaaaaaagabaaaadaaaaaaaaaaaaahicaabaaaabaaaaaabkaabaaa
aeaaaaaaakaabaaaaeaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaaalpdeaaaaaiicaabaaaacaaaaaackiacaaaaaaaaaaaaoaaaaaa
abeaaaaaaaaaaaaadccaaaajicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaaa
acaaaaaaabeaaaaamnmmmmdmaaaaaaaiicaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckiacaaaaaaaaaaaaoaaaaaaaaaaaaalhcaabaaaaeaaaaaaegiccaaaaaaaaaaa
apaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaa
aeaaaaaapgapbaaaabaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaaaaaaaaalhcaabaaaafaaaaaaegiccaaaaaaaaaaaamaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaafaaaaaa
pgapbaaaaaaaaaaaegacbaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaefaaaaajpcaabaaaagaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaahaaaaaaefaaaaajpcaabaaaahaaaaaaegbabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaadiaaaaaihcaabaaaahaaaaaaegacbaaaahaaaaaa
egiccaaaaaaaaaaaahaaaaaadcaaaaalhcaabaaaagaaaaaaegacbaaaagaaaaaa
egiccaaaaaaaaaaaaiaaaaaaegacbaiaebaaaaaaahaaaaaadcaaaaajhcaabaaa
agaaaaaaagbabaaaacaaaaaaegacbaaaagaaaaaaegacbaaaahaaaaaaaaaaaaal
hcaabaaaahaaaaaaegiccaaaaaaaaaaaalaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadcaaaaamhcaabaaaahaaaaaafgbfbaaaacaaaaaaegacbaaa
ahaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaa
agaaaaaaegacbaaaagaaaaaaegacbaaaahaaaaaadiaaaaahhcaabaaaafaaaaaa
egacbaaaafaaaaaaegacbaaaagaaaaaadiaaaaahhcaabaaaaeaaaaaaegacbaaa
aeaaaaaaegacbaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaaabeaaaaaaaaaaadp
dkiacaaaaaaaaaaaanaaaaaadhaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaeaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaaeaaaaaadiaaaaakhcaabaaaaeaaaaaafgafbaaaacaaaaaa
aceaaaaaomafnblopdaedfdpdkmnbddpaaaaaaaadcaaaaamlcaabaaaacaaaaaa
agaabaaaacaaaaaaaceaaaaaolaffbdpaaaaaaaaaaaaaaaadkmnbddpegaibaaa
aeaaaaaadcaaaaamhcaabaaaacaaaaaakgakbaaaacaaaaaaaceaaaaaolafnblo
pdaedflpdkmnbddpaaaaaaaaegadbaaaacaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaaeaaaaaa
pgapbaaaabaaaaaaegbcbaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaaegacbaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaadeaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaacpaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaaaaaaaakccaabaaaaaaaaaaadkiacaiaebaaaaaa
aaaaaaaaapaaaaaaakiacaaaaaaaaaaabaaaaaaadcaaaaakccaabaaaaaaaaaaa
akbabaaaacaaaaaabkaabaaaaaaaaaaadkiacaaaaaaaaaaaapaaaaaadiaaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaaaeddiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaabjaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaakocaabaaaaaaaaaaaagijcaaaaaaaaaaaajaaaaaa
agijcaiaebaaaaaaaaaaaaaaakaaaaaadcaaaaakocaabaaaaaaaaaaaagbabaaa
acaaaaaafgaobaaaaaaaaaaaagijcaaaaaaaaaaaakaaaaaadiaaaaaiocaabaaa
aaaaaaaafgaobaaaaaaaaaaaagijcaaaaaaaaaaaacaaaaaadiaaaaahocaabaaa
aaaaaaaafgaobaaaaaaaaaaaagajbaaaabaaaaaadiaaaaahocaabaaaaaaaaaaa
fgafbaaaagaaaaaafgaobaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaajgahbaaa
aaaaaaaaagaabaaaaaaaaaaaegacbaaaadaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES3"
}

}
	}
	Pass {
		Name "FORWARD"
		Tags { "LightMode" = "ForwardAdd" }
		ZWrite Off Blend One One Fog { Color (0,0,0,0) }
Program "vp" {
// Vertex combos: 5
//   opengl - ALU: 27 to 36
//   d3d9 - ALU: 30 to 39
//   d3d11 - ALU: 12 to 14, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_MainTex_ST]
Vector 21 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 35 ALU
PARAM c[22] = { { 1 },
		state.matrix.mvp,
		program.local[5..21] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R1.xyz, c[17];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[19].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[18];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.x, R0, c[9];
DP4 R3.y, R0, c[10];
MAD R0.xyz, R3, c[19].w, -vertex.position;
DP3 result.texcoord[1].y, R0, R1;
DP3 result.texcoord[1].z, vertex.normal, R0;
DP3 result.texcoord[1].x, R0, vertex.attrib[14];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP3 result.texcoord[2].y, R1, R2;
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 35 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_MainTex_ST]
Vector 20 [_BodyBumpTex_ST]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.w, c21.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c18.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
mov r1, c8
dp4 r4.x, c17, r1
mad r0.xyz, r4, c18.w, -v0
dp3 o3.y, r0, r2
dp3 o3.z, v2, r0
dp3 o3.x, r0, v1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp3 o4.y, r2, r3
dp3 o4.z, v2, r3
dp3 o4.x, v1, r3
mov o2, v5
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
mad o1.zw, v4.xyxy, c20.xyxy, c20
mad o1.xy, v3, c19, c19.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 320 // 320 used size, 27 vars
Matrix 48 [_LightMatrix0] 4
Vector 288 [_MainTex_ST] 4
Vector 304 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedlnoiehfpjlbddilhpkhhonblnmcieipnabaaaaaahiahaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcmaafaaaaeaaaabaahaabaaaa
fjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaabcaaaaaaogikcaaaaaaaaaaabcaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaabdaaaaaa
kgiocaaaaaaaaaaabdaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaa
adaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaadaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaaeaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#ifndef POINT
    #define POINT 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 455
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 497
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 433
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 437
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 441
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 445
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 449
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 453
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 462
#line 507
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 411
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 413
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 405
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 409
    return OUT;
}
#line 417
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 421
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 425
    return OUT;
}
#line 384
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 388
    OUT = normalize(OUT);
    return OUT;
}
#line 397
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 401
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 462
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 466
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 470
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 474
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 478
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 484
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 489
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 528
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 532
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 536
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 540
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (texture2D( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0));
    c.w = 0.0;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:510(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#ifndef POINT
    #define POINT 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 455
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 497
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 433
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 437
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 441
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 445
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 449
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 453
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 462
#line 507
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 411
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 413
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 405
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 409
    return OUT;
}
#line 417
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 421
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 425
    return OUT;
}
#line 384
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 388
    OUT = normalize(OUT);
    return OUT;
}
#line 397
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 401
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 462
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 466
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 470
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 474
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 478
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 484
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 489
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 528
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 532
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 536
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 540
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (texture2D( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0));
    c.w = 0.0;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:510(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 455
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 497
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 433
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 437
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 441
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 445
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 449
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 453
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 462
#line 507
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 509
v2f_surf vert_surf( in appdata_full v ) {
    #line 511
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 515
    o.color = v.color;
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 519
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 524
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 455
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 497
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 433
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 437
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 441
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 445
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 449
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 453
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 462
#line 507
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 411
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 413
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 405
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 409
    return OUT;
}
#line 417
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 421
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 425
    return OUT;
}
#line 384
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 388
    OUT = normalize(OUT);
    return OUT;
}
#line 397
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 401
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 462
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 466
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 470
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 474
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 478
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 484
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 489
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 528
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 532
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 536
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 540
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0));
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 9 [_WorldSpaceCameraPos]
Vector 10 [_WorldSpaceLightPos0]
Matrix 5 [_World2Object]
Vector 11 [unity_Scale]
Vector 12 [_MainTex_ST]
Vector 13 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 27 ALU
PARAM c[14] = { { 1 },
		state.matrix.mvp,
		program.local[5..13] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R1.xyz, c[9];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[7];
DP4 R2.y, R1, c[6];
DP4 R2.x, R1, c[5];
MAD R2.xyz, R2, c[11].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[10];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[7];
DP4 R3.y, R0, c[6];
DP4 R3.x, R0, c[5];
DP3 result.texcoord[1].y, R3, R1;
DP3 result.texcoord[2].y, R1, R2;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[13].xyxy, c[13];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[12], c[12].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 27 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
Vector 10 [unity_Scale]
Vector 11 [_MainTex_ST]
Vector 12 [_BodyBumpTex_ST]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
def c13, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.w, c13.x
mov r0.xyz, c8
dp4 r1.z, r0, c6
dp4 r1.y, r0, c5
dp4 r1.x, r0, c4
mad r3.xyz, r1, c10.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c6
dp4 r4.z, c9, r0
mov r0, c5
mov r1, c4
dp4 r4.y, c9, r0
dp4 r4.x, c9, r1
dp3 o3.y, r4, r2
dp3 o4.y, r2, r3
dp3 o3.z, v2, r4
dp3 o3.x, r4, v1
dp3 o4.z, v2, r3
dp3 o4.x, v1, r3
mov o2, v5
mad o1.zw, v4.xyxy, c12.xyxy, c12
mad o1.xy, v3, c11, c11.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 256 // 256 used size, 26 vars
Vector 224 [_MainTex_ST] 4
Vector 240 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 26 instructions, 2 temp regs, 0 temp arrays:
// ALU 12 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedpcoakkcfkaliogghimmmcpgfollnlhajabaaaaaapiafaaaaadaaaaaa
cmaaaaaapeaaaaaajiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefcfiaeaaaa
eaaaabaabgabaaaafjaaaaaeegiocaaaaaaaaaaabaaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaa
fpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaa
aeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaaoaaaaaaogikcaaaaaaaaaaaaoaaaaaadcaaaaal
mccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaapaaaaaakgiocaaa
aaaaaaaaapaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaah
hcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
eccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaa
abaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaa
baaaaaahcccabaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bccabaaaaeaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaa
aeaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 522
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 524
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 528
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 532
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = IN.lightDir;
    #line 536
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), 1.0);
    c.w = 0.0;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:507(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL
    #define DIRECTIONAL 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 522
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 524
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 528
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 532
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = IN.lightDir;
    #line 536
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), 1.0);
    c.w = 0.0;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:507(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 506
v2f_surf vert_surf( in appdata_full v ) {
    #line 508
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 512
    o.color = v.color;
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 516
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 520
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 522
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 524
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 528
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 532
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = IN.lightDir;
    #line 536
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), 1.0);
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_MainTex_ST]
Vector 21 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 36 ALU
PARAM c[22] = { { 1 },
		state.matrix.mvp,
		program.local[5..21] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R1.xyz, c[17];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[19].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[18];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.x, R0, c[9];
DP4 R3.y, R0, c[10];
MAD R0.xyz, R3, c[19].w, -vertex.position;
DP4 R0.w, vertex.position, c[8];
DP3 result.texcoord[1].y, R0, R1;
DP3 result.texcoord[1].z, vertex.normal, R0;
DP3 result.texcoord[1].x, R0, vertex.attrib[14];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP3 result.texcoord[2].y, R1, R2;
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
DP4 result.texcoord[3].w, R0, c[16];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 36 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_MainTex_ST]
Vector 20 [_BodyBumpTex_ST]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.w, c21.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c18.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
mov r1, c8
dp4 r4.x, c17, r1
mad r0.xyz, r4, c18.w, -v0
dp4 r0.w, v0, c7
dp3 o3.y, r0, r2
dp3 o3.z, v2, r0
dp3 o3.x, r0, v1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp3 o4.y, r2, r3
dp3 o4.z, v2, r3
dp3 o4.x, v1, r3
mov o2, v5
dp4 o5.w, r0, c15
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
mad o1.zw, v4.xyxy, c20.xyxy, c20
mad o1.xy, v3, c19, c19.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 320 // 320 used size, 27 vars
Matrix 48 [_LightMatrix0] 4
Vector 288 [_MainTex_ST] 4
Vector 304 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednomakphlfgaofegejoeaaocfmfhbbnodabaaaaaahiahaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcmaafaaaaeaaaabaahaabaaaa
fjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaabcaaaaaaogikcaaaaaaaaaaabcaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaabdaaaaaa
kgiocaaaaaaaaaaabdaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaa
adaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaadaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaafaaaaaaegiocaaaaaaaaaaa
agaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#ifndef SPOT
    #define SPOT 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 506
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 389
#line 393
#line 406
#line 414
#line 426
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 438
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 442
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 446
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 450
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 454
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 458
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 462
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 471
#line 516
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 389
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture2D( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 385
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture2D( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 420
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 422
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 414
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 418
    return OUT;
}
#line 426
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 430
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 434
    return OUT;
}
#line 393
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 397
    OUT = normalize(OUT);
    return OUT;
}
#line 406
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 410
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 471
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 475
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 479
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 483
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 487
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 493
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 498
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 535
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 537
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 541
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 545
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 549
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0));
    c.w = 0.0;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:519(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#ifndef SPOT
    #define SPOT 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 506
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 389
#line 393
#line 406
#line 414
#line 426
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 438
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 442
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 446
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 450
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 454
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 458
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 462
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 471
#line 516
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 389
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture2D( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 385
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture2D( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 420
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 422
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 414
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 418
    return OUT;
}
#line 426
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 430
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 434
    return OUT;
}
#line 393
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 397
    OUT = normalize(OUT);
    return OUT;
}
#line 406
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 410
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 471
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 475
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 479
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 483
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 487
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 493
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 498
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 535
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 537
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 541
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 545
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 549
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0));
    c.w = 0.0;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:519(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 506
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 389
#line 393
#line 406
#line 414
#line 426
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 438
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 442
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 446
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 450
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 454
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 458
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 462
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 471
#line 516
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 518
v2f_surf vert_surf( in appdata_full v ) {
    #line 520
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 524
    o.color = v.color;
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 528
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 533
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 506
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 389
#line 393
#line 406
#line 414
#line 426
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 438
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 442
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 446
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 450
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 454
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 458
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 462
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 471
#line 516
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 389
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 385
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 420
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 422
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 414
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 418
    return OUT;
}
#line 426
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 430
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 434
    return OUT;
}
#line 393
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 397
    OUT = normalize(OUT);
    return OUT;
}
#line 406
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 410
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 471
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 475
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 479
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 483
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 487
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 493
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 498
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 535
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 537
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 541
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 545
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 549
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0));
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_MainTex_ST]
Vector 21 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 35 ALU
PARAM c[22] = { { 1 },
		state.matrix.mvp,
		program.local[5..21] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R1.xyz, c[17];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[19].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[18];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.x, R0, c[9];
DP4 R3.y, R0, c[10];
MAD R0.xyz, R3, c[19].w, -vertex.position;
DP3 result.texcoord[1].y, R0, R1;
DP3 result.texcoord[1].z, vertex.normal, R0;
DP3 result.texcoord[1].x, R0, vertex.attrib[14];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP3 result.texcoord[2].y, R1, R2;
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 35 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_MainTex_ST]
Vector 20 [_BodyBumpTex_ST]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.w, c21.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c18.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
mov r1, c8
dp4 r4.x, c17, r1
mad r0.xyz, r4, c18.w, -v0
dp3 o3.y, r0, r2
dp3 o3.z, v2, r0
dp3 o3.x, r0, v1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp3 o4.y, r2, r3
dp3 o4.z, v2, r3
dp3 o4.x, v1, r3
mov o2, v5
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
mad o1.zw, v4.xyxy, c20.xyxy, c20
mad o1.xy, v3, c19, c19.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 320 // 320 used size, 27 vars
Matrix 48 [_LightMatrix0] 4
Vector 288 [_MainTex_ST] 4
Vector 304 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedlnoiehfpjlbddilhpkhhonblnmcieipnabaaaaaahiahaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcmaafaaaaeaaaabaahaabaaaa
fjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaabcaaaaaaogikcaaaaaaaaaaabcaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaabdaaaaaa
kgiocaaaaaaaaaaabdaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaa
adaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaadaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaaeaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#ifndef POINT_COOKIE
    #define POINT_COOKIE 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 456
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 498
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 392
#line 412
#line 428
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 432
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 436
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 440
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 444
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 448
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 452
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 463
#line 508
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 412
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 416
    return OUT;
}
#line 406
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 408
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 418
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 420
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 424
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 385
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    #line 388
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 398
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 400
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 404
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 463
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 467
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 471
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 475
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 479
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 485
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 490
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 527
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 529
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 533
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 537
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 541
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), ((texture2D( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * textureCube( _LightTexture0, IN._LightCoord).w) * 1.0));
    c.w = 0.0;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:511(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#ifndef POINT_COOKIE
    #define POINT_COOKIE 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 456
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 498
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 392
#line 412
#line 428
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 432
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 436
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 440
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 444
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 448
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 452
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 463
#line 508
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 412
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 416
    return OUT;
}
#line 406
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 408
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 418
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 420
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 424
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 385
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    #line 388
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 398
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 400
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 404
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 463
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 467
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 471
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 475
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 479
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 485
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 490
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 527
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 529
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 533
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 537
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 541
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), ((texture2D( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * textureCube( _LightTexture0, IN._LightCoord).w) * 1.0));
    c.w = 0.0;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:511(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 456
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 498
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 392
#line 412
#line 428
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 432
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 436
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 440
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 444
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 448
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 452
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 463
#line 508
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 510
v2f_surf vert_surf( in appdata_full v ) {
    #line 512
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 516
    o.color = v.color;
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 520
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 525
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 456
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 498
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 392
#line 412
#line 428
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 432
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 436
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 440
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 444
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 448
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 452
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 463
#line 508
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 412
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 416
    return OUT;
}
#line 406
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 408
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 418
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 420
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 424
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 385
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    #line 388
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 398
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 400
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 404
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 463
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 467
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 471
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 475
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 479
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 485
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 490
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 527
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 529
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 533
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 537
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 541
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0));
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_MainTex_ST]
Vector 21 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 33 ALU
PARAM c[22] = { { 1 },
		state.matrix.mvp,
		program.local[5..21] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R1.xyz, c[17];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[19].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[18];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP3 result.texcoord[1].y, R3, R1;
DP3 result.texcoord[2].y, R1, R2;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 33 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_MainTex_ST]
Vector 20 [_BodyBumpTex_ST]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.w, c21.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c18.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
mov r1, c8
dp4 r4.x, c17, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp3 o3.y, r4, r2
dp3 o4.y, r2, r3
dp3 o3.z, v2, r4
dp3 o3.x, r4, v1
dp3 o4.z, v2, r3
dp3 o4.x, v1, r3
mov o2, v5
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
mad o1.zw, v4.xyxy, c20.xyxy, c20
mad o1.xy, v3, c19, c19.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 320 // 320 used size, 27 vars
Matrix 48 [_LightMatrix0] 4
Vector 288 [_MainTex_ST] 4
Vector 304 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 34 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedajgfhhpahomihkmnleakppgbkoncjldcabaaaaaaemahaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcjeafaaaaeaaaabaagfabaaaa
fjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaaddccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaabcaaaaaaogikcaaaaaaaaaaabcaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaabdaaaaaa
kgiocaaaaaaaaaaabdaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
eccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiacaaaaaaaaaaaaeaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaa
aaaaaaaaadaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaa
aaaaaaaaegiacaaaaaaaaaaaafaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
dcaaaaakdccabaaaafaaaaaaegiacaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaa
egaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL_COOKIE
    #define DIRECTIONAL_COOKIE 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 455
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 497
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 433
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 437
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 441
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 445
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 449
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 453
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 462
#line 507
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 411
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 413
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 405
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 409
    return OUT;
}
#line 417
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 421
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 425
    return OUT;
}
#line 384
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 388
    OUT = normalize(OUT);
    return OUT;
}
#line 397
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 401
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 462
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 466
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 470
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 474
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 478
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 484
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 489
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 528
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 532
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 536
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = IN.lightDir;
    #line 540
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (texture2D( _LightTexture0, IN._LightCoord).w * 1.0));
    c.w = 0.0;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:510(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

#ifndef DIRECTIONAL_COOKIE
    #define DIRECTIONAL_COOKIE 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 455
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 497
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 433
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 437
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 441
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 445
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 449
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 453
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 462
#line 507
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 411
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 413
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 405
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 409
    return OUT;
}
#line 417
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 421
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 425
    return OUT;
}
#line 384
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 388
    OUT = normalize(OUT);
    return OUT;
}
#line 397
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 401
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 462
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 466
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 470
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 474
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 478
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 484
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 489
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 528
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 532
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 536
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = IN.lightDir;
    #line 540
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (texture2D( _LightTexture0, IN._LightCoord).w * 1.0));
    c.w = 0.0;
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:510(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 455
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 497
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 433
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 437
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 441
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 445
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 449
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 453
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 462
#line 507
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 509
v2f_surf vert_surf( in appdata_full v ) {
    #line 511
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 515
    o.color = v.color;
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 519
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 524
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 455
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 497
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
#line 433
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
#line 437
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
#line 441
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
#line 445
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
#line 449
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
#line 453
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 462
#line 507
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
lowp vec4 xlat_mutable__SpecColor;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * xlat_mutable__SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * xlat_mutable__SpecColor.w) * spec) * atten));
    return c;
}
#line 411
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    #line 413
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    return OUT;
}
#line 405
highp vec3 ClampUnit( in highp vec3 colorA ) {
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    #line 409
    return OUT;
}
#line 417
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 421
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    #line 425
    return OUT;
}
#line 384
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 388
    OUT = normalize(OUT);
    return OUT;
}
#line 397
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    highp vec3 OUT;
    highp vec3 diff;
    #line 401
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 462
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 466
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 470
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 474
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 478
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 484
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 489
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 528
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 532
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 536
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = IN.lightDir;
    #line 540
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, IN._LightCoord).w * 1.0));
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 5
//   opengl - ALU: 146 to 157, TEX: 8 to 10
//   d3d9 - ALU: 142 to 151, TEX: 8 to 10
//   d3d11 - ALU: 76 to 86, TEX: 8 to 10, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 151 ALU, 9 TEX
PARAM c[25] = { program.local[0..22],
		{ 0, 1, 2, 0.5 },
		{ 128, 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MOV R5.xy, c[23];
MAD R3.xy, R3.wyzw, c[23].z, -c[23].y;
MOV R0.z, c[21].x;
MOV R0.w, c[22].x;
MOV R0.y, c[20].x;
MOV R0.x, c[19];
MAD R5.zw, fragment.texcoord[0], R0, R0.xyxy;
TEX R0.yw, R5.zwzw, texture[4], 2D;
MAD R0.xy, R0.wyzw, c[23].z, -c[23].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.z, -R0, c[23].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[23].wwyw;
MUL R1.xyz, R1, c[10].x;
ADD R0.w, -R5.y, c[10].x;
ADD R1.xyz, R1, c[23].wwyw;
CMP R1.xyz, -R0.w, R0, R1;
MOV R0.xy, c[10].x;
MOV R0.z, c[23].x;
MAD R0.xyz, R1, R0, R1;
DP3 R0.w, R0, R0;
MUL R1.xy, fragment.texcoord[0].zwzw, c[14].x;
TEX R1.yw, R1, texture[6], 2D;
MAD R1.xy, R1.wyzw, c[23].z, -c[23].y;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R0;
TEX R0.yw, fragment.texcoord[0], texture[5], 2D;
MAD R0.xy, R0.wyzw, c[23].z, -c[23].y;
MUL R3.zw, R0.xyxy, R0.xyxy;
ADD_SAT R2.w, R3.z, R3;
MUL R0.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.w, -R2, c[23].y;
MUL R1.zw, R1.xyxy, R1.xyxy;
RSQ R2.w, R0.w;
ADD R0.z, -R0, c[23].y;
RSQ R0.w, R0.z;
RCP R0.z, R2.w;
RCP R3.z, R0.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
ADD_SAT R0.w, R1.z, R1;
MOV R0.xy, c[9].x;
MOV R0.z, c[23].x;
MAD R3.xyz, R3, R0, R2;
ADD R0.w, -R0, c[23].y;
RSQ R0.x, R0.w;
DP3 R0.w, R3, R3;
RCP R1.z, R0.x;
RSQ R0.w, R0.w;
ABS R3.w, c[9].x;
MOV R0.z, c[23].x;
MOV R0.xy, c[11].x;
MUL R4.xyz, R1, R0;
MAD R0.xyz, R1, R0, R2;
MAD R4.xyz, R0.w, R3, R4;
DP3 R1.y, R4, R4;
DP3 R1.x, R0, R0;
RSQ R1.w, R1.x;
MUL R0.xyz, R1.w, R0;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R4;
ABS R2.w, c[11].x;
CMP R4.x, -R2.w, c[23].y, c[23];
CMP R1.w, -R3, c[23].y, c[23].x;
MUL R4.y, R1.w, R4.x;
CMP R4.z, -R3.w, c[23].x, c[23].y;
ABS R3.w, R4.y;
CMP R2.w, -R2, c[23].x, c[23].y;
MUL R1.w, R1, R2;
MUL R4.x, R4, R4.z;
CMP R3.w, -R3, c[23].x, c[23].y;
MUL R4.y, R3.w, R4.x;
CMP R0.xyz, -R4.y, R0, R1;
MUL R1.xyz, R0.w, R3;
ABS R4.x, R4;
CMP R0.w, -R4.x, c[23].x, c[23].y;
MUL R0.w, R3, R0;
MUL R2.w, R0, R1;
CMP R0.xyz, -R2.w, R1, R0;
DP3 R3.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R3.x, R3.x;
DP3 R2.w, fragment.texcoord[2], fragment.texcoord[2];
ABS R1.w, R1;
CMP R1.w, -R1, c[23].x, c[23].y;
MUL R0.w, R0, R1;
CMP R0.xyz, -R0.w, R2, R0;
MUL R1.xyz, R3.x, fragment.texcoord[1];
DP3 R0.w, R0, R1;
RSQ R2.w, R2.w;
MAD R3.xyz, R2.w, fragment.texcoord[2], R1;
DP3 R2.w, R3, R3;
RSQ R1.w, R2.w;
MUL R2.xyz, R1.w, R3;
DP3 R1.w, R0, R2;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R1.xyz, R1, c[2];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[3], -R1;
MAD R0.xyz, fragment.color.primary.x, R0, R1;
MOV R1.y, c[17].x;
ADD R2.x, -R1.y, c[18];
MOV R1.x, c[23].y;
ADD R1.xyz, -R1.x, c[6];
MAD R2.x, fragment.color.primary, R2, c[17];
MAD R1.xyz, fragment.color.primary.y, R1, c[23].y;
MUL R1.xyz, R0, R1;
MAX R1.w, R1, c[23].x;
MUL R2.x, R2, c[24];
POW R0.x, R1.w, R2.x;
MUL R0.z, R0.x, R1.y;
TEX R0.x, R5.zwzw, texture[3], 2D;
ADD R0.x, -R0, c[23].y;
ADD R2.xy, fragment.texcoord[0].zwzw, c[13].x;
MAX R0.w, R0, c[23].x;
MUL R2.xy, R2, c[14].x;
MUL_SAT R1.w, R0.x, c[8].x;
TEX R0.xy, R2, texture[6], 2D;
ADD R0.x, R0, R0.y;
ADD R2.xyz, -R5.y, c[7];
MAD R2.xyz, R1.w, R2, c[23].y;
MUL R1.xyz, R1, R2;
MAX R0.y, R5.x, c[15].x;
ADD R0.x, R0, -c[23].w;
MAD_SAT R0.x, R0, R0.y, c[24].y;
ADD R0.x, -R0, c[23].y;
MUL R0.y, R0.x, c[15].x;
MOV R0.x, c[12];
ADD R2.xyz, -R5.y, c[16];
MAD R2.xyz, R0.y, R2, c[23].y;
SLT R0.x, c[23].w, R0;
ABS R0.x, R0;
MUL R2.xyz, R1, R2;
CMP R0.x, -R0, c[23], c[23].y;
CMP R2.xyz, -R0.x, R1, R2;
MOV R1.xyz, c[5];
MUL R2.xyz, R2, c[0];
ADD R1.xyz, -R1, c[4];
MAD R1.xyz, fragment.color.primary.x, R1, c[5];
MUL R1.xyz, R1, c[1];
MUL R2.xyz, R2, R0.w;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
TEX R0.w, R0.x, texture[7], 2D;
MUL R1.xyz, R1, c[0];
MUL R0.w, R0, c[23].z;
MAD R0.xyz, R1, R0.z, R2;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, c[23].x;
END
# 151 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 146 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c23, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c24, -0.50000000, -1.00000000, 0.50000000, 1.00000000
def c25, 128.00000000, 0.02500000, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4.xyz
texld r4.yw, v0, s2
mad_pp r4.xy, r4.wyzw, c23.z, c23.w
mov r0.w, c20.x
mov r0.z, c19.x
mov r5.z, c23.x
mov r5.xy, c11.x
abs r4.w, c9.x
mov r0.x, c21
mov r0.y, c22.x
mad r0.xy, v0.zwzw, r0, r0.zwzw
texld r1.yw, r0, s4
mad_pp r1.xy, r1.wyzw, c23.z, c23.w
mul_pp r0.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.z, r0, r0.w
texld r0.x, r0, s3
add_pp r0.z, -r0, c23.y
rsq_pp r0.z, r0.z
rcp_pp r1.z, r0.z
add r2.xyz, r1, c24.xxyw
mul r2.xyz, r2, c10.x
mov r0.z, c10.x
add r2.xyz, r2, c24.zzww
add r0.z, c23.w, r0
cmp r1.xyz, -r0.z, r2, r1
add r0.x, -r0, c23.y
mov r2.xy, c10.x
mov r2.z, c23.x
mad r2.xyz, r1, r2, r1
dp3 r0.z, r2, r2
mul r1.xy, v0.zwzw, c14.x
texld r1.yw, r1, s6
mad_pp r3.xy, r1.wyzw, c23.z, c23.w
rsq r0.z, r0.z
mul r1.xyz, r0.z, r2
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
texld r2.yw, v0, s5
mad_pp r2.xy, r2.wyzw, c23.z, c23.w
mul_pp r3.zw, r2.xyxy, r2.xyxy
mul_pp r2.zw, r4.xyxy, r4.xyxy
add_pp_sat r1.w, r3.z, r3
add_pp_sat r2.z, r2, r2.w
add_pp r2.z, -r2, c23.y
rsq_pp r2.w, r2.z
add_pp r1.w, -r1, c23.y
rsq_pp r1.w, r1.w
add_pp r0.z, -r0, c23.y
rsq_pp r0.z, r0.z
rcp_pp r3.z, r0.z
rcp_pp r2.z, r1.w
rcp_pp r4.z, r2.w
add r4.xyz, r4, -r2
mad r2.xyz, v1.x, r4, r2
mov r4.xy, c9.x
mov r4.z, c23.x
mad r2.xyz, r2, r4, r1
dp3 r0.w, r2, r2
mul r4.xyz, r3, r5
rsq r0.z, r0.w
mad r4.xyz, r0.z, r2, r4
mad r5.xyz, r3, r5, r1
dp3 r1.w, r4, r4
dp3 r0.w, r5, r5
rsq r1.w, r1.w
mul r3.xyz, r1.w, r4
rsq r0.w, r0.w
mul r4.xyz, r0.w, r5
cmp r0.w, -r4, c23.x, c23.y
abs r1.w, c11.x
cmp r3.w, -r1, c23.x, c23.y
mul_pp r2.w, r0, r3
cmp r4.w, -r4, c23.y, c23.x
cmp r1.w, -r1, c23.y, c23.x
mul_pp r0.w, r0, r1
abs_pp r2.w, r2
dp3_pp r1.w, v2, v2
mul_pp r3.w, r3, r4
cmp_pp r2.w, -r2, c23.y, c23.x
mul_pp r4.w, r2, r3
cmp_pp r3.xyz, -r4.w, r3, r4
mul r2.xyz, r0.z, r2
abs_pp r3.w, r3
cmp_pp r0.z, -r3.w, c23.y, c23.x
mul_pp r0.z, r2.w, r0
mul_pp r2.w, r0.z, r0
cmp_pp r4.xyz, -r2.w, r3, r2
rsq_pp r1.w, r1.w
mul_pp r2.xyz, r1.w, v2
abs_pp r1.w, r0
cmp_pp r1.w, -r1, c23.y, c23.x
mul_pp r0.z, r0, r1.w
cmp_pp r1.xyz, -r0.z, r4, r1
mul_sat r1.w, r0.x, c8.x
dp3_pp r0.w, v3, v3
rsq_pp r0.w, r0.w
mad_pp r3.xyz, r0.w, v3, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
mul_pp r3.xyz, r0.w, r3
dp3_pp r0.w, r1, r3
mov_pp r0.z, c18.x
add_pp r0.z, -c17.x, r0
mad_pp r0.z, v1.x, r0, c17.x
mov_pp r3.xyz, c6
add_pp r3.xyz, c23.w, r3
add r0.xy, v0.zwzw, c13.x
mul r0.xy, r0, c14.x
texld r0.xy, r0, s6
add r0.y, r0.x, r0
mul_pp r0.z, r0, c25.x
max_pp r0.w, r0, c23.x
pow r4, r0.w, r0.z
dp3_pp r0.w, r1, r2
texld r5.xyz, v0, s0
mul r4.yzw, r5.xxyz, c2.xxyz
texld r5.xyz, v0, s1
mad r5.xyz, r5, c3, -r4.yzww
mov r1.xyz, c7
add r1.xyz, c23.w, r1
mad r1.xyz, r1.w, r1, c23.y
mov r1.w, c15.x
mov r2.xyz, c16
mad_pp r3.xyz, v1.y, r3, c23.y
mad r5.xyz, v1.x, r5, r4.yzww
mul r3.xyz, r5, r3
mov r0.z, r4.x
mul r1.xyz, r3, r1
mul r0.z, r0, r3.y
max_pp r0.w, r0, c23.x
max r0.x, c23, r1.w
add r0.y, r0, c24.x
mad_sat r0.x, r0.y, r0, c25.y
add r0.x, -r0, c23.y
mul r0.x, r0, c15
add r2.xyz, c23.w, r2
mad r2.xyz, r0.x, r2, c23.y
mov r0.x, c12
mul r2.xyz, r1, r2
add_pp r0.x, c24, r0
cmp_pp r2.xyz, -r0.x, r1, r2
mov_pp r1.xyz, c4
mul_pp r2.xyz, r2, c0
add_pp r1.xyz, -c5, r1
mad_pp r1.xyz, v1.x, r1, c5
dp3 r0.x, v4, v4
mul_pp r1.xyz, r1, c1
texld r0.x, r0.x, s7
mul_pp r2.xyz, r2, r0.w
mul_pp r1.xyz, r1, c0
mul_pp r0.x, r0, c23.z
mad r1.xyz, r1, r0.z, r2
mul oC0.xyz, r1, r0.x
mov_pp oC0.w, c23.x
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
ConstBuffer "$Globals" 320 // 276 used size, 27 vars
Vector 16 [_LightColor0] 4
Vector 32 [_SpecColor] 4
Vector 112 [_Color] 3
Vector 128 [_TrimColor] 3
Vector 144 [_TrimSpecColor] 3
Vector 160 [_MainSpecColor] 3
Vector 176 [_VertexMaskColor] 3
Vector 192 [_BodyOcclusionColor] 3
Float 204 [_BodyOcclusionPower]
Float 208 [_BumpPower]
Float 212 [_BodyBumpPower]
Float 216 [_BumpDetailPower]
Float 220 [_DetailTexEnable]
Float 224 [_DetailTexOffset]
Float 228 [_DetailTexScale]
Float 232 [_DetailTexPower]
Vector 240 [_DetailTexColor] 3
Float 252 [_Shininess]
Float 256 [_TrimShininess]
Float 260 [_AtlasOffsetX]
Float 264 [_AtlasOffsetY]
Float 268 [_AtlasScaleX]
Float 272 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 7
SetTexture 2 [_BumpTrimTex] 2D 6
SetTexture 3 [_BodyOcclusionTex] 2D 5
SetTexture 4 [_BodyBumpTex] 2D 4
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_BumpDetailTex] 2D 3
SetTexture 7 [_LightTexture0] 2D 0
// 122 instructions, 6 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 2 uint
// TEX 9 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddhejegdflbdbcffahgchckijlmgllofeabaaaaaakmbbaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
iibaaaaaeaaaaaaaccaeaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaagaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaadcaaaaap
dcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaa
aaaaaaaabaaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaa
aaaaaaaabbaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaa
aaaaaaaabaaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaafaaaaaaaaaaaaaiicaabaaaaaaaaaaaakaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaamaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaaacaaaaaa
hgapbaaaacaaaaaaapaaaaahbcaabaaaabaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaacaaaaaaakaabaaaabaaaaaaaaaaaaakhcaabaaaabaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaamalpaaaamalpaaaaialpaaaaaaaaaaaaaaak
hcaabaaaacaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaadcaaaaanhcaabaaaabaaaaaafgifcaaaaaaaaaaaanaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaiadpaaaaaaaabnaaaaaiicaabaaa
abaaaaaaabeaaaaaaaaaiadpbkiacaaaaaaaaaaaanaaaaaadhaaaaajhcaabaaa
abaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadgaaaaaf
ecaabaaaacaaaaaaabeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaafgijcaaa
aaaaaaaaanaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaagacbaaa
acaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaagbcaabaaa
adaaaaaaakiacaaaaaaaaaaaanaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaa
egacbaaaacaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaahocaabaaa
adaaaaaaagajbaaaaaaaaaaaagaabaaaadaaaaaabiaaaaaldcaabaaaaeaaaaaa
igiacaaaaaaaaaaaanaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
djaaaaalmcaabaaaaeaaaaaakgiccaaaaaaaaaaaanaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaaaeaaaaaa
egaabaaaaeaaaaaaabaaaaahecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaa
aeaaaaaadhaaaaajhcaabaaaacaaaaaafgafbaaaaeaaaaaajgahbaaaadaaaaaa
egacbaaaacaaaaaadiaaaaaigcaabaaaadaaaaaakgblbaaaabaaaaaafgifcaaa
aaaaaaaaaoaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaa
agaaaaaaaagabaaaadaaaaaadcaaaaapgcaabaaaadaaaaaapganbaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaaaaaaaaaialp
aaaaialpaaaaaaaadiaaaaahdcaabaaaafaaaaaapgapbaaaacaaaaaajgafbaaa
adaaaaaadgaaaaafecaabaaaafaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaegacbaaaafaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaagaabaaaadaaaaaaegacbaaaafaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaadhaaaaajhcaabaaaabaaaaaaagaabaaaaeaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaadhaaaaaj
hcaabaaaaaaaaaaakgakbaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaaagbjbaaaadaaaaaadcaaaaaj
hcaabaaaacaaaaaaegbcbaaaaeaaaaaaagaabaaaabaaaaaajgahbaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaa
acaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaa
deaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaacpaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaakccaabaaaaaaaaaaadkiacaia
ebaaaaaaaaaaaaaaapaaaaaaakiacaaaaaaaaaaabaaaaaaadcaaaaakccaabaaa
aaaaaaaaakbabaaaacaaaaaabkaabaaaaaaaaaaadkiacaaaaaaaaaaaapaaaaaa
diaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaaaeddiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaabjaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaadiaaaaaiocaabaaaabaaaaaa
agajbaaaadaaaaaaagijcaaaaaaaaaaaahaaaaaadcaaaaalhcaabaaaacaaaaaa
egacbaaaacaaaaaaegiccaaaaaaaaaaaaiaaaaaajgahbaiaebaaaaaaabaaaaaa
dcaaaaajocaabaaaabaaaaaaagbabaaaacaaaaaaagajbaaaacaaaaaafgaobaaa
abaaaaaaaaaaaaalhcaabaaaacaaaaaaegiccaaaaaaaaaaaalaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaafgbfbaaa
acaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagajbaaaacaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaaaaaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaegiccaiaebaaaaaaaaaaaaaaakaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaaakaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegacbaaa
acaaaaaaaaaaaaalhcaabaaaacaaaaaaegiccaaaaaaaaaaaamaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagajbaaaacaaaaaaaaaaaaai
dcaabaaaacaaaaaaogbkbaaaabaaaaaaagiacaaaaaaaaaaaaoaaaaaadiaaaaai
dcaabaaaacaaaaaaegaabaaaacaaaaaafgifcaaaaaaaaaaaaoaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaagaaaaaaaagabaaaadaaaaaa
aaaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaalpdeaaaaaibcaabaaa
acaaaaaackiacaaaaaaaaaaaaoaaaaaaabeaaaaaaaaaaaaadccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaacaaaaaaabeaaaaamnmmmmdmaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaaaoaaaaaaaaaaaaal
hcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaa
acaaaaaajgahbaaaabaaaaaaegacbaaaacaaaaaadbaaaaaiicaabaaaaaaaaaaa
abeaaaaaaaaaaadpdkiacaaaaaaaaaaaanaaaaaadhaaaaajocaabaaaabaaaaaa
pgapbaaaaaaaaaaaagajbaaaacaaaaaafgaobaaaabaaaaaadiaaaaaiocaabaaa
abaaaaaafgaobaaaabaaaaaaagijcaaaaaaaaaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaajgahbaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaa
abaaaaaapgapbaaaaaaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 146 ALU, 8 TEX
PARAM c[25] = { program.local[0..22],
		{ 0, 1, 2, 0.5 },
		{ 128, 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MOV R5.xy, c[23];
MAD R3.xy, R3.wyzw, c[23].z, -c[23].y;
MOV R0.z, c[21].x;
MOV R0.w, c[22].x;
MOV R0.y, c[20].x;
MOV R0.x, c[19];
MAD R5.zw, fragment.texcoord[0], R0, R0.xyxy;
TEX R0.yw, R5.zwzw, texture[4], 2D;
MAD R0.xy, R0.wyzw, c[23].z, -c[23].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.z, -R0, c[23].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[23].wwyw;
MUL R1.xyz, R1, c[10].x;
ADD R0.w, -R5.y, c[10].x;
ADD R1.xyz, R1, c[23].wwyw;
CMP R1.xyz, -R0.w, R0, R1;
MOV R0.xy, c[10].x;
MOV R0.z, c[23].x;
MAD R0.xyz, R1, R0, R1;
DP3 R0.w, R0, R0;
MUL R1.xy, fragment.texcoord[0].zwzw, c[14].x;
TEX R1.yw, R1, texture[6], 2D;
MAD R1.xy, R1.wyzw, c[23].z, -c[23].y;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R0;
TEX R0.yw, fragment.texcoord[0], texture[5], 2D;
MAD R0.xy, R0.wyzw, c[23].z, -c[23].y;
MUL R3.zw, R0.xyxy, R0.xyxy;
ADD_SAT R2.w, R3.z, R3;
MUL R0.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.w, -R2, c[23].y;
MUL R1.zw, R1.xyxy, R1.xyxy;
RSQ R2.w, R0.w;
ADD R0.z, -R0, c[23].y;
RSQ R0.w, R0.z;
RCP R0.z, R2.w;
RCP R3.z, R0.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
ADD_SAT R0.w, R1.z, R1;
MOV R0.xy, c[9].x;
MOV R0.z, c[23].x;
MAD R3.xyz, R3, R0, R2;
ADD R0.w, -R0, c[23].y;
RSQ R0.x, R0.w;
RCP R1.z, R0.x;
DP3 R0.w, R3, R3;
RSQ R0.w, R0.w;
ABS R2.w, c[11].x;
ABS R3.w, c[9].x;
MOV R0.z, c[23].x;
MOV R0.xy, c[11].x;
MUL R4.xyz, R1, R0;
MAD R0.xyz, R1, R0, R2;
MAD R4.xyz, R0.w, R3, R4;
DP3 R1.y, R4, R4;
DP3 R1.x, R0, R0;
RSQ R1.w, R1.x;
MUL R0.xyz, R1.w, R0;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R4;
CMP R1.w, -R3, c[23].y, c[23].x;
CMP R4.x, -R2.w, c[23].y, c[23];
MUL R4.y, R1.w, R4.x;
CMP R4.z, -R3.w, c[23].x, c[23].y;
ABS R3.w, R4.y;
MUL R4.x, R4, R4.z;
CMP R3.w, -R3, c[23].x, c[23].y;
MUL R4.y, R3.w, R4.x;
CMP R0.xyz, -R4.y, R0, R1;
MUL R1.xyz, R0.w, R3;
ABS R0.w, R4.x;
CMP R3.x, -R2.w, c[23], c[23].y;
CMP R2.w, -R0, c[23].x, c[23].y;
MUL R0.w, R1, R3.x;
MUL R1.w, R3, R2;
MUL R2.w, R1, R0;
CMP R0.xyz, -R2.w, R1, R0;
DP3 R2.w, fragment.texcoord[2], fragment.texcoord[2];
ABS R0.w, R0;
CMP R0.w, -R0, c[23].x, c[23].y;
MUL R0.w, R1, R0;
CMP R0.xyz, -R0.w, R2, R0;
RSQ R2.w, R2.w;
MOV R1.xyz, fragment.texcoord[1];
MAD R1.xyz, R2.w, fragment.texcoord[2], R1;
DP3 R2.w, R1, R1;
RSQ R2.w, R2.w;
MUL R2.xyz, R2.w, R1;
DP3 R0.w, R0, R2;
DP3 R0.y, R0, fragment.texcoord[1];
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R2.xyz, R1, c[2];
TEX R1.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R1.xyz, R1, c[3], -R2;
MAD R1.xyz, fragment.color.primary.x, R1, R2;
MOV R2.x, c[17];
TEX R0.x, R5.zwzw, texture[3], 2D;
ADD R0.x, -R0, c[23].y;
ADD R2.w, -R2.x, c[18].x;
MOV R1.w, c[23].y;
ADD R2.xyz, -R1.w, c[6];
MAD R2.xyz, fragment.color.primary.y, R2, c[23].y;
MUL R1.xyz, R1, R2;
MAD R1.w, fragment.color.primary.x, R2, c[17].x;
MUL_SAT R0.z, R0.x, c[8].x;
MUL R1.w, R1, c[24].x;
MAX R0.w, R0, c[23].x;
POW R0.w, R0.w, R1.w;
MUL R0.w, R0, R1.y;
MAX R1.w, R0.y, c[23].x;
ADD R2.xy, fragment.texcoord[0].zwzw, c[13].x;
MUL R0.xy, R2, c[14].x;
TEX R0.xy, R0, texture[6], 2D;
ADD R0.x, R0, R0.y;
ADD R2.xyz, -R5.y, c[7];
MAD R2.xyz, R0.z, R2, c[23].y;
MAX R0.y, R5.x, c[15].x;
ADD R0.x, R0, -c[23].w;
MAD_SAT R2.w, R0.x, R0.y, c[24].y;
MUL R0.xyz, R1, R2;
ADD R1.x, -R2.w, c[23].y;
MUL R1.x, R1, c[15];
ADD R2.xyz, -R5.y, c[16];
MAD R2.xyz, R1.x, R2, c[23].y;
MOV R1.x, c[12];
SLT R2.w, c[23], R1.x;
MOV R1.xyz, c[5];
ABS R2.w, R2;
ADD R1.xyz, -R1, c[4];
MAD R1.xyz, fragment.color.primary.x, R1, c[5];
MUL R2.xyz, R0, R2;
CMP R2.w, -R2, c[23].x, c[23].y;
CMP R0.xyz, -R2.w, R0, R2;
MUL R0.xyz, R0, c[0];
MUL R2.xyz, R0, R1.w;
MUL R1.xyz, R1, c[1];
MUL R0.xyz, R1, c[0];
MAD R0.xyz, R0, R0.w, R2;
MUL result.color.xyz, R0, c[23].z;
MOV result.color.w, c[23].x;
END
# 146 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
"ps_3_0
; 142 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c23, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c24, -0.50000000, -1.00000000, 0.50000000, 1.00000000
def c25, 128.00000000, 0.02500000, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
texld r3.yw, v0, s2
mad_pp r3.xy, r3.wyzw, c23.z, c23.w
mov r0.z, c21.x
mov r0.w, c22.x
mov r0.y, c20.x
mov r0.x, c19
mad r5.xy, v0.zwzw, r0.zwzw, r0
texld r0.yw, r5, s4
mad_pp r0.xy, r0.wyzw, c23.z, c23.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c23.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
add r1.xyz, r0, c24.xxyw
mul r1.xyz, r1, c10.x
mov r0.w, c10.x
add r0.w, c23, r0
add r1.xyz, r1, c24.zzww
cmp r1.xyz, -r0.w, r1, r0
mov r0.xy, c10.x
mov r0.z, c23.x
mad r2.xyz, r1, r0, r1
mul r0.xy, v0.zwzw, c14.x
texld r0.yw, r0, s6
mad_pp r1.xy, r0.wyzw, c23.z, c23.w
dp3 r0.z, r2, r2
rsq r0.x, r0.z
mul_pp r1.zw, r1.xyxy, r1.xyxy
mul r2.xyz, r0.x, r2
texld r0.yw, v0, s5
mad_pp r0.xy, r0.wyzw, c23.z, c23.w
mul_pp r3.zw, r0.xyxy, r0.xyxy
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp_sat r2.w, r3.z, r3
add_pp r0.w, -r2, c23.y
rsq_pp r2.w, r0.w
add_pp r0.z, -r0, c23.y
rsq_pp r0.w, r0.z
rcp_pp r0.z, r2.w
rcp_pp r3.z, r0.w
add r3.xyz, r3, -r0
mad r3.xyz, v1.x, r3, r0
add_pp_sat r0.w, r1.z, r1
mov r0.xy, c9.x
mov r0.z, c23.x
mad r3.xyz, r3, r0, r2
add_pp r0.w, -r0, c23.y
rsq_pp r0.x, r0.w
rcp_pp r1.z, r0.x
dp3 r0.w, r3, r3
rsq r0.w, r0.w
mov r0.z, c23.x
mov r0.xy, c11.x
mul r4.xyz, r1, r0
mad r0.xyz, r1, r0, r2
mad r4.xyz, r0.w, r3, r4
dp3 r1.x, r4, r4
dp3 r1.y, r0, r0
rsq r1.w, r1.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, r4
abs r2.w, c11.x
cmp r4.x, -r2.w, c23, c23.y
mul r0.xyz, r1.w, r0
abs r4.y, c9.x
cmp r1.w, -r4.y, c23.x, c23.y
mul_pp r3.w, r1, r4.x
cmp r4.y, -r4, c23, c23.x
cmp r2.w, -r2, c23.y, c23.x
abs_pp r3.w, r3
mul_pp r4.x, r4, r4.y
cmp_pp r3.w, -r3, c23.y, c23.x
mul_pp r4.y, r3.w, r4.x
cmp_pp r0.xyz, -r4.y, r1, r0
mul r1.xyz, r0.w, r3
abs_pp r0.w, r4.x
cmp_pp r0.w, -r0, c23.y, c23.x
mul_pp r1.w, r1, r2
mul_pp r0.w, r3, r0
mul_pp r2.w, r0, r1
cmp_pp r1.xyz, -r2.w, r0, r1
abs_pp r1.w, r1
cmp_pp r1.w, -r1, c23.y, c23.x
mul_pp r0.w, r0, r1
cmp_pp r1.xyz, -r0.w, r1, r2
mov_pp r2.xyz, c6
add_pp r3.xyz, c23.w, r2
dp3_pp r2.w, v3, v3
mov_pp r1.w, c18.x
rsq_pp r2.w, r2.w
mov_pp r0.xyz, v2
mad_pp r0.xyz, r2.w, v3, r0
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r0.x, r1, r0
add_pp r1.w, -c17.x, r1
mad_pp r0.w, v1.x, r1, c17.x
dp3_pp r1.y, r1, v2
mul_pp r0.y, r0.w, c25.x
max_pp r0.x, r0, c23
pow r4, r0.x, r0.y
texld r0.xyz, v0, s0
mul r2.xyz, r0, c2
texld r0.xyz, v0, s1
mad r0.xyz, r0, c3, -r2
mad r0.xyz, v1.x, r0, r2
texld r2.x, r5, s3
add r1.x, -r2, c23.y
mad_pp r3.xyz, v1.y, r3, c23.y
mov r2.xyz, c7
mul_sat r1.z, r1.x, c8.x
max_pp r1.w, r1.y, c23.x
add r1.xy, v0.zwzw, c13.x
add r2.xyz, c23.w, r2
mad r2.xyz, r1.z, r2, c23.y
mul r1.xy, r1, c14.x
texld r1.xy, r1, s6
add r1.x, r1, r1.y
mov r1.z, c15.x
mul r0.xyz, r0, r3
mov r0.w, r4.x
mul r0.w, r0, r0.y
mul r0.xyz, r0, r2
mov_pp r2.xyz, c4
max r1.y, c23.x, r1.z
add r1.x, r1, c24
mad_sat r2.w, r1.x, r1.y, c25.y
mov r1.xyz, c16
add r2.w, -r2, c23.y
mul r2.w, r2, c15.x
add r1.xyz, c23.w, r1
mad r1.xyz, r2.w, r1, c23.y
mov r2.w, c12.x
mul r1.xyz, r0, r1
add_pp r2.w, c24.x, r2
cmp_pp r0.xyz, -r2.w, r0, r1
add_pp r2.xyz, -c5, r2
mad_pp r1.xyz, v1.x, r2, c5
mul_pp r0.xyz, r0, c0
mul_pp r1.xyz, r1, c1
mul_pp r0.xyz, r0, r1.w
mul_pp r1.xyz, r1, c0
mad r0.xyz, r1, r0.w, r0
mul oC0.xyz, r0, c23.z
mov_pp oC0.w, c23.x
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 256 // 212 used size, 26 vars
Vector 16 [_LightColor0] 4
Vector 32 [_SpecColor] 4
Vector 48 [_Color] 3
Vector 64 [_TrimColor] 3
Vector 80 [_TrimSpecColor] 3
Vector 96 [_MainSpecColor] 3
Vector 112 [_VertexMaskColor] 3
Vector 128 [_BodyOcclusionColor] 3
Float 140 [_BodyOcclusionPower]
Float 144 [_BumpPower]
Float 148 [_BodyBumpPower]
Float 152 [_BumpDetailPower]
Float 156 [_DetailTexEnable]
Float 160 [_DetailTexOffset]
Float 164 [_DetailTexScale]
Float 168 [_DetailTexPower]
Vector 176 [_DetailTexColor] 3
Float 188 [_Shininess]
Float 192 [_TrimShininess]
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [_BumpDetailTex] 2D 2
// 116 instructions, 6 temp regs, 0 temp arrays:
// ALU 74 float, 0 int, 2 uint
// TEX 8 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgcapnceabkedlmgncbmphhiaokjhopmcabaaaaaamebaaaaaadaaaaaa
cmaaaaaanaaaaaaaaeabaaaaejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefcliapaaaaeaaaaaaaooadaaaafjaaaaaeegiocaaaaaaaaaaa
aoaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaa
agaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaafaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaadcaaaaap
dcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaa
aaaaaaaaamaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaa
aaaaaaaaanaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaaaaaaaaiicaabaaaaaaaaaaaakaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaaiaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaaacaaaaaa
hgapbaaaacaaaaaaapaaaaahbcaabaaaabaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaacaaaaaaakaabaaaabaaaaaaaaaaaaakhcaabaaaabaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaamalpaaaamalpaaaaialpaaaaaaaaaaaaaaak
hcaabaaaacaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaadcaaaaanhcaabaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaiadpaaaaaaaabnaaaaaiicaabaaa
abaaaaaaabeaaaaaaaaaiadpbkiacaaaaaaaaaaaajaaaaaadhaaaaajhcaabaaa
abaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadgaaaaaf
ecaabaaaacaaaaaaabeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaafgijcaaa
aaaaaaaaajaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaagacbaaa
acaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaagbcaabaaa
adaaaaaaakiacaaaaaaaaaaaajaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaa
egacbaaaacaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaahocaabaaa
adaaaaaaagajbaaaaaaaaaaaagaabaaaadaaaaaabiaaaaaldcaabaaaaeaaaaaa
igiacaaaaaaaaaaaajaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
djaaaaalmcaabaaaaeaaaaaakgiccaaaaaaaaaaaajaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaaaeaaaaaa
egaabaaaaeaaaaaaabaaaaahecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaa
aeaaaaaadhaaaaajhcaabaaaacaaaaaafgafbaaaaeaaaaaajgahbaaaadaaaaaa
egacbaaaacaaaaaadiaaaaaigcaabaaaadaaaaaakgblbaaaabaaaaaafgifcaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaa
agaaaaaaaagabaaaacaaaaaadcaaaaapgcaabaaaadaaaaaapganbaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaaaaaaaaaialp
aaaaialpaaaaaaaadiaaaaahdcaabaaaafaaaaaapgapbaaaacaaaaaajgafbaaa
adaaaaaadgaaaaafecaabaaaafaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaegacbaaaafaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaagaabaaaadaaaaaaegacbaaaafaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaadhaaaaajhcaabaaaabaaaaaaagaabaaaaeaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaadhaaaaaj
hcaabaaaaaaaaaaakgakbaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajhcaabaaaabaaaaaaegbcbaaa
aeaaaaaaagaabaaaabaaaaaaegbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaadaaaaaadeaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaadeaaaaahccaabaaaaaaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaaaaaaaaakecaabaaaaaaaaaaadkiacaiaebaaaaaaaaaaaaaaalaaaaaa
akiacaaaaaaaaaaaamaaaaaadcaaaaakecaabaaaaaaaaaaaakbabaaaacaaaaaa
ckaabaaaaaaaaaaadkiacaaaaaaaaaaaalaaaaaadiaaaaahecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaabjaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
agaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaaadaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
aaaaaaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agbabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegiccaaaaaaaaaaaahaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadcaaaaamhcaabaaaacaaaaaafgbfbaaaacaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
afaaaaaaegiccaiaebaaaaaaaaaaaaaaagaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaagaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaacaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaadiaaaaah
hcaabaaaacaaaaaafgafbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
adaaaaaaegiccaaaaaaaaaaaaiaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadcaaaaamocaabaaaaaaaaaaapgapbaaaaaaaaaaaagajbaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaiadpaaaaiadpdiaaaaahocaabaaaaaaaaaaa
fgaobaaaaaaaaaaaagajbaaaabaaaaaaaaaaaaaidcaabaaaabaaaaaaogbkbaaa
abaaaaaaagiacaaaaaaaaaaaakaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaafgifcaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaagaaaaaaaagabaaaacaaaaaaaaaaaaahbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaalpdeaaaaaiccaabaaaabaaaaaackiacaaaaaaaaaaa
akaaaaaaabeaaaaaaaaaaaaadccaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaamnmmmmdmaaaaaaaibcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackiacaaaaaaaaaaaakaaaaaaaaaaaaalocaabaaaabaaaaaaagijcaaa
aaaaaaaaalaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaialpdcaaaaam
hcaabaaaabaaaaaaagaabaaaabaaaaaajgahbaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaabaaaaaajgahbaaaaaaaaaaa
egacbaaaabaaaaaadbaaaaaiicaabaaaabaaaaaaabeaaaaaaaaaaadpdkiacaaa
aaaaaaaaajaaaaaadhaaaaajocaabaaaaaaaaaaapgapbaaaabaaaaaaagajbaaa
abaaaaaafgaobaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgaobaaaaaaaaaaa
agijcaaaaaaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaajgahbaaaaaaaaaaa
agaabaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 157 ALU, 10 TEX
PARAM c[25] = { program.local[0..22],
		{ 0, 1, 2, 0.5 },
		{ 128, 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MOV R5.xy, c[23];
MAD R3.xy, R3.wyzw, c[23].z, -c[23].y;
MOV R0.z, c[21].x;
MOV R0.w, c[22].x;
MOV R0.y, c[20].x;
MOV R0.x, c[19];
MAD R5.zw, fragment.texcoord[0], R0, R0.xyxy;
TEX R0.yw, R5.zwzw, texture[4], 2D;
MAD R0.xy, R0.wyzw, c[23].z, -c[23].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.z, -R0, c[23].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[23].wwyw;
MUL R1.xyz, R1, c[10].x;
ADD R0.w, -R5.y, c[10].x;
ADD R1.xyz, R1, c[23].wwyw;
CMP R1.xyz, -R0.w, R0, R1;
MOV R0.xy, c[10].x;
MOV R0.z, c[23].x;
MAD R0.xyz, R1, R0, R1;
DP3 R0.w, R0, R0;
MUL R1.xy, fragment.texcoord[0].zwzw, c[14].x;
TEX R1.yw, R1, texture[6], 2D;
MAD R1.xy, R1.wyzw, c[23].z, -c[23].y;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R0;
TEX R0.yw, fragment.texcoord[0], texture[5], 2D;
MAD R0.xy, R0.wyzw, c[23].z, -c[23].y;
MUL R3.zw, R0.xyxy, R0.xyxy;
ADD_SAT R2.w, R3.z, R3;
MUL R0.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.w, -R2, c[23].y;
MUL R1.zw, R1.xyxy, R1.xyxy;
RSQ R2.w, R0.w;
ADD R0.z, -R0, c[23].y;
RSQ R0.w, R0.z;
RCP R0.z, R2.w;
RCP R3.z, R0.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
ADD_SAT R0.w, R1.z, R1;
MOV R0.xy, c[9].x;
MOV R0.z, c[23].x;
MAD R3.xyz, R3, R0, R2;
ADD R0.w, -R0, c[23].y;
RSQ R0.x, R0.w;
DP3 R0.w, R3, R3;
RCP R1.z, R0.x;
RSQ R0.w, R0.w;
ABS R3.w, c[9].x;
MOV R0.z, c[23].x;
MOV R0.xy, c[11].x;
MUL R4.xyz, R1, R0;
MAD R0.xyz, R1, R0, R2;
MAD R4.xyz, R0.w, R3, R4;
DP3 R1.y, R4, R4;
DP3 R1.x, R0, R0;
RSQ R1.w, R1.x;
MUL R0.xyz, R1.w, R0;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R4;
ABS R2.w, c[11].x;
CMP R4.x, -R2.w, c[23].y, c[23];
CMP R1.w, -R3, c[23].y, c[23].x;
MUL R4.y, R1.w, R4.x;
CMP R4.z, -R3.w, c[23].x, c[23].y;
ABS R3.w, R4.y;
CMP R2.w, -R2, c[23].x, c[23].y;
MUL R1.w, R1, R2;
MUL R4.x, R4, R4.z;
CMP R3.w, -R3, c[23].x, c[23].y;
MUL R4.y, R3.w, R4.x;
CMP R0.xyz, -R4.y, R0, R1;
MUL R1.xyz, R0.w, R3;
ABS R4.x, R4;
CMP R0.w, -R4.x, c[23].x, c[23].y;
MUL R0.w, R3, R0;
MUL R2.w, R0, R1;
CMP R0.xyz, -R2.w, R1, R0;
DP3 R3.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R3.x, R3.x;
DP3 R2.w, fragment.texcoord[2], fragment.texcoord[2];
ABS R1.w, R1;
CMP R1.w, -R1, c[23].x, c[23].y;
MUL R0.w, R0, R1;
CMP R0.xyz, -R0.w, R2, R0;
MUL R1.xyz, R3.x, fragment.texcoord[1];
DP3 R0.w, R0, R1;
RSQ R2.w, R2.w;
MAD R3.xyz, R2.w, fragment.texcoord[2], R1;
DP3 R2.w, R3, R3;
RSQ R1.w, R2.w;
MUL R2.xyz, R1.w, R3;
DP3 R1.w, R0, R2;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R1.xyz, R1, c[2];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[3], -R1;
MAD R0.xyz, fragment.color.primary.x, R0, R1;
MOV R1.y, c[17].x;
ADD R2.x, -R1.y, c[18];
MOV R1.x, c[23].y;
ADD R1.xyz, -R1.x, c[6];
MAD R2.x, fragment.color.primary, R2, c[17];
MAD R1.xyz, fragment.color.primary.y, R1, c[23].y;
MUL R1.xyz, R0, R1;
MAX R1.w, R1, c[23].x;
MUL R2.x, R2, c[24];
POW R0.x, R1.w, R2.x;
MUL R0.z, R0.x, R1.y;
TEX R0.x, R5.zwzw, texture[3], 2D;
ADD R0.x, -R0, c[23].y;
ADD R2.xy, fragment.texcoord[0].zwzw, c[13].x;
MUL_SAT R1.w, R0.x, c[8].x;
MUL R2.xy, R2, c[14].x;
TEX R0.xy, R2, texture[6], 2D;
ADD R0.x, R0, R0.y;
ADD R2.xyz, -R5.y, c[7];
MAD R2.xyz, R1.w, R2, c[23].y;
MUL R1.xyz, R1, R2;
DP3 R1.w, fragment.texcoord[3], fragment.texcoord[3];
MAX R0.w, R0, c[23].x;
MAX R0.y, R5.x, c[15].x;
ADD R0.x, R0, -c[23].w;
MAD_SAT R0.x, R0, R0.y, c[24].y;
ADD R0.x, -R0, c[23].y;
MUL R0.y, R0.x, c[15].x;
MOV R0.x, c[12];
ADD R2.xyz, -R5.y, c[16];
MAD R2.xyz, R0.y, R2, c[23].y;
SLT R0.x, c[23].w, R0;
ABS R0.x, R0;
MUL R2.xyz, R1, R2;
CMP R0.x, -R0, c[23], c[23].y;
CMP R2.xyz, -R0.x, R1, R2;
MOV R1.xyz, c[5];
MUL R2.xyz, R2, c[0];
ADD R1.xyz, -R1, c[4];
MAD R1.xyz, fragment.color.primary.x, R1, c[5];
RCP R0.x, fragment.texcoord[3].w;
MUL R1.xyz, R1, c[1];
MAD R0.xy, fragment.texcoord[3], R0.x, c[23].w;
MUL R2.xyz, R2, R0.w;
TEX R0.w, R0, texture[7], 2D;
SLT R0.x, c[23], fragment.texcoord[3].z;
MUL R0.x, R0, R0.w;
TEX R1.w, R1.w, texture[8], 2D;
MUL R0.x, R0, R1.w;
MUL R0.w, R0.x, c[23].z;
MUL R1.xyz, R1, c[0];
MAD R0.xyz, R1, R0.z, R2;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, c[23].x;
END
# 157 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
"ps_3_0
; 151 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c23, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c24, -0.50000000, -1.00000000, 0.50000000, 1.00000000
def c25, 128.00000000, 0.02500000, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4
texld r4.yw, v0, s2
mad_pp r4.xy, r4.wyzw, c23.z, c23.w
mov r0.w, c20.x
mov r0.z, c19.x
mov r5.z, c23.x
mov r5.xy, c11.x
abs r4.w, c9.x
mov r0.x, c21
mov r0.y, c22.x
mad r0.xy, v0.zwzw, r0, r0.zwzw
texld r1.yw, r0, s4
mad_pp r1.xy, r1.wyzw, c23.z, c23.w
mul_pp r0.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.z, r0, r0.w
texld r0.x, r0, s3
add_pp r0.z, -r0, c23.y
rsq_pp r0.z, r0.z
rcp_pp r1.z, r0.z
add r2.xyz, r1, c24.xxyw
mul r2.xyz, r2, c10.x
mov r0.z, c10.x
add r2.xyz, r2, c24.zzww
add r0.z, c23.w, r0
cmp r1.xyz, -r0.z, r2, r1
add r0.x, -r0, c23.y
mov r2.xy, c10.x
mov r2.z, c23.x
mad r2.xyz, r1, r2, r1
dp3 r0.z, r2, r2
mul r1.xy, v0.zwzw, c14.x
texld r1.yw, r1, s6
mad_pp r3.xy, r1.wyzw, c23.z, c23.w
rsq r0.z, r0.z
mul r1.xyz, r0.z, r2
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
texld r2.yw, v0, s5
mad_pp r2.xy, r2.wyzw, c23.z, c23.w
mul_pp r3.zw, r2.xyxy, r2.xyxy
mul_pp r2.zw, r4.xyxy, r4.xyxy
add_pp_sat r1.w, r3.z, r3
add_pp_sat r2.z, r2, r2.w
add_pp r2.z, -r2, c23.y
rsq_pp r2.w, r2.z
add_pp r1.w, -r1, c23.y
rsq_pp r1.w, r1.w
add_pp r0.z, -r0, c23.y
rsq_pp r0.z, r0.z
rcp_pp r3.z, r0.z
rcp_pp r2.z, r1.w
rcp_pp r4.z, r2.w
add r4.xyz, r4, -r2
mad r2.xyz, v1.x, r4, r2
mov r4.xy, c9.x
mov r4.z, c23.x
mad r2.xyz, r2, r4, r1
dp3 r0.w, r2, r2
mul r4.xyz, r3, r5
rsq r0.z, r0.w
mad r4.xyz, r0.z, r2, r4
mad r5.xyz, r3, r5, r1
dp3 r1.w, r4, r4
dp3 r0.w, r5, r5
rsq r1.w, r1.w
mul r3.xyz, r1.w, r4
rsq r0.w, r0.w
mul r4.xyz, r0.w, r5
cmp r0.w, -r4, c23.x, c23.y
abs r1.w, c11.x
cmp r3.w, -r1, c23.x, c23.y
mul_pp r2.w, r0, r3
cmp r4.w, -r4, c23.y, c23.x
cmp r1.w, -r1, c23.y, c23.x
mul_pp r0.w, r0, r1
abs_pp r2.w, r2
dp3_pp r1.w, v2, v2
mul_pp r3.w, r3, r4
cmp_pp r2.w, -r2, c23.y, c23.x
mul_pp r4.w, r2, r3
cmp_pp r3.xyz, -r4.w, r3, r4
mul r2.xyz, r0.z, r2
abs_pp r3.w, r3
cmp_pp r0.z, -r3.w, c23.y, c23.x
mul_pp r0.z, r2.w, r0
mul_pp r2.w, r0.z, r0
cmp_pp r4.xyz, -r2.w, r3, r2
rsq_pp r1.w, r1.w
mul_pp r2.xyz, r1.w, v2
abs_pp r1.w, r0
cmp_pp r1.w, -r1, c23.y, c23.x
mul_pp r0.z, r0, r1.w
cmp_pp r1.xyz, -r0.z, r4, r1
mul_sat r1.w, r0.x, c8.x
dp3_pp r0.w, v3, v3
rsq_pp r0.w, r0.w
mad_pp r3.xyz, r0.w, v3, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
mul_pp r3.xyz, r0.w, r3
dp3_pp r0.w, r1, r3
mov_pp r0.z, c18.x
add_pp r0.z, -c17.x, r0
mad_pp r0.z, v1.x, r0, c17.x
mov_pp r3.xyz, c6
add_pp r3.xyz, c23.w, r3
add r0.xy, v0.zwzw, c13.x
mul r0.xy, r0, c14.x
texld r0.xy, r0, s6
add r0.y, r0.x, r0
mul_pp r0.z, r0, c25.x
max_pp r0.w, r0, c23.x
pow r4, r0.w, r0.z
dp3_pp r0.w, r1, r2
texld r5.xyz, v0, s0
mul r4.yzw, r5.xxyz, c2.xxyz
texld r5.xyz, v0, s1
mad r5.xyz, r5, c3, -r4.yzww
mov r1.xyz, c7
add r1.xyz, c23.w, r1
mad r1.xyz, r1.w, r1, c23.y
mov r1.w, c15.x
mov r2.xyz, c16
max_pp r0.w, r0, c23.x
add r0.y, r0, c24.x
max r0.x, c23, r1.w
mad_sat r0.x, r0.y, r0, c25.y
add r0.x, -r0, c23.y
mul r0.x, r0, c15
add r2.xyz, c23.w, r2
mad r2.xyz, r0.x, r2, c23.y
mov r0.x, c12
add_pp r0.x, c24, r0
mad_pp r3.xyz, v1.y, r3, c23.y
mad r5.xyz, v1.x, r5, r4.yzww
mul r3.xyz, r5, r3
mul r1.xyz, r3, r1
mul r2.xyz, r1, r2
cmp_pp r1.xyz, -r0.x, r1, r2
mov r0.z, r4.x
mov_pp r2.xyz, c4
mul_pp r1.xyz, r1, c0
add_pp r2.xyz, -c5, r2
mad_pp r2.xyz, v1.x, r2, c5
mul_pp r2.xyz, r2, c1
mul_pp r1.xyz, r1, r0.w
mul r0.z, r0, r3.y
rcp r0.x, v4.w
mad r3.xy, v4, r0.x, c24.z
dp3 r0.x, v4, v4
mul_pp r2.xyz, r2, c0
texld r0.w, r3, s7
cmp r0.y, -v4.z, c23.x, c23
texld r0.x, r0.x, s8
mul_pp r0.y, r0, r0.w
mul_pp r0.x, r0.y, r0
mul_pp r0.x, r0, c23.z
mad r1.xyz, r2, r0.z, r1
mul oC0.xyz, r1, r0.x
mov_pp oC0.w, c23.x
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 320 // 276 used size, 27 vars
Vector 16 [_LightColor0] 4
Vector 32 [_SpecColor] 4
Vector 112 [_Color] 3
Vector 128 [_TrimColor] 3
Vector 144 [_TrimSpecColor] 3
Vector 160 [_MainSpecColor] 3
Vector 176 [_VertexMaskColor] 3
Vector 192 [_BodyOcclusionColor] 3
Float 204 [_BodyOcclusionPower]
Float 208 [_BumpPower]
Float 212 [_BodyBumpPower]
Float 216 [_BumpDetailPower]
Float 220 [_DetailTexEnable]
Float 224 [_DetailTexOffset]
Float 228 [_DetailTexScale]
Float 232 [_DetailTexPower]
Vector 240 [_DetailTexColor] 3
Float 252 [_Shininess]
Float 256 [_TrimShininess]
Float 260 [_AtlasOffsetX]
Float 264 [_AtlasOffsetY]
Float 268 [_AtlasScaleX]
Float 272 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DiffuseTrimTex] 2D 8
SetTexture 2 [_BumpTrimTex] 2D 7
SetTexture 3 [_BodyOcclusionTex] 2D 6
SetTexture 4 [_BodyBumpTex] 2D 5
SetTexture 5 [_BumpMap] 2D 3
SetTexture 6 [_BumpDetailTex] 2D 4
SetTexture 7 [_LightTexture0] 2D 0
SetTexture 8 [_LightTextureB0] 2D 1
// 128 instructions, 6 temp regs, 0 temp arrays:
// ALU 83 float, 0 int, 3 uint
// TEX 10 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedoebdmgfadgnibepcccilieadljefiklpabaaaaaaiebcaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
gabbaaaaeaaaaaaafiaeaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaad
aagabaaaaiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaa
ahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadpcbabaaa
abaaaaaagcbaaaaddcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaahaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaadaaaaaadcaaaaapdcaabaaa
abaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaa
baaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaa
bbaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaa
baaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaagaaaaaaaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaamaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaaacaaaaaahgapbaaa
acaaaaaaapaaaaahbcaabaaaabaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaaakaabaaaabaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaaceaaaaaaaaamalpaaaamalpaaaaialpaaaaaaaaaaaaaaakhcaabaaa
acaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
dcaaaaanhcaabaaaabaaaaaafgifcaaaaaaaaaaaanaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaiadpaaaaaaaabnaaaaaiicaabaaaabaaaaaa
abeaaaaaaaaaiadpbkiacaaaaaaaaaaaanaaaaaadhaaaaajhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadgaaaaafecaabaaa
acaaaaaaabeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaafgijcaaaaaaaaaaa
anaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaagacbaaaacaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaagbcaabaaaadaaaaaa
akiacaaaaaaaaaaaanaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaa
acaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaahocaabaaaadaaaaaa
agajbaaaaaaaaaaaagaabaaaadaaaaaabiaaaaaldcaabaaaaeaaaaaaigiacaaa
aaaaaaaaanaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadjaaaaal
mcaabaaaaeaaaaaakgiccaaaaaaaaaaaanaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaaaeaaaaaaegaabaaa
aeaaaaaaabaaaaahecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaa
dhaaaaajhcaabaaaacaaaaaafgafbaaaaeaaaaaajgahbaaaadaaaaaaegacbaaa
acaaaaaadiaaaaaigcaabaaaadaaaaaakgblbaaaabaaaaaafgifcaaaaaaaaaaa
aoaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaagaaaaaa
aagabaaaaeaaaaaadcaaaaapgcaabaaaadaaaaaapganbaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialp
aaaaaaaadiaaaaahdcaabaaaafaaaaaapgapbaaaacaaaaaajgafbaaaadaaaaaa
dgaaaaafecaabaaaafaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaabaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaagaabaaaadaaaaaaegacbaaaafaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadhaaaaajhcaabaaaabaaaaaaagaabaaaaeaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaadhaaaaajhcaabaaa
aaaaaaaakgakbaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ocaabaaaabaaaaaafgafbaaaabaaaaaaagbjbaaaadaaaaaadcaaaaajhcaabaaa
acaaaaaaegbcbaaaaeaaaaaaagaabaaaabaaaaaajgahbaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahccaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaa
baaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaacpaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaaaaaaaakccaabaaaaaaaaaaadkiacaiaebaaaaaa
aaaaaaaaapaaaaaaakiacaaaaaaaaaaabaaaaaaadcaaaaakccaabaaaaaaaaaaa
akbabaaaacaaaaaabkaabaaaaaaaaaaadkiacaaaaaaaaaaaapaaaaaadiaaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaaaeddiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaabjaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaadiaaaaaiocaabaaaabaaaaaaagajbaaa
adaaaaaaagijcaaaaaaaaaaaahaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaaaaaaaaaaiaaaaaajgahbaiaebaaaaaaabaaaaaadcaaaaaj
ocaabaaaabaaaaaaagbabaaaacaaaaaaagajbaaaacaaaaaafgaobaaaabaaaaaa
aaaaaaalhcaabaaaacaaaaaaegiccaaaaaaaaaaaalaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaafgbfbaaaacaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaah
ocaabaaaabaaaaaafgaobaaaabaaaaaaagajbaaaacaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaajaaaaaaegiccaiaebaaaaaaaaaaaaaaakaaaaaadcaaaaak
hcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
akaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
acaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegiccaaaaaaaaaaaamaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaah
ocaabaaaabaaaaaafgaobaaaabaaaaaaagajbaaaacaaaaaaaaaaaaaidcaabaaa
acaaaaaaogbkbaaaabaaaaaaagiacaaaaaaaaaaaaoaaaaaadiaaaaaidcaabaaa
acaaaaaaegaabaaaacaaaaaafgifcaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaagaaaaaaaagabaaaaeaaaaaaaaaaaaah
icaabaaaaaaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaalpdeaaaaaibcaabaaaacaaaaaa
ckiacaaaaaaaaaaaaoaaaaaaabeaaaaaaaaaaaaadccaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaacaaaaaaabeaaaaamnmmmmdmaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaaaoaaaaaaaaaaaaalhcaabaaa
acaaaaaaegiccaaaaaaaaaaaapaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadcaaaaamhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaacaaaaaa
jgahbaaaabaaaaaaegacbaaaacaaaaaadbaaaaaiicaabaaaaaaaaaaaabeaaaaa
aaaaaadpdkiacaaaaaaaaaaaanaaaaaadhaaaaajocaabaaaabaaaaaapgapbaaa
aaaaaaaaagajbaaaacaaaaaafgaobaaaabaaaaaadiaaaaaiocaabaaaabaaaaaa
fgaobaaaabaaaaaaagijcaaaaaaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
jgahbaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaaaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaafaaaaaapgbpbaaaafaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaa
dbaaaaahicaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaafaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaa
abaaaaaaeghobaaaaiaaaaaaaagabaaaabaaaaaaapaaaaahicaabaaaaaaaaaaa
pgapbaaaaaaaaaaaagaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 153 ALU, 10 TEX
PARAM c[25] = { program.local[0..22],
		{ 0, 1, 2, 0.5 },
		{ 128, 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MOV R5.xy, c[23];
MAD R3.xy, R3.wyzw, c[23].z, -c[23].y;
MOV R0.z, c[21].x;
MOV R0.w, c[22].x;
MOV R0.y, c[20].x;
MOV R0.x, c[19];
MAD R5.zw, fragment.texcoord[0], R0, R0.xyxy;
TEX R0.yw, R5.zwzw, texture[4], 2D;
MAD R0.xy, R0.wyzw, c[23].z, -c[23].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.z, -R0, c[23].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[23].wwyw;
MUL R1.xyz, R1, c[10].x;
ADD R0.w, -R5.y, c[10].x;
ADD R1.xyz, R1, c[23].wwyw;
CMP R1.xyz, -R0.w, R0, R1;
MOV R0.xy, c[10].x;
MOV R0.z, c[23].x;
MAD R0.xyz, R1, R0, R1;
DP3 R0.w, R0, R0;
MUL R1.xy, fragment.texcoord[0].zwzw, c[14].x;
TEX R1.yw, R1, texture[6], 2D;
MAD R1.xy, R1.wyzw, c[23].z, -c[23].y;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R0;
TEX R0.yw, fragment.texcoord[0], texture[5], 2D;
MAD R0.xy, R0.wyzw, c[23].z, -c[23].y;
MUL R3.zw, R0.xyxy, R0.xyxy;
ADD_SAT R2.w, R3.z, R3;
MUL R0.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.w, -R2, c[23].y;
MUL R1.zw, R1.xyxy, R1.xyxy;
RSQ R2.w, R0.w;
ADD R0.z, -R0, c[23].y;
RSQ R0.w, R0.z;
RCP R0.z, R2.w;
RCP R3.z, R0.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
ADD_SAT R0.w, R1.z, R1;
MOV R0.xy, c[9].x;
MOV R0.z, c[23].x;
MAD R3.xyz, R3, R0, R2;
ADD R0.w, -R0, c[23].y;
RSQ R0.x, R0.w;
DP3 R0.w, R3, R3;
RCP R1.z, R0.x;
RSQ R0.w, R0.w;
ABS R3.w, c[9].x;
MOV R0.z, c[23].x;
MOV R0.xy, c[11].x;
MUL R4.xyz, R1, R0;
MAD R0.xyz, R1, R0, R2;
MAD R4.xyz, R0.w, R3, R4;
DP3 R1.y, R4, R4;
DP3 R1.x, R0, R0;
RSQ R1.w, R1.x;
MUL R0.xyz, R1.w, R0;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R4;
ABS R2.w, c[11].x;
CMP R4.x, -R2.w, c[23].y, c[23];
CMP R1.w, -R3, c[23].y, c[23].x;
MUL R4.y, R1.w, R4.x;
CMP R4.z, -R3.w, c[23].x, c[23].y;
ABS R3.w, R4.y;
CMP R2.w, -R2, c[23].x, c[23].y;
MUL R1.w, R1, R2;
MUL R4.x, R4, R4.z;
CMP R3.w, -R3, c[23].x, c[23].y;
MUL R4.y, R3.w, R4.x;
CMP R0.xyz, -R4.y, R0, R1;
MUL R1.xyz, R0.w, R3;
ABS R4.x, R4;
CMP R0.w, -R4.x, c[23].x, c[23].y;
MUL R0.w, R3, R0;
MUL R2.w, R0, R1;
CMP R0.xyz, -R2.w, R1, R0;
DP3 R3.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R3.x, R3.x;
DP3 R2.w, fragment.texcoord[2], fragment.texcoord[2];
ABS R1.w, R1;
CMP R1.w, -R1, c[23].x, c[23].y;
MUL R0.w, R0, R1;
CMP R0.xyz, -R0.w, R2, R0;
MUL R1.xyz, R3.x, fragment.texcoord[1];
DP3 R0.w, R0, R1;
RSQ R2.w, R2.w;
MAD R3.xyz, R2.w, fragment.texcoord[2], R1;
DP3 R2.w, R3, R3;
RSQ R1.w, R2.w;
MUL R2.xyz, R1.w, R3;
DP3 R1.w, R0, R2;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R1.xyz, R1, c[2];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[3], -R1;
MAD R0.xyz, fragment.color.primary.x, R0, R1;
MOV R1.y, c[17].x;
ADD R2.x, -R1.y, c[18];
MOV R1.x, c[23].y;
ADD R1.xyz, -R1.x, c[6];
MAD R2.x, fragment.color.primary, R2, c[17];
MAD R1.xyz, fragment.color.primary.y, R1, c[23].y;
MUL R1.xyz, R0, R1;
MAX R1.w, R1, c[23].x;
MUL R2.x, R2, c[24];
POW R0.x, R1.w, R2.x;
MUL R0.z, R0.x, R1.y;
TEX R0.x, R5.zwzw, texture[3], 2D;
ADD R0.x, -R0, c[23].y;
ADD R2.xy, fragment.texcoord[0].zwzw, c[13].x;
MUL_SAT R1.w, R0.x, c[8].x;
MUL R2.xy, R2, c[14].x;
TEX R0.xy, R2, texture[6], 2D;
ADD R0.x, R0, R0.y;
ADD R2.xyz, -R5.y, c[7];
MAD R2.xyz, R1.w, R2, c[23].y;
MUL R1.xyz, R1, R2;
MAX R0.w, R0, c[23].x;
MAX R0.y, R5.x, c[15].x;
ADD R0.x, R0, -c[23].w;
MAD_SAT R0.x, R0, R0.y, c[24].y;
ADD R0.x, -R0, c[23].y;
MUL R0.y, R0.x, c[15].x;
ADD R2.xyz, -R5.y, c[16];
MAD R2.xyz, R0.y, R2, c[23].y;
MUL R3.xyz, R1, R2;
MOV R0.x, c[12];
SLT R0.x, c[23].w, R0;
ABS R0.x, R0;
CMP R0.x, -R0, c[23], c[23].y;
CMP R1.xyz, -R0.x, R1, R3;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV R2.xyz, c[5];
ADD R2.xyz, -R2, c[4];
MUL R1.xyz, R1, c[0];
MUL R1.xyz, R1, R0.w;
MAD R2.xyz, fragment.color.primary.x, R2, c[5];
MUL R2.xyz, R2, c[1];
TEX R0.w, fragment.texcoord[3], texture[8], CUBE;
TEX R1.w, R0.x, texture[7], 2D;
MUL R0.x, R1.w, R0.w;
MUL R0.w, R0.x, c[23].z;
MUL R2.xyz, R2, c[0];
MAD R0.xyz, R2, R0.z, R1;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, c[23].x;
END
# 153 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 147 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_cube s8
def c23, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c24, -0.50000000, -1.00000000, 0.50000000, 1.00000000
def c25, 128.00000000, 0.02500000, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4.xyz
texld r4.yw, v0, s2
mad_pp r4.xy, r4.wyzw, c23.z, c23.w
mov r0.w, c20.x
mov r0.z, c19.x
mov r5.z, c23.x
mov r5.xy, c11.x
abs r4.w, c9.x
mov r0.x, c21
mov r0.y, c22.x
mad r0.xy, v0.zwzw, r0, r0.zwzw
texld r1.yw, r0, s4
mad_pp r1.xy, r1.wyzw, c23.z, c23.w
mul_pp r0.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.z, r0, r0.w
texld r0.x, r0, s3
add_pp r0.z, -r0, c23.y
rsq_pp r0.z, r0.z
rcp_pp r1.z, r0.z
add r2.xyz, r1, c24.xxyw
mul r2.xyz, r2, c10.x
mov r0.z, c10.x
add r2.xyz, r2, c24.zzww
add r0.z, c23.w, r0
cmp r1.xyz, -r0.z, r2, r1
add r0.x, -r0, c23.y
mov r2.xy, c10.x
mov r2.z, c23.x
mad r2.xyz, r1, r2, r1
mul r1.xy, v0.zwzw, c14.x
texld r1.yw, r1, s6
mad_pp r3.xy, r1.wyzw, c23.z, c23.w
dp3 r0.z, r2, r2
rsq r0.z, r0.z
mul r2.xyz, r0.z, r2
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
texld r1.yw, v0, s5
mad_pp r1.xy, r1.wyzw, c23.z, c23.w
mul_pp r3.zw, r1.xyxy, r1.xyxy
mul_pp r1.zw, r4.xyxy, r4.xyxy
add_pp_sat r1.w, r1.z, r1
add_pp_sat r2.w, r3.z, r3
add_pp r1.z, -r2.w, c23.y
add_pp r1.w, -r1, c23.y
rsq_pp r1.w, r1.w
rsq_pp r1.z, r1.z
add_pp r0.z, -r0, c23.y
rsq_pp r0.z, r0.z
rcp_pp r3.z, r0.z
rcp_pp r1.z, r1.z
rcp_pp r4.z, r1.w
add r4.xyz, r4, -r1
mad r1.xyz, v1.x, r4, r1
mov r4.xy, c9.x
mov r4.z, c23.x
mad r1.xyz, r1, r4, r2
dp3 r0.w, r1, r1
mul r4.xyz, r3, r5
rsq r0.z, r0.w
mad r4.xyz, r0.z, r1, r4
mad r5.xyz, r3, r5, r2
dp3 r1.w, r4, r4
dp3 r0.w, r5, r5
rsq r1.w, r1.w
mul r3.xyz, r1.w, r4
rsq r0.w, r0.w
mul r4.xyz, r0.w, r5
cmp r0.w, -r4, c23.x, c23.y
abs r1.w, c11.x
cmp r3.w, -r1, c23.x, c23.y
mul_pp r2.w, r0, r3
cmp r4.w, -r4, c23.y, c23.x
cmp r1.w, -r1, c23.y, c23.x
mul_pp r0.w, r0, r1
abs_pp r2.w, r2
dp3_pp r1.w, v2, v2
mul_pp r3.w, r3, r4
cmp_pp r2.w, -r2, c23.y, c23.x
mul_pp r4.w, r2, r3
cmp_pp r3.xyz, -r4.w, r3, r4
mul r1.xyz, r0.z, r1
abs_pp r3.w, r3
cmp_pp r0.z, -r3.w, c23.y, c23.x
mul_pp r0.z, r2.w, r0
mul_pp r2.w, r0.z, r0
cmp_pp r4.xyz, -r2.w, r3, r1
rsq_pp r1.w, r1.w
mul_pp r1.xyz, r1.w, v2
abs_pp r1.w, r0
cmp_pp r1.w, -r1, c23.y, c23.x
mul_pp r0.z, r0, r1.w
cmp_pp r2.xyz, -r0.z, r4, r2
dp3_pp r0.w, v3, v3
rsq_pp r0.w, r0.w
mad_pp r3.xyz, r0.w, v3, r1
dp3_pp r0.y, r2, r1
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
mul_pp r3.xyz, r0.w, r3
dp3_pp r0.w, r2, r3
mov_pp r0.z, c18.x
add_pp r0.z, -c17.x, r0
mad_pp r0.z, v1.x, r0, c17.x
mov_pp r3.xyz, c6
add_pp r3.xyz, c23.w, r3
add r1.xy, v0.zwzw, c13.x
mul r1.xy, r1, c14.x
texld r1.xy, r1, s6
add r1.y, r1.x, r1
mov r2.w, c12.x
mul_sat r1.z, r0.x, c8.x
mul_pp r0.z, r0, c25.x
max_pp r0.w, r0, c23.x
pow r4, r0.w, r0.z
texld r5.xyz, v0, s0
mul r4.yzw, r5.xxyz, c2.xxyz
texld r5.xyz, v0, s1
mad r5.xyz, r5, c3, -r4.yzww
max_pp r0.w, r0.y, c23.x
mov r0.z, r4.x
add r1.y, r1, c24.x
mad_pp r3.xyz, v1.y, r3, c23.y
mad r5.xyz, v1.x, r5, r4.yzww
mul r3.xyz, r5, r3
mul r1.w, r0.z, r3.y
mov r0.xyz, c7
add r0.xyz, c23.w, r0
mad r0.xyz, r1.z, r0, c23.y
mov r1.z, c15.x
max r1.x, c23, r1.z
mad_sat r2.x, r1.y, r1, c25.y
mov r1.xyz, c16
add r2.x, -r2, c23.y
mul r0.xyz, r3, r0
mul r2.x, r2, c15
add r1.xyz, c23.w, r1
mad r1.xyz, r2.x, r1, c23.y
mul r2.xyz, r0, r1
add_pp r2.w, c24.x, r2
cmp_pp r2.xyz, -r2.w, r0, r2
mov_pp r1.xyz, c4
add_pp r0.xyz, -c5, r1
mul_pp r1.xyz, r2, c0
mul_pp r1.xyz, r1, r0.w
mad_pp r0.xyz, v1.x, r0, c5
mul_pp r2.xyz, r0, c1
dp3 r0.x, v4, v4
mul_pp r2.xyz, r2, c0
texld r0.w, v4, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul_pp r0.x, r0, c23.z
mad r1.xyz, r2, r1.w, r1
mul oC0.xyz, r1, r0.x
mov_pp oC0.w, c23.x
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 320 // 276 used size, 27 vars
Vector 16 [_LightColor0] 4
Vector 32 [_SpecColor] 4
Vector 112 [_Color] 3
Vector 128 [_TrimColor] 3
Vector 144 [_TrimSpecColor] 3
Vector 160 [_MainSpecColor] 3
Vector 176 [_VertexMaskColor] 3
Vector 192 [_BodyOcclusionColor] 3
Float 204 [_BodyOcclusionPower]
Float 208 [_BumpPower]
Float 212 [_BodyBumpPower]
Float 216 [_BumpDetailPower]
Float 220 [_DetailTexEnable]
Float 224 [_DetailTexOffset]
Float 228 [_DetailTexScale]
Float 232 [_DetailTexPower]
Vector 240 [_DetailTexColor] 3
Float 252 [_Shininess]
Float 256 [_TrimShininess]
Float 260 [_AtlasOffsetX]
Float 264 [_AtlasOffsetY]
Float 268 [_AtlasScaleX]
Float 272 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DiffuseTrimTex] 2D 8
SetTexture 2 [_BumpTrimTex] 2D 7
SetTexture 3 [_BodyOcclusionTex] 2D 6
SetTexture 4 [_BodyBumpTex] 2D 5
SetTexture 5 [_BumpMap] 2D 3
SetTexture 6 [_BumpDetailTex] 2D 4
SetTexture 7 [_LightTextureB0] 2D 1
SetTexture 8 [_LightTexture0] CUBE 0
// 123 instructions, 6 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 2 uint
// TEX 10 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfomloglaeoponckmdaopgoielpkbkibjabaaaaaaombbaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
mibaaaaaeaaaaaaadcaeaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaad
aagabaaaaiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaa
ahaaaaaaffffaaaafidaaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadpcbabaaa
abaaaaaagcbaaaaddcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaahaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaadaaaaaadcaaaaapdcaabaaa
abaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaa
baaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaa
bbaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaa
baaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaagaaaaaaaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaamaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaaacaaaaaahgapbaaa
acaaaaaaapaaaaahbcaabaaaabaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaaakaabaaaabaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaaceaaaaaaaaamalpaaaamalpaaaaialpaaaaaaaaaaaaaaakhcaabaaa
acaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
dcaaaaanhcaabaaaabaaaaaafgifcaaaaaaaaaaaanaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaiadpaaaaaaaabnaaaaaiicaabaaaabaaaaaa
abeaaaaaaaaaiadpbkiacaaaaaaaaaaaanaaaaaadhaaaaajhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadgaaaaafecaabaaa
acaaaaaaabeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaafgijcaaaaaaaaaaa
anaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaagacbaaaacaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaagbcaabaaaadaaaaaa
akiacaaaaaaaaaaaanaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaa
acaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaahocaabaaaadaaaaaa
agajbaaaaaaaaaaaagaabaaaadaaaaaabiaaaaaldcaabaaaaeaaaaaaigiacaaa
aaaaaaaaanaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadjaaaaal
mcaabaaaaeaaaaaakgiccaaaaaaaaaaaanaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaaaeaaaaaaegaabaaa
aeaaaaaaabaaaaahecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaa
dhaaaaajhcaabaaaacaaaaaafgafbaaaaeaaaaaajgahbaaaadaaaaaaegacbaaa
acaaaaaadiaaaaaigcaabaaaadaaaaaakgblbaaaabaaaaaafgifcaaaaaaaaaaa
aoaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaagaaaaaa
aagabaaaaeaaaaaadcaaaaapgcaabaaaadaaaaaapganbaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialp
aaaaaaaadiaaaaahdcaabaaaafaaaaaapgapbaaaacaaaaaajgafbaaaadaaaaaa
dgaaaaafecaabaaaafaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaabaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaagaabaaaadaaaaaaegacbaaaafaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadhaaaaajhcaabaaaabaaaaaaagaabaaaaeaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaadhaaaaajhcaabaaa
aaaaaaaakgakbaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ocaabaaaabaaaaaafgafbaaaabaaaaaaagbjbaaaadaaaaaadcaaaaajhcaabaaa
acaaaaaaegbcbaaaaeaaaaaaagaabaaaabaaaaaajgahbaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahccaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaa
baaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaacpaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaaaaaaaakccaabaaaaaaaaaaadkiacaiaebaaaaaa
aaaaaaaaapaaaaaaakiacaaaaaaaaaaabaaaaaaadcaaaaakccaabaaaaaaaaaaa
akbabaaaacaaaaaabkaabaaaaaaaaaaadkiacaaaaaaaaaaaapaaaaaadiaaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaaaeddiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaabjaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaadiaaaaaiocaabaaaabaaaaaaagajbaaa
adaaaaaaagijcaaaaaaaaaaaahaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaaaaaaaaaaiaaaaaajgahbaiaebaaaaaaabaaaaaadcaaaaaj
ocaabaaaabaaaaaaagbabaaaacaaaaaaagajbaaaacaaaaaafgaobaaaabaaaaaa
aaaaaaalhcaabaaaacaaaaaaegiccaaaaaaaaaaaalaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaafgbfbaaaacaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaah
ocaabaaaabaaaaaafgaobaaaabaaaaaaagajbaaaacaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaajaaaaaaegiccaiaebaaaaaaaaaaaaaaakaaaaaadcaaaaak
hcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
akaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
acaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegiccaaaaaaaaaaaamaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaah
ocaabaaaabaaaaaafgaobaaaabaaaaaaagajbaaaacaaaaaaaaaaaaaidcaabaaa
acaaaaaaogbkbaaaabaaaaaaagiacaaaaaaaaaaaaoaaaaaadiaaaaaidcaabaaa
acaaaaaaegaabaaaacaaaaaafgifcaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaagaaaaaaaagabaaaaeaaaaaaaaaaaaah
icaabaaaaaaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaalpdeaaaaaibcaabaaaacaaaaaa
ckiacaaaaaaaaaaaaoaaaaaaabeaaaaaaaaaaaaadccaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaacaaaaaaabeaaaaamnmmmmdmaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaaaoaaaaaaaaaaaaalhcaabaaa
acaaaaaaegiccaaaaaaaaaaaapaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadcaaaaamhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaacaaaaaa
jgahbaaaabaaaaaaegacbaaaacaaaaaadbaaaaaiicaabaaaaaaaaaaaabeaaaaa
aaaaaadpdkiacaaaaaaaaaaaanaaaaaadhaaaaajocaabaaaabaaaaaapgapbaaa
aaaaaaaaagajbaaaacaaaaaafgaobaaaabaaaaaadiaaaaaiocaabaaaabaaaaaa
fgaobaaaabaaaaaaagijcaaaaaaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
jgahbaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaaabaaaaaa
pgapbaaaaaaaaaaaeghobaaaahaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
acaaaaaaegbcbaaaafaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 148 ALU, 9 TEX
PARAM c[25] = { program.local[0..22],
		{ 0, 1, 2, 0.5 },
		{ 128, 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MOV R5.xy, c[23];
MAD R3.xy, R3.wyzw, c[23].z, -c[23].y;
MOV R0.z, c[21].x;
MOV R0.w, c[22].x;
MOV R0.y, c[20].x;
MOV R0.x, c[19];
MAD R5.zw, fragment.texcoord[0], R0, R0.xyxy;
TEX R0.yw, R5.zwzw, texture[4], 2D;
MAD R0.xy, R0.wyzw, c[23].z, -c[23].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.z, -R0, c[23].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[23].wwyw;
MUL R1.xyz, R1, c[10].x;
ADD R0.w, -R5.y, c[10].x;
ADD R1.xyz, R1, c[23].wwyw;
CMP R1.xyz, -R0.w, R0, R1;
MOV R0.xy, c[10].x;
MOV R0.z, c[23].x;
MAD R0.xyz, R1, R0, R1;
DP3 R0.w, R0, R0;
MUL R1.xy, fragment.texcoord[0].zwzw, c[14].x;
TEX R1.yw, R1, texture[6], 2D;
MAD R1.xy, R1.wyzw, c[23].z, -c[23].y;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R0;
TEX R0.yw, fragment.texcoord[0], texture[5], 2D;
MAD R0.xy, R0.wyzw, c[23].z, -c[23].y;
MUL R3.zw, R0.xyxy, R0.xyxy;
ADD_SAT R2.w, R3.z, R3;
MUL R0.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.w, -R2, c[23].y;
MUL R1.zw, R1.xyxy, R1.xyxy;
RSQ R2.w, R0.w;
ADD R0.z, -R0, c[23].y;
RSQ R0.w, R0.z;
RCP R0.z, R2.w;
RCP R3.z, R0.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
ADD_SAT R0.w, R1.z, R1;
MOV R0.xy, c[9].x;
MOV R0.z, c[23].x;
MAD R3.xyz, R3, R0, R2;
ADD R0.w, -R0, c[23].y;
RSQ R0.x, R0.w;
RCP R1.z, R0.x;
DP3 R0.w, R3, R3;
RSQ R0.w, R0.w;
ABS R3.w, c[9].x;
MOV R0.z, c[23].x;
MOV R0.xy, c[11].x;
MUL R4.xyz, R1, R0;
MAD R0.xyz, R1, R0, R2;
MAD R4.xyz, R0.w, R3, R4;
DP3 R1.y, R4, R4;
DP3 R1.x, R0, R0;
RSQ R1.w, R1.x;
MUL R0.xyz, R1.w, R0;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R4;
ABS R2.w, c[11].x;
CMP R4.x, -R2.w, c[23].y, c[23];
CMP R1.w, -R3, c[23].y, c[23].x;
MUL R4.y, R1.w, R4.x;
CMP R4.z, -R3.w, c[23].x, c[23].y;
ABS R3.w, R4.y;
CMP R2.w, -R2, c[23].x, c[23].y;
MUL R1.w, R1, R2;
MUL R4.x, R4, R4.z;
CMP R3.w, -R3, c[23].x, c[23].y;
MUL R4.y, R3.w, R4.x;
CMP R0.xyz, -R4.y, R0, R1;
MUL R1.xyz, R0.w, R3;
ABS R0.w, R4.x;
CMP R0.w, -R0, c[23].x, c[23].y;
MUL R0.w, R3, R0;
MUL R2.w, R0, R1;
CMP R0.xyz, -R2.w, R1, R0;
DP3 R2.w, fragment.texcoord[2], fragment.texcoord[2];
ABS R1.w, R1;
CMP R1.w, -R1, c[23].x, c[23].y;
MUL R0.w, R0, R1;
CMP R0.xyz, -R0.w, R2, R0;
DP3 R0.w, R0, fragment.texcoord[1];
RSQ R2.w, R2.w;
MOV R1.xyz, fragment.texcoord[1];
MAD R1.xyz, R2.w, fragment.texcoord[2], R1;
DP3 R2.w, R1, R1;
RSQ R1.w, R2.w;
MUL R2.xyz, R1.w, R1;
DP3 R1.w, R0, R2;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R1.xyz, R1, c[2];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[3], -R1;
MAD R0.xyz, fragment.color.primary.x, R0, R1;
MOV R1.y, c[17].x;
ADD R2.x, -R1.y, c[18];
MOV R1.x, c[23].y;
ADD R1.xyz, -R1.x, c[6];
MAD R2.x, fragment.color.primary, R2, c[17];
MAD R1.xyz, fragment.color.primary.y, R1, c[23].y;
MUL R1.xyz, R0, R1;
MAX R1.w, R1, c[23].x;
MUL R2.x, R2, c[24];
POW R0.x, R1.w, R2.x;
MUL R0.z, R0.x, R1.y;
TEX R0.x, R5.zwzw, texture[3], 2D;
ADD R0.x, -R0, c[23].y;
ADD R2.xy, fragment.texcoord[0].zwzw, c[13].x;
MAX R0.w, R0, c[23].x;
MUL R2.xy, R2, c[14].x;
MUL_SAT R1.w, R0.x, c[8].x;
TEX R0.xy, R2, texture[6], 2D;
ADD R0.x, R0, R0.y;
ADD R2.xyz, -R5.y, c[7];
MAD R2.xyz, R1.w, R2, c[23].y;
MUL R1.xyz, R1, R2;
MAX R0.y, R5.x, c[15].x;
ADD R0.x, R0, -c[23].w;
MAD_SAT R0.x, R0, R0.y, c[24].y;
ADD R0.x, -R0, c[23].y;
MUL R0.y, R0.x, c[15].x;
ADD R2.xyz, -R5.y, c[16];
MAD R2.xyz, R0.y, R2, c[23].y;
MUL R3.xyz, R1, R2;
MOV R0.x, c[12];
SLT R0.x, c[23].w, R0;
ABS R0.x, R0;
CMP R0.x, -R0, c[23], c[23].y;
CMP R1.xyz, -R0.x, R1, R3;
MOV R2.xyz, c[5];
ADD R2.xyz, -R2, c[4];
MUL R1.xyz, R1, c[0];
MUL R1.xyz, R1, R0.w;
MAD R2.xyz, fragment.color.primary.x, R2, c[5];
MUL R2.xyz, R2, c[1];
TEX R0.w, fragment.texcoord[3], texture[7], 2D;
MUL R2.xyz, R2, c[0];
MUL R0.w, R0, c[23].z;
MAD R0.xyz, R2, R0.z, R1;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, c[23].x;
END
# 148 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_SpecColor]
Vector 2 [_Color]
Vector 3 [_TrimColor]
Vector 4 [_TrimSpecColor]
Vector 5 [_MainSpecColor]
Vector 6 [_VertexMaskColor]
Vector 7 [_BodyOcclusionColor]
Float 8 [_BodyOcclusionPower]
Float 9 [_BumpPower]
Float 10 [_BodyBumpPower]
Float 11 [_BumpDetailPower]
Float 12 [_DetailTexEnable]
Float 13 [_DetailTexOffset]
Float 14 [_DetailTexScale]
Float 15 [_DetailTexPower]
Vector 16 [_DetailTexColor]
Float 17 [_Shininess]
Float 18 [_TrimShininess]
Float 19 [_AtlasOffsetX]
Float 20 [_AtlasOffsetY]
Float 21 [_AtlasScaleX]
Float 22 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 143 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c23, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c24, -0.50000000, -1.00000000, 0.50000000, 1.00000000
def c25, 128.00000000, 0.02500000, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4.xy
texld r3.yw, v0, s2
mad_pp r3.xy, r3.wyzw, c23.z, c23.w
mov r0.z, c21.x
mov r0.w, c22.x
mov r0.y, c20.x
mov r0.x, c19
mad r5.xy, v0.zwzw, r0.zwzw, r0
texld r0.yw, r5, s4
mad_pp r0.xy, r0.wyzw, c23.z, c23.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c23.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
add r1.xyz, r0, c24.xxyw
mul r1.xyz, r1, c10.x
mov r0.w, c10.x
add r0.w, c23, r0
add r1.xyz, r1, c24.zzww
cmp r1.xyz, -r0.w, r1, r0
mov r0.xy, c10.x
mov r0.z, c23.x
mad r2.xyz, r1, r0, r1
mul r0.xy, v0.zwzw, c14.x
texld r0.yw, r0, s6
mad_pp r1.xy, r0.wyzw, c23.z, c23.w
dp3 r0.z, r2, r2
rsq r0.x, r0.z
mul_pp r1.zw, r1.xyxy, r1.xyxy
mul r2.xyz, r0.x, r2
texld r0.yw, v0, s5
mad_pp r0.xy, r0.wyzw, c23.z, c23.w
mul_pp r3.zw, r0.xyxy, r0.xyxy
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp_sat r2.w, r3.z, r3
add_pp r0.w, -r2, c23.y
rsq_pp r2.w, r0.w
add_pp r0.z, -r0, c23.y
rsq_pp r0.w, r0.z
rcp_pp r0.z, r2.w
rcp_pp r3.z, r0.w
add r3.xyz, r3, -r0
mad r3.xyz, v1.x, r3, r0
add_pp_sat r0.w, r1.z, r1
mov r0.xy, c9.x
mov r0.z, c23.x
mad r3.xyz, r3, r0, r2
add_pp r0.w, -r0, c23.y
rsq_pp r0.x, r0.w
rcp_pp r1.z, r0.x
dp3 r0.w, r3, r3
rsq r0.w, r0.w
mov r0.z, c23.x
mov r0.xy, c11.x
mul r4.xyz, r1, r0
mad r0.xyz, r1, r0, r2
mad r4.xyz, r0.w, r3, r4
dp3 r1.x, r4, r4
dp3 r1.y, r0, r0
rsq r1.w, r1.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, r4
abs r2.w, c11.x
cmp r4.x, -r2.w, c23, c23.y
mul r0.xyz, r1.w, r0
abs r4.y, c9.x
cmp r1.w, -r4.y, c23.x, c23.y
mul_pp r3.w, r1, r4.x
cmp r4.y, -r4, c23, c23.x
cmp r2.w, -r2, c23.y, c23.x
abs_pp r3.w, r3
mul_pp r4.x, r4, r4.y
cmp_pp r3.w, -r3, c23.y, c23.x
mul_pp r4.y, r3.w, r4.x
cmp_pp r0.xyz, -r4.y, r1, r0
mul r1.xyz, r0.w, r3
abs_pp r0.w, r4.x
cmp_pp r0.w, -r0, c23.y, c23.x
mul_pp r1.w, r1, r2
mul_pp r0.w, r3, r0
mul_pp r2.w, r0, r1
cmp_pp r1.xyz, -r2.w, r0, r1
abs_pp r1.w, r1
cmp_pp r1.w, -r1, c23.y, c23.x
mul_pp r0.w, r0, r1
cmp_pp r1.xyz, -r0.w, r1, r2
mov_pp r2.xyz, c6
add_pp r3.xyz, c23.w, r2
dp3_pp r2.w, v3, v3
mov_pp r1.w, c18.x
rsq_pp r2.w, r2.w
mov_pp r0.xyz, v2
mad_pp r0.xyz, r2.w, v3, r0
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r0.x, r1, r0
add_pp r1.w, -c17.x, r1
mad_pp r0.w, v1.x, r1, c17.x
mul_pp r0.y, r0.w, c25.x
max_pp r0.x, r0, c23
pow r4, r0.x, r0.y
texld r0.xyz, v0, s0
mul r2.xyz, r0, c2
texld r0.xyz, v0, s1
mad r0.xyz, r0, c3, -r2
mad r0.xyz, v1.x, r0, r2
mad_pp r3.xyz, v1.y, r3, c23.y
mul r2.xyz, r0, r3
dp3_pp r0.y, r1, v2
mov r0.x, r4
mul r1.w, r0.x, r2.y
texld r0.x, r5, s3
add r0.x, -r0, c23.y
add r1.xy, v0.zwzw, c13.x
mul r1.xy, r1, c14.x
texld r1.xy, r1, s6
add r1.x, r1, r1.y
max_pp r0.w, r0.y, c23.x
mul_sat r1.z, r0.x, c8.x
mov r0.xyz, c7
add r0.xyz, c23.w, r0
mad r0.xyz, r1.z, r0, c23.y
mov r1.z, c15.x
mul r0.xyz, r2, r0
max r1.y, c23.x, r1.z
add r1.x, r1, c24
mad_sat r2.w, r1.x, r1.y, c25.y
mov r1.xyz, c16
add r2.w, -r2, c23.y
mul r2.w, r2, c15.x
add r1.xyz, c23.w, r1
mad r1.xyz, r2.w, r1, c23.y
mul r2.xyz, r0, r1
mov r2.w, c12.x
mov_pp r1.xyz, c4
add_pp r2.w, c24.x, r2
cmp_pp r0.xyz, -r2.w, r0, r2
add_pp r1.xyz, -c5, r1
mul_pp r0.xyz, r0, c0
mul_pp r0.xyz, r0, r0.w
mad_pp r1.xyz, v1.x, r1, c5
mul_pp r1.xyz, r1, c1
texld r0.w, v4, s7
mul_pp r1.xyz, r1, c0
mul_pp r0.w, r0, c23.z
mad r0.xyz, r1, r1.w, r0
mul oC0.xyz, r0, r0.w
mov_pp oC0.w, c23.x
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 320 // 276 used size, 27 vars
Vector 16 [_LightColor0] 4
Vector 32 [_SpecColor] 4
Vector 112 [_Color] 3
Vector 128 [_TrimColor] 3
Vector 144 [_TrimSpecColor] 3
Vector 160 [_MainSpecColor] 3
Vector 176 [_VertexMaskColor] 3
Vector 192 [_BodyOcclusionColor] 3
Float 204 [_BodyOcclusionPower]
Float 208 [_BumpPower]
Float 212 [_BodyBumpPower]
Float 216 [_BumpDetailPower]
Float 220 [_DetailTexEnable]
Float 224 [_DetailTexOffset]
Float 228 [_DetailTexScale]
Float 232 [_DetailTexPower]
Vector 240 [_DetailTexColor] 3
Float 252 [_Shininess]
Float 256 [_TrimShininess]
Float 260 [_AtlasOffsetX]
Float 264 [_AtlasOffsetY]
Float 268 [_AtlasScaleX]
Float 272 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 7
SetTexture 2 [_BumpTrimTex] 2D 6
SetTexture 3 [_BodyOcclusionTex] 2D 5
SetTexture 4 [_BodyBumpTex] 2D 4
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_BumpDetailTex] 2D 3
SetTexture 7 [_LightTexture0] 2D 0
// 118 instructions, 6 temp regs, 0 temp arrays:
// ALU 75 float, 0 int, 2 uint
// TEX 9 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhjaceddkolamjinhnbaehnjkehhfkgkfabaaaaaaeebbaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaadadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
cabaaaaaeaaaaaaaaiaeaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaaddcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaagaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaadcaaaaap
dcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaa
aaaaaaaabaaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaa
aaaaaaaabbaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaa
aaaaaaaabaaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaafaaaaaaaaaaaaaiicaabaaaaaaaaaaaakaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaamaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaaacaaaaaa
hgapbaaaacaaaaaaapaaaaahbcaabaaaabaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaacaaaaaaakaabaaaabaaaaaaaaaaaaakhcaabaaaabaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaamalpaaaamalpaaaaialpaaaaaaaaaaaaaaak
hcaabaaaacaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaadcaaaaanhcaabaaaabaaaaaafgifcaaaaaaaaaaaanaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaiadpaaaaaaaabnaaaaaiicaabaaa
abaaaaaaabeaaaaaaaaaiadpbkiacaaaaaaaaaaaanaaaaaadhaaaaajhcaabaaa
abaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadgaaaaaf
ecaabaaaacaaaaaaabeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaafgijcaaa
aaaaaaaaanaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaagacbaaa
acaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaagbcaabaaa
adaaaaaaakiacaaaaaaaaaaaanaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaa
egacbaaaacaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaahocaabaaa
adaaaaaaagajbaaaaaaaaaaaagaabaaaadaaaaaabiaaaaaldcaabaaaaeaaaaaa
igiacaaaaaaaaaaaanaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
djaaaaalmcaabaaaaeaaaaaakgiccaaaaaaaaaaaanaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaaaeaaaaaa
egaabaaaaeaaaaaaabaaaaahecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaa
aeaaaaaadhaaaaajhcaabaaaacaaaaaafgafbaaaaeaaaaaajgahbaaaadaaaaaa
egacbaaaacaaaaaadiaaaaaigcaabaaaadaaaaaakgblbaaaabaaaaaafgifcaaa
aaaaaaaaaoaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaa
agaaaaaaaagabaaaadaaaaaadcaaaaapgcaabaaaadaaaaaapganbaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaaaaaaaaaialp
aaaaialpaaaaaaaadiaaaaahdcaabaaaafaaaaaapgapbaaaacaaaaaajgafbaaa
adaaaaaadgaaaaafecaabaaaafaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaegacbaaaafaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaagaabaaaadaaaaaaegacbaaaafaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaadhaaaaajhcaabaaaabaaaaaaagaabaaaaeaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaadhaaaaaj
hcaabaaaaaaaaaaakgakbaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajhcaabaaaabaaaaaaegbcbaaa
aeaaaaaaagaabaaaabaaaaaaegbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaadaaaaaadeaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaadeaaaaahccaabaaaaaaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaaaaaaaaakecaabaaaaaaaaaaadkiacaiaebaaaaaaaaaaaaaaapaaaaaa
akiacaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaaaaaaaaaakbabaaaacaaaaaa
ckaabaaaaaaaaaaadkiacaaaaaaaaaaaapaaaaaadiaaaaahecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaabjaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
ahaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaaahaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
aaaaaaaaaiaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agbabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegiccaaaaaaaaaaaalaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadcaaaaamhcaabaaaacaaaaaafgbfbaaaacaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
ajaaaaaaegiccaiaebaaaaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaakaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaacaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaadiaaaaah
hcaabaaaacaaaaaafgafbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
adaaaaaaegiccaaaaaaaaaaaamaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadcaaaaamocaabaaaaaaaaaaapgapbaaaaaaaaaaaagajbaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaiadpaaaaiadpdiaaaaahocaabaaaaaaaaaaa
fgaobaaaaaaaaaaaagajbaaaabaaaaaaaaaaaaaidcaabaaaabaaaaaaogbkbaaa
abaaaaaaagiacaaaaaaaaaaaaoaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaafgifcaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaagaaaaaaaagabaaaadaaaaaaaaaaaaahbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaalpdeaaaaaiccaabaaaabaaaaaackiacaaaaaaaaaaa
aoaaaaaaabeaaaaaaaaaaaaadccaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaamnmmmmdmaaaaaaaibcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackiacaaaaaaaaaaaaoaaaaaaaaaaaaalocaabaaaabaaaaaaagijcaaa
aaaaaaaaapaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaialpdcaaaaam
hcaabaaaabaaaaaaagaabaaaabaaaaaajgahbaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaabaaaaaajgahbaaaaaaaaaaa
egacbaaaabaaaaaadbaaaaaiicaabaaaabaaaaaaabeaaaaaaaaaaadpdkiacaaa
aaaaaaaaanaaaaaadhaaaaajocaabaaaaaaaaaaapgapbaaaabaaaaaaagajbaaa
abaaaaaafgaobaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgaobaaaaaaaaaaa
agijcaaaaaaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaajgahbaaaaaaaaaaa
agaabaaaaaaaaaaaegacbaaaacaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
afaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

}
	}
	Pass {
		Name "PREPASS"
		Tags { "LightMode" = "PrePassBase" }
		Fog {Mode Off}
Program "vp" {
// Vertex combos: 1
//   opengl - ALU: 23 to 23
//   d3d9 - ALU: 24 to 24
//   d3d11 - ALU: 15 to 15, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 5 [_Object2World]
Vector 9 [unity_Scale]
Vector 10 [_MainTex_ST]
Vector 11 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 23 ALU
PARAM c[12] = { program.local[0],
		state.matrix.mvp,
		program.local[5..11] };
TEMP R0;
TEMP R1;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, R0, vertex.attrib[14].w;
DP3 R0.y, R1, c[5];
DP3 R0.x, vertex.attrib[14], c[5];
DP3 R0.z, vertex.normal, c[5];
MUL result.texcoord[1].xyz, R0, c[9].w;
DP3 R0.y, R1, c[6];
DP3 R0.x, vertex.attrib[14], c[6];
DP3 R0.z, vertex.normal, c[6];
MUL result.texcoord[2].xyz, R0, c[9].w;
DP3 R0.y, R1, c[7];
DP3 R0.x, vertex.attrib[14], c[7];
DP3 R0.z, vertex.normal, c[7];
MUL result.texcoord[3].xyz, R0, c[9].w;
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[11].xyxy, c[11];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[10], c[10].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 23 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Vector 8 [unity_Scale]
Vector 9 [_MainTex_ST]
Vector 10 [_BodyBumpTex_ST]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r0.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r0, v1.w
dp3 r0.y, r1, c4
dp3 r0.x, v1, c4
dp3 r0.z, v2, c4
mul o3.xyz, r0, c8.w
dp3 r0.y, r1, c5
dp3 r0.x, v1, c5
dp3 r0.z, v2, c5
mul o4.xyz, r0, c8.w
dp3 r0.y, r1, c6
dp3 r0.x, v1, c6
dp3 r0.z, v2, c6
mul o5.xyz, r0, c8.w
mov o2, v5
mad o1.zw, v4.xyxy, c10.xyxy, c10
mad o1.xy, v3, c9, c9.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 256 // 256 used size, 26 vars
Vector 224 [_MainTex_ST] 4
Vector 240 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerDraw" 1
// 32 instructions, 3 temp regs, 0 temp arrays:
// ALU 15 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcefnllppcchjggbniphebolbonekfefhabaaaaaabiagaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcgaaeaaaaeaaaabaabiabaaaa
fjaaaaaeegiocaaaaaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacadaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaoaaaaaaogikcaaaaaaaaaaaaoaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaapaaaaaa
kgiocaaaaaaaaaaaapaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
dgaaaaagbcaabaaaabaaaaaaakiacaaaabaaaaaaamaaaaaadgaaaaagccaabaaa
abaaaaaaakiacaaaabaaaaaaanaaaaaadgaaaaagecaabaaaabaaaaaaakiacaaa
abaaaaaaaoaaaaaabaaaaaahccaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahecaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaai
hccabaaaadaaaaaaegacbaaaacaaaaaapgipcaaaabaaaaaabeaaaaaadgaaaaag
bcaabaaaabaaaaaabkiacaaaabaaaaaaamaaaaaadgaaaaagccaabaaaabaaaaaa
bkiacaaaabaaaaaaanaaaaaadgaaaaagecaabaaaabaaaaaabkiacaaaabaaaaaa
aoaaaaaabaaaaaahccaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbcaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
ecaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaihccabaaa
aeaaaaaaegacbaaaacaaaaaapgipcaaaabaaaaaabeaaaaaadgaaaaagbcaabaaa
abaaaaaackiacaaaabaaaaaaamaaaaaadgaaaaagccaabaaaabaaaaaackiacaaa
abaaaaaaanaaaaaadgaaaaagecaabaaaabaaaaaackiacaaaabaaaaaaaoaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaihccabaaaafaaaaaa
egacbaaaaaaaaaaapgipcaaaabaaaaaabeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  vec3 v_7;
  v_7.x = _Object2World[0].x;
  v_7.y = _Object2World[1].x;
  v_7.z = _Object2World[2].x;
  vec3 v_8;
  v_8.x = _Object2World[0].y;
  v_8.y = _Object2World[1].y;
  v_8.z = _Object2World[2].y;
  vec3 v_9;
  v_9.x = _Object2World[0].z;
  v_9.y = _Object2World[1].z;
  v_9.z = _Object2World[2].z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((tmpvar_6 * v_7) * unity_Scale.w);
  xlv_TEXCOORD2 = ((tmpvar_6 * v_8) * unity_Scale.w);
  xlv_TEXCOORD3 = ((tmpvar_6 * v_9) * unity_Scale.w);
}



#endif
#ifdef FRAGMENT

#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec3 TtoW0;
    highp vec3 TtoW1;
    highp vec3 TtoW2;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 521
lowp vec4 xlat_mutable__SpecColor;
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 521
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 525
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 529
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 533
    surf( surfIN, o);
    lowp vec3 worldN;
    worldN.x = dot( IN.TtoW0, o.Normal);
    worldN.y = dot( IN.TtoW1, o.Normal);
    #line 537
    worldN.z = dot( IN.TtoW2, o.Normal);
    o.Normal = worldN;
    lowp vec4 res;
    res.xyz = ((o.Normal * 0.5) + 0.5);
    #line 541
    res.w = o.Specular;
    return res;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:522(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  vec3 v_7;
  v_7.x = _Object2World[0].x;
  v_7.y = _Object2World[1].x;
  v_7.z = _Object2World[2].x;
  vec3 v_8;
  v_8.x = _Object2World[0].y;
  v_8.y = _Object2World[1].y;
  v_8.z = _Object2World[2].y;
  vec3 v_9;
  v_9.x = _Object2World[0].z;
  v_9.y = _Object2World[1].z;
  v_9.z = _Object2World[2].z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((tmpvar_6 * v_7) * unity_Scale.w);
  xlv_TEXCOORD2 = ((tmpvar_6 * v_8) * unity_Scale.w);
  xlv_TEXCOORD3 = ((tmpvar_6 * v_9) * unity_Scale.w);
}



#endif
#ifdef FRAGMENT

#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec3 TtoW0;
    highp vec3 TtoW1;
    highp vec3 TtoW2;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 521
lowp vec4 xlat_mutable__SpecColor;
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 521
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 525
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 529
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 533
    surf( surfIN, o);
    lowp vec3 worldN;
    worldN.x = dot( IN.TtoW0, o.Normal);
    worldN.y = dot( IN.TtoW1, o.Normal);
    #line 537
    worldN.z = dot( IN.TtoW2, o.Normal);
    o.Normal = worldN;
    lowp vec4 res;
    res.xyz = ((o.Normal * 0.5) + 0.5);
    #line 541
    res.w = o.Specular;
    return res;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:522(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec3 TtoW0;
    highp vec3 TtoW1;
    highp vec3 TtoW2;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 521
#line 507
v2f_surf vert_surf( in appdata_full v ) {
    #line 509
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 513
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    #line 517
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    o.color = v.color;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec3 TtoW0;
    highp vec3 TtoW1;
    highp vec3 TtoW2;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 521
lowp vec4 xlat_mutable__SpecColor;
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 521
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 525
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 529
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 533
    surf( surfIN, o);
    lowp vec3 worldN;
    worldN.x = dot( IN.TtoW0, o.Normal);
    worldN.y = dot( IN.TtoW1, o.Normal);
    #line 537
    worldN.z = dot( IN.TtoW2, o.Normal);
    o.Normal = worldN;
    lowp vec4 res;
    res.xyz = ((o.Normal * 0.5) + 0.5);
    #line 541
    res.w = o.Specular;
    return res;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 1
//   opengl - ALU: 94 to 94, TEX: 4 to 4
//   d3d9 - ALU: 90 to 90, TEX: 4 to 4
//   d3d11 - ALU: 42 to 42, TEX: 4 to 4, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { }
Float 5 [_BumpPower]
Float 6 [_BodyBumpPower]
Float 7 [_BumpDetailPower]
Float 9 [_DetailTexScale]
Float 12 [_Shininess]
Float 13 [_TrimShininess]
Float 14 [_AtlasOffsetX]
Float 15 [_AtlasOffsetY]
Float 16 [_AtlasScaleX]
Float 17 [_AtlasScaleY]
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 94 ALU, 4 TEX
PARAM c[19] = { program.local[0..17],
		{ 1, 0, 2, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MAD R3.xy, R3.wyzw, c[18].z, -c[18].x;
MOV R0.z, c[16].x;
MOV R0.w, c[17].x;
MOV R0.y, c[15].x;
MOV R0.x, c[14];
MAD R0.xy, fragment.texcoord[0].zwzw, R0.zwzw, R0;
TEX R0.yw, R0, texture[4], 2D;
MAD R0.xy, R0.wyzw, c[18].z, -c[18].x;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.z, -R0, c[18].x;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[18].wwxw;
MUL R1.xyz, R1, c[6].x;
MOV R0.w, c[18].x;
ADD R0.w, -R0, c[6].x;
ADD R1.xyz, R1, c[18].wwxw;
CMP R1.xyz, -R0.w, R0, R1;
MOV R0.xy, c[6].x;
MOV R0.z, c[18].y;
MAD R2.xyz, R1, R0, R1;
MUL R0.zw, fragment.texcoord[0], c[9].x;
TEX R0.yw, R0.zwzw, texture[6], 2D;
MAD R1.xy, R0.wyzw, c[18].z, -c[18].x;
DP3 R0.x, R2, R2;
RSQ R0.x, R0.x;
MUL R1.zw, R1.xyxy, R1.xyxy;
MUL R2.xyz, R0.x, R2;
TEX R0.yw, fragment.texcoord[0], texture[5], 2D;
MAD R0.xy, R0.wyzw, c[18].z, -c[18].x;
MUL R3.zw, R0.xyxy, R0.xyxy;
ADD_SAT R2.w, R3.z, R3;
MUL R0.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.w, -R2, c[18].x;
RSQ R2.w, R0.w;
ADD R0.z, -R0, c[18].x;
RSQ R0.w, R0.z;
RCP R0.z, R2.w;
RCP R3.z, R0.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
ADD_SAT R0.w, R1.z, R1;
MOV R0.xy, c[5].x;
MOV R0.z, c[18].y;
MAD R3.xyz, R3, R0, R2;
ADD R0.w, -R0, c[18].x;
RSQ R0.x, R0.w;
RCP R1.z, R0.x;
DP3 R0.w, R3, R3;
RSQ R0.w, R0.w;
ABS R3.w, c[5].x;
MOV R0.z, c[18].y;
MOV R0.xy, c[7].x;
MUL R4.xyz, R1, R0;
MAD R0.xyz, R1, R0, R2;
MAD R4.xyz, R0.w, R3, R4;
DP3 R1.y, R4, R4;
DP3 R1.x, R0, R0;
RSQ R1.w, R1.x;
MUL R0.xyz, R1.w, R0;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R4;
ABS R2.w, c[7].x;
CMP R4.x, -R2.w, c[18], c[18].y;
CMP R1.w, -R3, c[18].x, c[18].y;
MUL R4.y, R1.w, R4.x;
CMP R4.z, -R3.w, c[18].y, c[18].x;
ABS R3.w, R4.y;
CMP R2.w, -R2, c[18].y, c[18].x;
MUL R1.w, R1, R2;
MUL R4.x, R4, R4.z;
CMP R3.w, -R3, c[18].y, c[18].x;
MUL R4.y, R3.w, R4.x;
CMP R0.xyz, -R4.y, R0, R1;
MUL R1.xyz, R0.w, R3;
ABS R0.w, R4.x;
CMP R0.w, -R0, c[18].y, c[18].x;
MUL R0.w, R3, R0;
MUL R3.x, R0.w, R1.w;
ABS R2.w, R1;
CMP R1.xyz, -R3.x, R1, R0;
CMP R1.w, -R2, c[18].y, c[18].x;
MUL R0.x, R0.w, R1.w;
CMP R1.xyz, -R0.x, R2, R1;
MOV R0.w, c[12].x;
ADD R0.w, -R0, c[13].x;
DP3 R0.z, fragment.texcoord[3], R1;
DP3 R0.y, R1, fragment.texcoord[2];
DP3 R0.x, R1, fragment.texcoord[1];
MAD result.color.xyz, R0, c[18].w, c[18].w;
MAD result.color.w, fragment.color.primary.x, R0, c[12].x;
END
# 94 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { }
Float 0 [_BumpPower]
Float 1 [_BodyBumpPower]
Float 2 [_BumpDetailPower]
Float 3 [_DetailTexScale]
Float 4 [_Shininess]
Float 5 [_TrimShininess]
Float 6 [_AtlasOffsetX]
Float 7 [_AtlasOffsetY]
Float 8 [_AtlasScaleX]
Float 9 [_AtlasScaleY]
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
"ps_3_0
; 90 ALU, 4 TEX
dcl_2d s2
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c11, -0.50000000, -1.00000000, 0.50000000, 1.00000000
dcl_texcoord0 v0
dcl_color0 v1.x
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4.xyz
texld r3.yw, v0, s2
mad_pp r3.xy, r3.wyzw, c10.z, c10.w
mov r0.z, c8.x
mov r0.w, c9.x
mov r0.y, c7.x
mov r0.x, c6
mad r0.xy, v0.zwzw, r0.zwzw, r0
texld r0.yw, r0, s4
mad_pp r0.xy, r0.wyzw, c10.z, c10.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c10.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
add r1.xyz, r0, c11.xxyw
mul r1.xyz, r1, c1.x
mov r0.w, c1.x
add r0.w, c10, r0
add r1.xyz, r1, c11.zzww
cmp r1.xyz, -r0.w, r1, r0
mov r0.xy, c1.x
mov r0.z, c10.x
mad r2.xyz, r1, r0, r1
mul r0.xy, v0.zwzw, c3.x
texld r0.yw, r0, s6
mad_pp r1.xy, r0.wyzw, c10.z, c10.w
dp3 r0.z, r2, r2
rsq r0.x, r0.z
mul_pp r1.zw, r1.xyxy, r1.xyxy
mul r2.xyz, r0.x, r2
texld r0.yw, v0, s5
mad_pp r0.xy, r0.wyzw, c10.z, c10.w
mul_pp r3.zw, r0.xyxy, r0.xyxy
add_pp_sat r2.w, r3.z, r3
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.w, -r2, c10.y
rsq_pp r2.w, r0.w
add_pp r0.z, -r0, c10.y
rsq_pp r0.w, r0.z
rcp_pp r0.z, r2.w
rcp_pp r3.z, r0.w
add r3.xyz, r3, -r0
mad r3.xyz, v1.x, r3, r0
add_pp_sat r0.w, r1.z, r1
mov r0.xy, c0.x
mov r0.z, c10.x
mad r3.xyz, r3, r0, r2
add_pp r0.w, -r0, c10.y
rsq_pp r0.x, r0.w
rcp_pp r1.z, r0.x
dp3 r0.w, r3, r3
rsq r0.w, r0.w
abs r3.w, c0.x
mov r0.z, c10.x
mov r0.xy, c2.x
mul r4.xyz, r1, r0
mad r0.xyz, r1, r0, r2
mad r4.xyz, r0.w, r3, r4
dp3 r1.x, r4, r4
dp3 r1.y, r0, r0
rsq r1.w, r1.y
mul r0.xyz, r1.w, r0
rsq r1.x, r1.x
mul r1.xyz, r1.x, r4
abs r2.w, c2.x
cmp r4.x, -r2.w, c10, c10.y
cmp r1.w, -r3, c10.x, c10.y
mul_pp r4.y, r1.w, r4.x
cmp r4.z, -r3.w, c10.y, c10.x
abs_pp r3.w, r4.y
cmp r2.w, -r2, c10.y, c10.x
mul_pp r1.w, r1, r2
mul_pp r4.x, r4, r4.z
cmp_pp r3.w, -r3, c10.y, c10.x
mul_pp r4.y, r3.w, r4.x
cmp_pp r0.xyz, -r4.y, r1, r0
mul r1.xyz, r0.w, r3
abs_pp r0.w, r4.x
cmp_pp r0.w, -r0, c10.y, c10.x
mul_pp r0.w, r3, r0
mul_pp r3.x, r0.w, r1.w
abs_pp r2.w, r1
cmp_pp r1.xyz, -r3.x, r0, r1
cmp_pp r1.w, -r2, c10.y, c10.x
mul_pp r0.x, r0.w, r1.w
cmp_pp r1.xyz, -r0.x, r1, r2
mov_pp r0.w, c5.x
add_pp r0.w, -c4.x, r0
dp3 r0.z, v4, r1
dp3 r0.y, r1, v3
dp3 r0.x, r1, v2
mad_pp oC0.xyz, r0, c11.z, c11.z
mad_pp oC0.w, v1.x, r0, c4.x
"
}

SubProgram "d3d11 " {
Keywords { }
ConstBuffer "$Globals" 256 // 212 used size, 26 vars
Float 144 [_BumpPower]
Float 148 [_BodyBumpPower]
Float 152 [_BumpDetailPower]
Float 164 [_DetailTexScale]
Float 188 [_Shininess]
Float 192 [_TrimShininess]
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_BumpTrimTex] 2D 3
SetTexture 1 [_BodyBumpTex] 2D 2
SetTexture 2 [_BumpMap] 2D 0
SetTexture 3 [_BumpDetailTex] 2D 1
// 68 instructions, 5 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 2 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedinjiipfjnaklgkengoahnkahpafeeipeabaaaaaajaakaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
gmajaaaaeaaaaaaaflacaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaadiaaaaai
bcaabaaaaaaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaamaaaaaadiaaaaai
ccaabaaaaaaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaanaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaajgifcaaaaaaaaaaaamaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
dcaaaaapfcaabaaaaaaaaaaapganbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaaa
aaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaaaaaaaaaialpaaaaaaaaaaaaaaah
dcaabaaaabaaaaaahgapbaaaaaaaaaaahgapbaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaigaabaaaaaaaaaaaigaabaaaaaaaaaaaddaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaaakaabaaa
aaaaaaaaaaaaaaakhcaabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaaaaaamalp
aaaamalpaaaaialpaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaadcaaaaanhcaabaaaaaaaaaaa
fgifcaaaaaaaaaaaajaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaiadpaaaaaaaabnaaaaaiicaabaaaaaaaaaaaabeaaaaaaaaaiadpbkiacaaa
aaaaaaaaajaaaaaadhaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaa
dgaaaaagjcaabaaaabaaaaaafgijcaaaaaaaaaaaajaaaaaadcaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaagacbaaaabaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaogbkbaaaabaaaaaa
fgifcaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaadiaaaaahdcaabaaaabaaaaaapgapbaaaabaaaaaa
egaabaaaabaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadcaaaaaj
hcaabaaaacaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaadaaaaaadcaaaaapdcaabaaaadaaaaaahgapbaaaadaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaa
adaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaaeaaaaaa
egbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaaaaaaaaadcaaaaapdcaabaaa
aeaaaaaahgapbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaaeaaaaaaegaabaaaaeaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaeaaaaaadkaabaaaaaaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaadaaaaaaagbabaaaacaaaaaaegacbaaaadaaaaaaegacbaaa
aeaaaaaadgaaaaagbcaabaaaaeaaaaaaakiacaaaaaaaaaaaajaaaaaadgaaaaaf
ecaabaaaaeaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaadaaaaaaegacbaaa
adaaaaaaagacbaaaaeaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaa
dcaaaaajhcaabaaaabaaaaaaegacbaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaabiaaaaaldcaabaaaadaaaaaaigiacaaaaaaaaaaaajaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadjaaaaalmcaabaaaadaaaaaakgiccaaa
aaaaaaaaajaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaah
dcaabaaaadaaaaaaogakbaaaadaaaaaaegaabaaaadaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaadaaaaaadkaabaaaadaaaaaadhaaaaajhcaabaaaaaaaaaaa
fgafbaaaadaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaadhaaaaajhcaabaaa
aaaaaaaaagaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadhaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaa
egacbaaaaaaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaaaeaaaaaaegacbaaa
aaaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaaaaaaaaaa
dcaaaaaphccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaadpaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaaaaaaaaak
bcaabaaaaaaaaaaadkiacaiaebaaaaaaaaaaaaaaalaaaaaaakiacaaaaaaaaaaa
amaaaaaadcaaaaakiccabaaaaaaaaaaaakbabaaaacaaaaaaakaabaaaaaaaaaaa
dkiacaaaaaaaaaaaalaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { }
"!!GLES3"
}

}
	}
	Pass {
		Name "PREPASS"
		Tags { "LightMode" = "PrePassFinal" }
		ZWrite Off
Program "vp" {
// Vertex combos: 6
//   opengl - ALU: 22 to 30
//   d3d9 - ALU: 22 to 30
//   d3d11 - ALU: 10 to 15, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 9 [_ProjectionParams]
Vector 10 [unity_SHAr]
Vector 11 [unity_SHAg]
Vector 12 [unity_SHAb]
Vector 13 [unity_SHBr]
Vector 14 [unity_SHBg]
Vector 15 [unity_SHBb]
Vector 16 [unity_SHC]
Matrix 5 [_Object2World]
Vector 17 [unity_Scale]
Vector 18 [_MainTex_ST]
Vector 19 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 30 ALU
PARAM c[20] = { { 0.5, 1 },
		state.matrix.mvp,
		program.local[5..19] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R1.xyz, vertex.normal, c[17].w;
DP3 R2.w, R1, c[6];
DP3 R0.x, R1, c[5];
DP3 R0.z, R1, c[7];
MOV R0.y, R2.w;
MUL R1, R0.xyzz, R0.yzzx;
MOV R0.w, c[0].y;
DP4 R2.z, R0, c[12];
DP4 R2.y, R0, c[11];
DP4 R2.x, R0, c[10];
MUL R0.y, R2.w, R2.w;
DP4 R3.z, R1, c[15];
DP4 R3.y, R1, c[14];
DP4 R3.x, R1, c[13];
DP4 R1.w, vertex.position, c[4];
DP4 R1.z, vertex.position, c[3];
MAD R0.x, R0, R0, -R0.y;
ADD R3.xyz, R2, R3;
MUL R2.xyz, R0.x, c[16];
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
MUL R0.xyz, R1.xyww, c[0].x;
MUL R0.y, R0, c[9].x;
ADD result.texcoord[2].xyz, R3, R2;
ADD result.texcoord[1].xy, R0, R0.z;
MOV result.position, R1;
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R1;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[19].xyxy, c[19];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[18], c[18].zwzw;
END
# 30 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_ProjectionParams]
Vector 9 [_ScreenParams]
Vector 10 [unity_SHAr]
Vector 11 [unity_SHAg]
Vector 12 [unity_SHAb]
Vector 13 [unity_SHBr]
Vector 14 [unity_SHBg]
Vector 15 [unity_SHBb]
Vector 16 [unity_SHC]
Matrix 4 [_Object2World]
Vector 17 [unity_Scale]
Vector 18 [_MainTex_ST]
Vector 19 [_BodyBumpTex_ST]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
def c20, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_texcoord1 v3
dcl_color0 v4
mul r1.xyz, v1, c17.w
dp3 r2.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r2.w
mul r1, r0.xyzz, r0.yzzx
mov r0.w, c20.y
dp4 r2.z, r0, c12
dp4 r2.y, r0, c11
dp4 r2.x, r0, c10
mul r0.y, r2.w, r2.w
dp4 r3.z, r1, c15
dp4 r3.y, r1, c14
dp4 r3.x, r1, c13
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
mad r0.x, r0, r0, -r0.y
add r3.xyz, r2, r3
mul r2.xyz, r0.x, c16
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c20.x
mul r0.y, r0, c8.x
add o4.xyz, r3, r2
mad o3.xy, r0.z, c9.zwzw, r0
mov o0, r1
mov o2, v4
mov o3.zw, r1
mad o1.zw, v3.xyxy, c19.xyxy, c19
mad o1.xy, v2, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 272 // 256 used size, 27 vars
Vector 224 [_MainTex_ST] 4
Vector 240 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 29 instructions, 4 temp regs, 0 temp arrays:
// ALU 15 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedfdmeamemoacfcficmhbgobbjimfofdahabaaaaaaaiagaaaaadaaaaaa
cmaaaaaapeaaaaaajiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefcgiaeaaaa
eaaaabaabkabaaaafjaaaaaeegiocaaaaaaaaaaabaaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaaeegiocaaa
adaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaa
gfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaoaaaaaaogikcaaaaaaaaaaa
aoaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
apaaaaaakgiocaaaaaaaaaaaapaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
hcaabaaaaaaaaaaaegbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
lcaabaaaaaaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaibaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaa
aaaaaaaaegadbaaaaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaiadp
bbaaaaaibcaabaaaabaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaaaaaaaaa
bbaaaaaiccaabaaaabaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaaaaaaaaa
bbaaaaaiecaabaaaabaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaacaaaaaajgacbaaaaaaaaaaaegakbaaaaaaaaaaabbaaaaai
bcaabaaaadaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaacaaaaaabbaaaaai
ccaabaaaadaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaacaaaaaabbaaaaai
ecaabaaaadaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaahccaabaaa
aaaaaaaabkaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaadcaaaaak
hccabaaaaeaaaaaaegiccaaaacaaaaaabiaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef HDR_LIGHT_PREPASS_OFF
    #define HDR_LIGHT_PREPASS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 520
lowp vec4 xlat_mutable__SpecColor;
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 520
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 524
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 528
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 532
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    #line 536
    light.xyz += IN.vlight;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:521(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef HDR_LIGHT_PREPASS_OFF
    #define HDR_LIGHT_PREPASS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 520
lowp vec4 xlat_mutable__SpecColor;
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 520
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 524
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 528
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 532
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    #line 536
    light.xyz += IN.vlight;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:521(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 520
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 506
v2f_surf vert_surf( in appdata_full v ) {
    #line 508
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 512
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    o.vlight = ShadeSH9( vec4( worldN, 1.0));
    #line 516
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 520
lowp vec4 xlat_mutable__SpecColor;
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 520
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 524
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 528
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 532
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    #line 536
    light.xyz += IN.vlight;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_ProjectionParams]
Vector 14 [unity_ShadowFadeCenterAndType]
Matrix 9 [_Object2World]
Vector 15 [unity_LightmapST]
Vector 16 [_MainTex_ST]
Vector 17 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 22 ALU
PARAM c[18] = { { 0.5, 1 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		program.local[9..17] };
TEMP R0;
TEMP R1;
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
MUL R1.xyz, R0.xyww, c[0].x;
MUL R1.y, R1, c[13].x;
ADD result.texcoord[1].xy, R1, R1.z;
MOV result.position, R0;
MOV R0.x, c[0].y;
ADD R0.y, R0.x, -c[14].w;
DP4 R0.x, vertex.position, c[3];
DP4 R1.z, vertex.position, c[11];
DP4 R1.x, vertex.position, c[9];
DP4 R1.y, vertex.position, c[10];
ADD R1.xyz, R1, -c[14];
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R0;
MUL result.texcoord[3].xyz, R1, c[14].w;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[17].xyxy, c[17];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[16], c[16].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[1], c[15], c[15].zwzw;
MUL result.texcoord[3].w, -R0.x, R0.y;
END
# 22 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 12 [_ProjectionParams]
Vector 13 [_ScreenParams]
Vector 14 [unity_ShadowFadeCenterAndType]
Matrix 8 [_Object2World]
Vector 15 [unity_LightmapST]
Vector 16 [_MainTex_ST]
Vector 17 [_BodyBumpTex_ST]
"vs_3_0
; 22 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_texcoord0 v1
dcl_texcoord1 v2
dcl_color0 v3
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r1.xyz, r0.xyww, c18.x
mul r1.y, r1, c12.x
mad o3.xy, r1.z, c13.zwzw, r1
mov o0, r0
mov r0.x, c14.w
add r0.y, c18, -r0.x
dp4 r0.x, v0, c2
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r1.xyz, r1, -c14
mov o2, v3
mov o3.zw, r0
mul o5.xyz, r1, c14.w
mad o1.zw, v2.xyxy, c17.xyxy, c17
mad o1.xy, v1, c16, c16.zwzw
mad o4.xy, v2, c15, c15.zwzw
mul o5.w, -r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 304 // 272 used size, 29 vars
Vector 224 [unity_LightmapST] 4
Vector 240 [_MainTex_ST] 4
Vector 256 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 416 used size, 8 vars
Vector 400 [unity_ShadowFadeCenterAndType] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 26 instructions, 2 temp regs, 0 temp arrays:
// ALU 10 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedfafmihabhjfpkhdmfcmnhgpljglkalmnabaaaaaapmafaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefceeaeaaaaeaaaabaabbabaaaa
fjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabkaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaa
aeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaapaaaaaaogikcaaaaaaaaaaaapaaaaaadcaaaaal
mccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaabaaaaaaakgiocaaa
aaaaaaaabaaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaa
adaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaaldccabaaaaeaaaaaa
egbabaaaaeaaaaaaegiacaaaaaaaaaaaaoaaaaaaogikcaaaaaaaaaaaaoaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaabjaaaaaadiaaaaai
hccabaaaafaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabjaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaa
dkiacaiaebaaaaaaacaaaaaabjaaaaaaabeaaaaaaaaaiadpdiaaaaaiiccabaaa
afaaaaaabkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef HDR_LIGHT_PREPASS_OFF
    #define HDR_LIGHT_PREPASS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 522
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    #line 542
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmtex2 = texture2D( unity_LightmapInd, IN.lmap.xy);
    mediump float lmFade = ((length(IN.lmapFadePos) * unity_LightmapFade.z) + unity_LightmapFade.w);
    mediump vec3 lmFull = DecodeLightmap( lmtex);
    #line 546
    mediump vec3 lmIndirect = DecodeLightmap( lmtex2);
    mediump vec3 lm = mix( lmIndirect, lmFull, vec3( xll_saturate_f(lmFade)));
    light.xyz += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    #line 550
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.lmapFadePos = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:527(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef HDR_LIGHT_PREPASS_OFF
    #define HDR_LIGHT_PREPASS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 522
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return ((8.0 * color.w) * color.xyz);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    #line 542
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmtex2 = texture2D( unity_LightmapInd, IN.lmap.xy);
    mediump float lmFade = ((length(IN.lmapFadePos) * unity_LightmapFade.z) + unity_LightmapFade.w);
    mediump vec3 lmFull = DecodeLightmap( lmtex);
    #line 546
    mediump vec3 lmIndirect = DecodeLightmap( lmtex2);
    mediump vec3 lm = mix( lmIndirect, lmFull, vec3( xll_saturate_f(lmFade)));
    light.xyz += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    #line 550
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.lmapFadePos = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:527(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 522
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 526
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 508
v2f_surf vert_surf( in appdata_full v ) {
    #line 510
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 514
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    o.lmapFadePos.xyz = (((_Object2World * v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
    #line 518
    o.lmapFadePos.w = ((-(glstate_matrix_modelview0 * v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec2(xl_retval.lmap);
    xlv_TEXCOORD3 = vec4(xl_retval.lmapFadePos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 522
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    #line 542
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmtex2 = texture( unity_LightmapInd, IN.lmap.xy);
    mediump float lmFade = ((length(IN.lmapFadePos) * unity_LightmapFade.z) + unity_LightmapFade.w);
    mediump vec3 lmFull = DecodeLightmap( lmtex);
    #line 546
    mediump vec3 lmIndirect = DecodeLightmap( lmtex2);
    mediump vec3 lm = mix( lmIndirect, lmFull, vec3( xll_saturate_f(lmFade)));
    light.xyz += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    #line 550
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.lmapFadePos = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 9 [_WorldSpaceCameraPos]
Vector 10 [_ProjectionParams]
Matrix 5 [_World2Object]
Vector 11 [unity_Scale]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 26 ALU
PARAM c[15] = { { 0.5, 1 },
		state.matrix.mvp,
		program.local[5..14] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R3.xyz, R0, vertex.attrib[14].w;
MOV R1.xyz, c[9];
MOV R1.w, c[0].y;
DP4 R2.z, R1, c[7];
DP4 R2.x, R1, c[5];
DP4 R2.y, R1, c[6];
MAD R1.xyz, R2, c[11].w, -vertex.position;
DP4 R0.w, vertex.position, c[4];
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R2.xyz, R0.xyww, c[0].x;
MUL R2.y, R2, c[10].x;
DP3 result.texcoord[3].y, R1, R3;
ADD result.texcoord[1].xy, R2, R2.z;
DP3 result.texcoord[3].z, vertex.normal, R1;
DP3 result.texcoord[3].x, R1, vertex.attrib[14];
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[14].xyxy, c[14];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[13], c[13].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[1], c[12], c[12].zwzw;
END
# 26 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_World2Object]
Vector 11 [unity_Scale]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"vs_3_0
; 27 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c15, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r0.xyz, v2.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v1.w
mov r1.xyz, c8
mov r1.w, c15.y
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mad r1.xyz, r2, c11.w, -v0
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c15.x
mul r2.y, r2, c9.x
dp3 o5.y, r1, r3
mad o3.xy, r2.z, c10.zwzw, r2
dp3 o5.z, v2, r1
dp3 o5.x, r1, v1
mov o0, r0
mov o2, v5
mov o3.zw, r0
mad o1.zw, v4.xyxy, c14.xyxy, c14
mad o1.xy, v3, c13, c13.zwzw
mad o4.xy, v4, c12, c12.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 304 // 272 used size, 29 vars
Vector 224 [unity_LightmapST] 4
Vector 240 [_MainTex_ST] 4
Vector 256 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 25 instructions, 2 temp regs, 0 temp arrays:
// ALU 11 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbfnicpboamjbcbhkpcaellnpecooghdabaaaaaamiafaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcbaaeaaaaeaaaabaaaeabaaaa
fjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaapaaaaaaogikcaaaaaaaaaaa
apaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
baaaaaaakgiocaaaaaaaaaaabaaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaal
dccabaaaaeaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaaaoaaaaaaogikcaaa
aaaaaaaaaoaaaaaadiaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaa
acaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaacaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_11).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_ON
    #define DIRLIGHTMAP_ON 1
#endif
#ifndef HDR_LIGHT_PREPASS_OFF
    #define HDR_LIGHT_PREPASS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 522
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 526
uniform lowp vec4 unity_Ambient;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 527
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 530
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 534
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 538
    o.Gloss = 0.0;
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    #line 542
    light = (-log2(light));
    mediump vec3 specColor;
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture2D( unity_LightmapInd, IN.lmap.xy);
    #line 546
    mediump vec4 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor);
    light += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:528(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_11).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_ON
    #define DIRLIGHTMAP_ON 1
#endif
#ifndef HDR_LIGHT_PREPASS_OFF
    #define HDR_LIGHT_PREPASS_OFF 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 522
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 526
uniform lowp vec4 unity_Ambient;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return ((8.0 * color.w) * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 527
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 530
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 534
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 538
    o.Gloss = 0.0;
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    #line 542
    light = (-log2(light));
    mediump vec3 specColor;
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture2D( unity_LightmapInd, IN.lmap.xy);
    #line 546
    mediump vec4 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor);
    light += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:528(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 522
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 526
uniform lowp vec4 unity_Ambient;
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 508
v2f_surf vert_surf( in appdata_full v ) {
    #line 510
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 514
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 518
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.viewDir = (rotation * ObjSpaceViewDir( v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec2(xl_retval.lmap);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 522
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 526
uniform lowp vec4 unity_Ambient;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 527
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 530
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 534
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 538
    o.Gloss = 0.0;
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    #line 542
    light = (-log2(light));
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    #line 546
    mediump vec4 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor);
    light += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 9 [_ProjectionParams]
Vector 10 [unity_SHAr]
Vector 11 [unity_SHAg]
Vector 12 [unity_SHAb]
Vector 13 [unity_SHBr]
Vector 14 [unity_SHBg]
Vector 15 [unity_SHBb]
Vector 16 [unity_SHC]
Matrix 5 [_Object2World]
Vector 17 [unity_Scale]
Vector 18 [_MainTex_ST]
Vector 19 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 30 ALU
PARAM c[20] = { { 0.5, 1 },
		state.matrix.mvp,
		program.local[5..19] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R1.xyz, vertex.normal, c[17].w;
DP3 R2.w, R1, c[6];
DP3 R0.x, R1, c[5];
DP3 R0.z, R1, c[7];
MOV R0.y, R2.w;
MUL R1, R0.xyzz, R0.yzzx;
MOV R0.w, c[0].y;
DP4 R2.z, R0, c[12];
DP4 R2.y, R0, c[11];
DP4 R2.x, R0, c[10];
MUL R0.y, R2.w, R2.w;
DP4 R3.z, R1, c[15];
DP4 R3.y, R1, c[14];
DP4 R3.x, R1, c[13];
DP4 R1.w, vertex.position, c[4];
DP4 R1.z, vertex.position, c[3];
MAD R0.x, R0, R0, -R0.y;
ADD R3.xyz, R2, R3;
MUL R2.xyz, R0.x, c[16];
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
MUL R0.xyz, R1.xyww, c[0].x;
MUL R0.y, R0, c[9].x;
ADD result.texcoord[2].xyz, R3, R2;
ADD result.texcoord[1].xy, R0, R0.z;
MOV result.position, R1;
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R1;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[19].xyxy, c[19];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[18], c[18].zwzw;
END
# 30 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_ProjectionParams]
Vector 9 [_ScreenParams]
Vector 10 [unity_SHAr]
Vector 11 [unity_SHAg]
Vector 12 [unity_SHAb]
Vector 13 [unity_SHBr]
Vector 14 [unity_SHBg]
Vector 15 [unity_SHBb]
Vector 16 [unity_SHC]
Matrix 4 [_Object2World]
Vector 17 [unity_Scale]
Vector 18 [_MainTex_ST]
Vector 19 [_BodyBumpTex_ST]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
def c20, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_texcoord1 v3
dcl_color0 v4
mul r1.xyz, v1, c17.w
dp3 r2.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r2.w
mul r1, r0.xyzz, r0.yzzx
mov r0.w, c20.y
dp4 r2.z, r0, c12
dp4 r2.y, r0, c11
dp4 r2.x, r0, c10
mul r0.y, r2.w, r2.w
dp4 r3.z, r1, c15
dp4 r3.y, r1, c14
dp4 r3.x, r1, c13
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
mad r0.x, r0, r0, -r0.y
add r3.xyz, r2, r3
mul r2.xyz, r0.x, c16
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c20.x
mul r0.y, r0, c8.x
add o4.xyz, r3, r2
mad o3.xy, r0.z, c9.zwzw, r0
mov o0, r1
mov o2, v4
mov o3.zw, r1
mad o1.zw, v3.xyxy, c19.xyxy, c19
mad o1.xy, v2, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 272 // 256 used size, 27 vars
Vector 224 [_MainTex_ST] 4
Vector 240 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 29 instructions, 4 temp regs, 0 temp arrays:
// ALU 15 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedfdmeamemoacfcficmhbgobbjimfofdahabaaaaaaaiagaaaaadaaaaaa
cmaaaaaapeaaaaaajiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefcgiaeaaaa
eaaaabaabkabaaaafjaaaaaeegiocaaaaaaaaaaabaaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaaeegiocaaa
adaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaa
gfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaoaaaaaaogikcaaaaaaaaaaa
aoaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
apaaaaaakgiocaaaaaaaaaaaapaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
hcaabaaaaaaaaaaaegbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
lcaabaaaaaaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaibaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaa
aaaaaaaaegadbaaaaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaiadp
bbaaaaaibcaabaaaabaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaaaaaaaaa
bbaaaaaiccaabaaaabaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaaaaaaaaa
bbaaaaaiecaabaaaabaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaacaaaaaajgacbaaaaaaaaaaaegakbaaaaaaaaaaabbaaaaai
bcaabaaaadaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaacaaaaaabbaaaaai
ccaabaaaadaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaacaaaaaabbaaaaai
ecaabaaaadaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaahccaabaaa
aaaaaaaabkaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaadcaaaaak
hccabaaaaeaaaaaaegiccaaaacaaaaaabiaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef HDR_LIGHT_PREPASS_ON
    #define HDR_LIGHT_PREPASS_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 520
lowp vec4 xlat_mutable__SpecColor;
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 520
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 524
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 528
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 532
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light.xyz += IN.vlight;
    #line 536
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:521(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_OFF
    #define LIGHTMAP_OFF 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef HDR_LIGHT_PREPASS_ON
    #define HDR_LIGHT_PREPASS_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 520
lowp vec4 xlat_mutable__SpecColor;
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 520
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 524
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 528
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 532
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light.xyz += IN.vlight;
    #line 536
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:521(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 520
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 506
v2f_surf vert_surf( in appdata_full v ) {
    #line 508
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 512
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    o.vlight = ShadeSH9( vec4( worldN, 1.0));
    #line 516
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 504
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 520
lowp vec4 xlat_mutable__SpecColor;
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 520
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 524
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 528
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 532
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light.xyz += IN.vlight;
    #line 536
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_ProjectionParams]
Vector 14 [unity_ShadowFadeCenterAndType]
Matrix 9 [_Object2World]
Vector 15 [unity_LightmapST]
Vector 16 [_MainTex_ST]
Vector 17 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 22 ALU
PARAM c[18] = { { 0.5, 1 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		program.local[9..17] };
TEMP R0;
TEMP R1;
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
MUL R1.xyz, R0.xyww, c[0].x;
MUL R1.y, R1, c[13].x;
ADD result.texcoord[1].xy, R1, R1.z;
MOV result.position, R0;
MOV R0.x, c[0].y;
ADD R0.y, R0.x, -c[14].w;
DP4 R0.x, vertex.position, c[3];
DP4 R1.z, vertex.position, c[11];
DP4 R1.x, vertex.position, c[9];
DP4 R1.y, vertex.position, c[10];
ADD R1.xyz, R1, -c[14];
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R0;
MUL result.texcoord[3].xyz, R1, c[14].w;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[17].xyxy, c[17];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[16], c[16].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[1], c[15], c[15].zwzw;
MUL result.texcoord[3].w, -R0.x, R0.y;
END
# 22 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 12 [_ProjectionParams]
Vector 13 [_ScreenParams]
Vector 14 [unity_ShadowFadeCenterAndType]
Matrix 8 [_Object2World]
Vector 15 [unity_LightmapST]
Vector 16 [_MainTex_ST]
Vector 17 [_BodyBumpTex_ST]
"vs_3_0
; 22 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_texcoord0 v1
dcl_texcoord1 v2
dcl_color0 v3
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r1.xyz, r0.xyww, c18.x
mul r1.y, r1, c12.x
mad o3.xy, r1.z, c13.zwzw, r1
mov o0, r0
mov r0.x, c14.w
add r0.y, c18, -r0.x
dp4 r0.x, v0, c2
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r1.xyz, r1, -c14
mov o2, v3
mov o3.zw, r0
mul o5.xyz, r1, c14.w
mad o1.zw, v2.xyxy, c17.xyxy, c17
mad o1.xy, v1, c16, c16.zwzw
mad o4.xy, v2, c15, c15.zwzw
mul o5.w, -r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 304 // 272 used size, 29 vars
Vector 224 [unity_LightmapST] 4
Vector 240 [_MainTex_ST] 4
Vector 256 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 416 used size, 8 vars
Vector 400 [unity_ShadowFadeCenterAndType] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 26 instructions, 2 temp regs, 0 temp arrays:
// ALU 10 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedfafmihabhjfpkhdmfcmnhgpljglkalmnabaaaaaapmafaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefceeaeaaaaeaaaabaabbabaaaa
fjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabkaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaa
aeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaapaaaaaaogikcaaaaaaaaaaaapaaaaaadcaaaaal
mccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaabaaaaaaakgiocaaa
aaaaaaaabaaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaa
adaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaaldccabaaaaeaaaaaa
egbabaaaaeaaaaaaegiacaaaaaaaaaaaaoaaaaaaogikcaaaaaaaaaaaaoaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaabjaaaaaadiaaaaai
hccabaaaafaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabjaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaa
dkiacaiaebaaaaaaacaaaaaabjaaaaaaabeaaaaaaaaaiadpdiaaaaaiiccabaaa
afaaaaaabkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef HDR_LIGHT_PREPASS_ON
    #define HDR_LIGHT_PREPASS_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 522
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    #line 542
    lowp vec4 lmtex2 = texture2D( unity_LightmapInd, IN.lmap.xy);
    mediump float lmFade = ((length(IN.lmapFadePos) * unity_LightmapFade.z) + unity_LightmapFade.w);
    mediump vec3 lmFull = DecodeLightmap( lmtex);
    mediump vec3 lmIndirect = DecodeLightmap( lmtex2);
    #line 546
    mediump vec3 lm = mix( lmIndirect, lmFull, vec3( xll_saturate_f(lmFade)));
    light.xyz += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.lmapFadePos = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:527(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_OFF
    #define DIRLIGHTMAP_OFF 1
#endif
#ifndef HDR_LIGHT_PREPASS_ON
    #define HDR_LIGHT_PREPASS_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 522
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return ((8.0 * color.w) * color.xyz);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    #line 542
    lowp vec4 lmtex2 = texture2D( unity_LightmapInd, IN.lmap.xy);
    mediump float lmFade = ((length(IN.lmapFadePos) * unity_LightmapFade.z) + unity_LightmapFade.w);
    mediump vec3 lmFull = DecodeLightmap( lmtex);
    mediump vec3 lmIndirect = DecodeLightmap( lmtex2);
    #line 546
    mediump vec3 lm = mix( lmIndirect, lmFull, vec3( xll_saturate_f(lmFade)));
    light.xyz += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.lmapFadePos = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:527(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 522
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 526
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 508
v2f_surf vert_surf( in appdata_full v ) {
    #line 510
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 514
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    o.lmapFadePos.xyz = (((_Object2World * v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
    #line 518
    o.lmapFadePos.w = ((-(glstate_matrix_modelview0 * v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec2(xl_retval.lmap);
    xlv_TEXCOORD3 = vec4(xl_retval.lmapFadePos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 522
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 526
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 526
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 530
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 534
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 538
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    #line 542
    lowp vec4 lmtex2 = texture( unity_LightmapInd, IN.lmap.xy);
    mediump float lmFade = ((length(IN.lmapFadePos) * unity_LightmapFade.z) + unity_LightmapFade.w);
    mediump vec3 lmFull = DecodeLightmap( lmtex);
    mediump vec3 lmIndirect = DecodeLightmap( lmtex2);
    #line 546
    mediump vec3 lm = mix( lmIndirect, lmFull, vec3( xll_saturate_f(lmFade)));
    light.xyz += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.lmapFadePos = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 9 [_WorldSpaceCameraPos]
Vector 10 [_ProjectionParams]
Matrix 5 [_World2Object]
Vector 11 [unity_Scale]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"3.0-!!ARBvp1.0
# 26 ALU
PARAM c[15] = { { 0.5, 1 },
		state.matrix.mvp,
		program.local[5..14] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R3.xyz, R0, vertex.attrib[14].w;
MOV R1.xyz, c[9];
MOV R1.w, c[0].y;
DP4 R2.z, R1, c[7];
DP4 R2.x, R1, c[5];
DP4 R2.y, R1, c[6];
MAD R1.xyz, R2, c[11].w, -vertex.position;
DP4 R0.w, vertex.position, c[4];
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R2.xyz, R0.xyww, c[0].x;
MUL R2.y, R2, c[10].x;
DP3 result.texcoord[3].y, R1, R3;
ADD result.texcoord[1].xy, R2, R2.z;
DP3 result.texcoord[3].z, vertex.normal, R1;
DP3 result.texcoord[3].x, R1, vertex.attrib[14];
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[14].xyxy, c[14];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[13], c[13].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[1], c[12], c[12].zwzw;
END
# 26 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_World2Object]
Vector 11 [unity_Scale]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"vs_3_0
; 27 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
def c15, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r0.xyz, v2.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v1.w
mov r1.xyz, c8
mov r1.w, c15.y
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mad r1.xyz, r2, c11.w, -v0
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c15.x
mul r2.y, r2, c9.x
dp3 o5.y, r1, r3
mad o3.xy, r2.z, c10.zwzw, r2
dp3 o5.z, v2, r1
dp3 o5.x, r1, v1
mov o0, r0
mov o2, v5
mov o3.zw, r0
mad o1.zw, v4.xyxy, c14.xyxy, c14
mad o1.xy, v3, c13, c13.zwzw
mad o4.xy, v4, c12, c12.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 304 // 272 used size, 29 vars
Vector 224 [unity_LightmapST] 4
Vector 240 [_MainTex_ST] 4
Vector 256 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 25 instructions, 2 temp regs, 0 temp arrays:
// ALU 11 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbfnicpboamjbcbhkpcaellnpecooghdabaaaaaamiafaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcbaaeaaaaeaaaabaaaeabaaaa
fjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaapaaaaaaogikcaaaaaaaaaaa
apaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
baaaaaaakgiocaaaaaaaaaaabaaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaal
dccabaaaaeaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaaaoaaaaaaogikcaaa
aaaaaaaaaoaaaaaadiaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaa
acaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaacaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_11).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_ON
    #define DIRLIGHTMAP_ON 1
#endif
#ifndef HDR_LIGHT_PREPASS_ON
    #define HDR_LIGHT_PREPASS_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 522
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 526
uniform lowp vec4 unity_Ambient;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 527
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 530
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 534
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 538
    o.Gloss = 0.0;
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    #line 542
    mediump vec3 specColor;
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture2D( unity_LightmapInd, IN.lmap.xy);
    mediump vec4 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor);
    #line 546
    light += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:528(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_11).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

#ifndef LIGHTMAP_ON
    #define LIGHTMAP_ON 1
#endif
#ifndef DIRLIGHTMAP_ON
    #define DIRLIGHTMAP_ON 1
#endif
#ifndef HDR_LIGHT_PREPASS_ON
    #define HDR_LIGHT_PREPASS_ON 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#ifndef SHADER_API_DESKTOP
    #define SHADER_API_DESKTOP 1
#endif
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 522
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 526
uniform lowp vec4 unity_Ambient;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return ((8.0 * color.w) * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 264
lowp vec3 UnpackNormalDXT5nm( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    #line 268
    normal.z = sqrt((1.0 - xll_saturate_f(dot( normal.xy, normal.xy))));
    return normal;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return UnpackNormalDXT5nm( packednormal);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture2D( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture2D( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture2D( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture2D( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture2D( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture2D( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture2D( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture2D( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 527
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 530
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 534
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 538
    o.Gloss = 0.0;
    surf( surfIN, o);
    mediump vec4 light = texture2DProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    #line 542
    mediump vec3 specColor;
    lowp vec4 lmtex = texture2D( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture2D( unity_LightmapInd, IN.lmap.xy);
    mediump vec4 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor);
    #line 546
    light += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}
/* NOTE: GLSL optimization failed
0:528(34): error: identifier `xlat_mutable__SpecColor' uses reserved `__' string
*/


#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 522
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 526
uniform lowp vec4 unity_Ambient;
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 508
v2f_surf vert_surf( in appdata_full v ) {
    #line 510
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 514
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 518
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.viewDir = (rotation * ObjSpaceViewDir( v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec2(xl_retval.lmap);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 453
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 495
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BumpDetailTex;
uniform sampler2D _BodyBumpTex;
#line 429
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform mediump vec3 _Color;
#line 433
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _TrimSpecColor;
uniform mediump vec3 _MainSpecColor;
uniform mediump vec3 _VertexMaskColor;
#line 437
uniform mediump vec3 _BodyOcclusionColor;
uniform highp float _BodyOcclusionPower;
uniform highp float _BumpPower;
uniform highp float _BodyBumpPower;
#line 441
uniform highp float _BumpDetailPower;
uniform highp float _DetailTexEnable;
uniform highp float _DetailTexOffset;
uniform highp float _DetailTexScale;
#line 445
uniform highp float _DetailTexPower;
uniform mediump vec3 _DetailTexColor;
uniform mediump float _Shininess;
uniform mediump float _TrimShininess;
#line 449
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
#line 460
#line 505
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 522
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 526
uniform lowp vec4 unity_Ambient;
lowp vec4 xlat_mutable__SpecColor;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * xlat_mutable__SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * xlat_mutable__SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * xlat_mutable__SpecColor.w));
    #line 368
    return c;
}
#line 409
highp vec3 ApplyColorContrast( in highp vec3 colorA, in highp float contrast ) {
    highp vec3 OUT;
    OUT = (((colorA - 0.5) * max( contrast, 0.0)) + 0.025);
    #line 413
    return OUT;
}
#line 403
highp vec3 ClampUnit( in highp vec3 colorA ) {
    #line 405
    highp vec3 OUT;
    OUT = clamp( colorA, vec3( 0.0, 0.0, 0.0), vec3( 1.0, 1.0, 1.0));
    return OUT;
}
#line 415
highp vec3 CombineColorDetail( in highp vec3 colorA, in highp vec3 detail, in highp float detailPower, in mediump vec3 detailColor ) {
    #line 417
    highp vec3 OUT;
    highp vec3 diff;
    highp vec3 contrast;
    contrast = ClampUnit( ApplyColorContrast( detail, detailPower));
    #line 421
    diff = (vec3( 1.0, 1.0, 1.0) - contrast);
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), detailColor, (diff * detailPower)));
    return OUT;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 395
highp vec3 CombineOcclusion( in highp vec3 colorA, in highp vec3 occlusion, in highp float occPower, in mediump vec3 occColor ) {
    #line 397
    highp vec3 OUT;
    highp vec3 diff;
    diff = clamp( ((vec3( 1.0, 1.0, 1.0) - occlusion) * occPower), vec3( 0.0), vec3( 1.0));
    OUT = (colorA * mix( vec3( 1.0, 1.0, 1.0), occColor, diff));
    #line 401
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 464
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 468
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    highp vec3 bumpDetail = UnpackNormal( texture( _BumpDetailTex, (IN.uv2_BodyBumpTex * _DetailTexScale)));
    highp vec3 detailTex = (texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).xxx + texture( _BumpDetailTex, ((IN.uv2_BodyBumpTex + _DetailTexOffset) * _DetailTexScale)).yyy);
    mediump float trimMask = IN.color.x;
    #line 472
    mediump float vertexColorMask = IN.color.y;
    mediump vec3 vertexColor = mix( vec3( 1.0, 1.0, 1.0), _VertexMaskColor, vec3( vertexColorMask));
    highp vec3 mainTrimDiff = (mix( (mainTex * _Color), (trimDifTex * _TrimColor), vec3( trimMask)) * vertexColor);
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    #line 476
    mediump vec3 mainTrimSpecColor = mix( _MainSpecColor, _TrimSpecColor, vec3( trimMask));
    if ((_DetailTexEnable > 0.5)){
        o.Albedo = CombineColorDetail( CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor), detailTex, _DetailTexPower, _DetailTexColor);
    }
    else{
        o.Albedo = CombineOcclusion( mainTrimDiff, vec3( bodyOcc), _BodyOcclusionPower, _BodyOcclusionColor);
    }
    #line 482
    o.Gloss = mainTrimDiff.y;
    xlat_mutable__SpecColor = (xlat_mutable__SpecColor * vec4( mainTrimSpecColor, 1.0));
    o.Specular = mix( _Shininess, _TrimShininess, trimMask);
    if ((_BodyBumpPower <= 1.0)){
        #line 487
        bodyBump = mix( vec3( 0.5, 0.5, 1.0), bodyBump, vec3( _BodyBumpPower));
    }
    bodyBump = CombineNormalmap( bodyBump, bodyBump, _BodyBumpPower);
    if (((_BumpPower != 0.0) && (_BumpDetailPower != 0.0))){
        o.Normal = CombineNormalmap( CombineNormalmap( bodyBump, mainTrimBump, _BumpPower), bumpDetail, _BumpDetailPower);
    }
    else{
        if (((_BumpPower == 0.0) && (_BumpDetailPower != 0.0))){
            o.Normal = CombineNormalmap( bodyBump, bumpDetail, _BumpDetailPower);
        }
        else{
            if (((_BumpPower != 0.0) && (_BumpDetailPower == 0.0))){
                o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
            }
            else{
                o.Normal = bodyBump;
            }
        }
    }
}
#line 527
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 530
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 534
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 538
    o.Gloss = 0.0;
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    #line 542
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    mediump vec4 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor);
    #line 546
    light += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    xlat_mutable__SpecColor = _SpecColor;
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 6
//   opengl - ALU: 50 to 165, TEX: 5 to 11
//   d3d9 - ALU: 45 to 157, TEX: 5 to 11
//   d3d11 - ALU: 28 to 89, TEX: 5 to 11, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_AtlasOffsetX]
Float 17 [_AtlasOffsetY]
Float 18 [_AtlasScaleX]
Float 19 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 54 ALU, 5 TEX
PARAM c[21] = { program.local[0..19],
		{ 1, 0, 0.5, 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TXP R0, fragment.texcoord[1], texture[7], 2D;
MOV R2.w, c[20].x;
ADD R3.xyz, -R2.w, c[5];
LG2 R1.x, R0.x;
LG2 R1.y, R0.y;
LG2 R1.z, R0.z;
MOV R0.xyz, c[4];
ADD R2.xyz, -R1, fragment.texcoord[2];
ADD R0.xyz, -R0, c[3];
MAD R1.xyz, fragment.color.primary.x, R0, c[4];
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R4.xyz, R0, c[1];
MOV R1.w, c[20].x;
MUL R1, R1, c[0];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[2], -R4;
MAD R0.xyz, fragment.color.primary.x, R0, R4;
MAD R3.xyz, fragment.color.primary.y, R3, c[20].x;
MUL R3.xyz, R0, R3;
LG2 R0.z, R0.w;
MUL R2.w, -R0.z, R3.y;
MUL R1.xyz, R1, R2;
MOV R4.x, c[18];
MOV R4.y, c[19].x;
MOV R0.y, c[17].x;
MOV R0.x, c[16];
MAD R0.xy, fragment.texcoord[0].zwzw, R4, R0;
TEX R0.x, R0, texture[3], 2D;
ADD R0.z, -R0.x, c[20].x;
MUL_SAT R3.w, R0.z, c[7].x;
MOV R0.zw, c[20].xyyx;
ADD R0.xy, fragment.texcoord[0].zwzw, c[12].x;
MUL R0.xy, R0, c[13].x;
TEX R0.xy, R0, texture[6], 2D;
ADD R0.x, R0, R0.y;
ADD R4.xyz, -R0.w, c[6];
MAX R0.y, R0.z, c[14].x;
ADD R0.x, R0, -c[20].z;
MAD_SAT R4.w, R0.x, R0.y, c[20];
MAD R0.xyz, R3.w, R4, c[20].x;
MUL R3.xyz, R3, R0;
ADD R3.w, -R4, c[20].x;
MUL R4.x, R3.w, c[14];
ADD R0.xyz, -R0.w, c[15];
MOV R3.w, c[11].x;
SLT R0.w, c[20].z, R3;
MAD R0.xyz, R4.x, R0, c[20].x;
ABS R0.w, R0;
MUL R1.xyz, R2.w, R1;
MUL R0.xyz, R3, R0;
CMP R0.w, -R0, c[20].y, c[20].x;
CMP R0.xyz, -R0.w, R3, R0;
MAD result.color.xyz, R0, R2, R1;
MUL result.color.w, R2, R1;
END
# 54 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_DetailTexEnable]
Float 9 [_DetailTexOffset]
Float 10 [_DetailTexScale]
Float 11 [_DetailTexPower]
Vector 12 [_DetailTexColor]
Float 13 [_AtlasOffsetX]
Float 14 [_AtlasOffsetY]
Float 15 [_AtlasScaleX]
Float 16 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
"ps_3_0
; 49 ALU, 5 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
dcl_2d s7
def c17, 1.00000000, -1.00000000, 0.00000000, 0.02500000
def c18, -0.50000000, 0, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2
dcl_texcoord2 v3.xyz
texldp r1, v2, s7
mov_pp r0.xyz, c3
add_pp r0.xyz, -c4, r0
log_pp r1.x, r1.x
log_pp r1.y, r1.y
log_pp r1.z, r1.z
add_pp r3.xyz, -r1, v3
mov_pp r1.xyz, c5
add_pp r2.xyz, c17.y, r1
mad_pp r2.xyz, v1.y, r2, c17.x
mov_pp r0.w, c17.x
mad_pp r0.xyz, v1.x, r0, c4
mul_pp r0, r0, c0
mul_pp r4.xyz, r0, r3
texld r0.xyz, v0, s0
mul r1.xyz, r0, c1
texld r0.xyz, v0, s1
mad r0.xyz, r0, c2, -r1
mad r0.xyz, v1.x, r0, r1
mul r0.xyz, r0, r2
log_pp r1.z, r1.w
mul_pp r1.w, -r1.z, r0.y
mov r2.x, c15
mov r2.y, c16.x
mov r1.y, c14.x
mov r1.x, c13
mad r1.xy, v0.zwzw, r2, r1
texld r1.x, r1, s3
add r2.w, -r1.x, c17.x
mul_pp r2.xyz, r1.w, r4
mov r1.xyz, c6
add r4.xy, v0.zwzw, c9.x
mul_sat r2.w, r2, c7.x
add r1.xyz, c17.y, r1
mad r1.xyz, r2.w, r1, c17.x
mul r0.xyz, r0, r1
mul r4.xy, r4, c10.x
texld r1.xy, r4, s6
add r1.x, r1, r1.y
mov r1.z, c11.x
max r1.y, c17.z, r1.z
add r1.x, r1, c18
mad_sat r2.w, r1.x, r1.y, c17
mov r1.xyz, c12
add r2.w, -r2, c17.x
mul r2.w, r2, c11.x
add r1.xyz, c17.y, r1
mad r1.xyz, r2.w, r1, c17.x
mov r2.w, c8.x
mul r1.xyz, r0, r1
add_pp r2.w, c18.x, r2
cmp_pp r0.xyz, -r2.w, r0, r1
mad_pp oC0.xyz, r0, r3, r2
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
ConstBuffer "$Globals" 272 // 212 used size, 27 vars
Vector 32 [_SpecColor] 4
Vector 48 [_Color] 3
Vector 64 [_TrimColor] 3
Vector 80 [_TrimSpecColor] 3
Vector 96 [_MainSpecColor] 3
Vector 112 [_VertexMaskColor] 3
Vector 128 [_BodyOcclusionColor] 3
Float 140 [_BodyOcclusionPower]
Float 156 [_DetailTexEnable]
Float 160 [_DetailTexOffset]
Float 164 [_DetailTexScale]
Float 168 [_DetailTexPower]
Vector 176 [_DetailTexColor] 3
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 3
SetTexture 2 [_BodyOcclusionTex] 2D 2
SetTexture 3 [_BumpDetailTex] 2D 1
SetTexture 4 [_LightBuffer] 2D 4
// 45 instructions, 4 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcngafebfahcponlbehjlogngdfjcafhiabaaaaaanaahaaaaadaaaaaa
cmaaaaaanaaaaaaaaeabaaaaejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefcmeagaaaaeaaaaaaalbabaaaafjaaaaaeegiocaaaaaaaaaaa
aoaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaad
dcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaaaaaaaaaidcaabaaaaaaaaaaa
ogbkbaaaabaaaaaaagiacaaaaaaaaaaaakaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaafgifcaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaaaaaaaa
egaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaaaaaaaaahbcaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaalpdeaaaaaiccaabaaaaaaaaaaackiacaaa
aaaaaaaaakaaaaaaabeaaaaaaaaaaaaadccaaaajbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaamnmmmmdmaaaaaaaibcaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaaibcaabaaaaaaaaaaa
akaabaaaaaaaaaaackiacaaaaaaaaaaaakaaaaaaaaaaaaalocaabaaaaaaaaaaa
agijcaaaaaaaaaaaalaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaialp
dcaaaaamhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaa
abaaaaaadkiacaaaaaaaaaaaamaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaa
abaaaaaaakiacaaaaaaaaaaaanaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaajgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaaaaaaaaiicaabaaaaaaaaaaa
akaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaaiaaaaaaaaaaaaalhcaabaaaabaaaaaa
egiccaaaaaaaaaaaaiaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaa
dcaaaaamhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaihcaabaaa
adaaaaaaegacbaaaadaaaaaaegiccaaaaaaaaaaaadaaaaaadcaaaaalhcaabaaa
acaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaaeaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaalhcaabaaaadaaaaaaegiccaaaaaaaaaaaahaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaadaaaaaa
fgbfbaaaacaaaaaaegacbaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadbaaaaaiicaabaaa
aaaaaaaaabeaaaaaaaaaaadpdkiacaaaaaaaaaaaajaaaaaadhaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaacpaaaaaf
pcaabaaaabaaaaaaegaobaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaa
acaaaaaadkaabaiaebaaaaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegbcbaaaaeaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaafaaaaaaegiccaiaebaaaaaaaaaaaaaaagaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaagaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegiocaaaaaaaaaaaacaaaaaadiaaaaahhcaabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_AtlasOffsetX]
Float 17 [_AtlasOffsetY]
Float 18 [_AtlasScaleX]
Float 19 [_AtlasScaleY]
Vector 20 [unity_LightmapFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
SetTexture 8 [unity_Lightmap] 2D
SetTexture 9 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 65 ALU, 7 TEX
PARAM c[23] = { program.local[0..20],
		{ 1, 0, 8, 0.5 },
		{ 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R0, fragment.texcoord[2], texture[8], 2D;
MUL R0.xyz, R0.w, R0;
TEX R1, fragment.texcoord[2], texture[9], 2D;
MUL R1.xyz, R1.w, R1;
MUL R2.xyz, R1, c[21].z;
MOV R2.w, c[21].x;
ADD R3.xyz, -R2.w, c[5];
DP4 R0.w, fragment.texcoord[3], fragment.texcoord[3];
RSQ R0.w, R0.w;
RCP R1.w, R0.w;
MAD R1.xyz, R0, c[21].z, -R2;
MAD_SAT R1.w, R1, c[20].z, c[20];
MAD R1.xyz, R1.w, R1, R2;
TXP R0, fragment.texcoord[1], texture[7], 2D;
LG2 R2.x, R0.x;
LG2 R2.y, R0.y;
LG2 R2.z, R0.z;
MOV R0.xyz, c[4];
ADD R2.xyz, -R2, R1;
ADD R0.xyz, -R0, c[3];
MAD R1.xyz, fragment.color.primary.x, R0, c[4];
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R4.xyz, R0, c[1];
MOV R1.w, c[21].x;
MUL R1, R1, c[0];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[2], -R4;
MAD R0.xyz, fragment.color.primary.x, R0, R4;
MAD R3.xyz, fragment.color.primary.y, R3, c[21].x;
MUL R3.xyz, R0, R3;
LG2 R0.z, R0.w;
MUL R2.w, -R0.z, R3.y;
MUL R1.xyz, R1, R2;
MOV R4.x, c[18];
MOV R4.y, c[19].x;
MOV R0.y, c[17].x;
MOV R0.x, c[16];
MAD R0.xy, fragment.texcoord[0].zwzw, R4, R0;
TEX R0.x, R0, texture[3], 2D;
ADD R0.z, -R0.x, c[21].x;
MUL_SAT R3.w, R0.z, c[7].x;
MOV R0.zw, c[21].xyyx;
ADD R0.xy, fragment.texcoord[0].zwzw, c[12].x;
MUL R0.xy, R0, c[13].x;
TEX R0.xy, R0, texture[6], 2D;
ADD R0.x, R0, R0.y;
ADD R4.xyz, -R0.w, c[6];
MAX R0.y, R0.z, c[14].x;
ADD R0.x, R0, -c[21].w;
MAD_SAT R4.w, R0.x, R0.y, c[22].x;
MAD R0.xyz, R3.w, R4, c[21].x;
MUL R3.xyz, R3, R0;
ADD R3.w, -R4, c[21].x;
MUL R4.x, R3.w, c[14];
ADD R0.xyz, -R0.w, c[15];
MOV R3.w, c[11].x;
SLT R0.w, c[21], R3;
MAD R0.xyz, R4.x, R0, c[21].x;
ABS R0.w, R0;
MUL R1.xyz, R2.w, R1;
MUL R0.xyz, R3, R0;
CMP R0.w, -R0, c[21].y, c[21].x;
CMP R0.xyz, -R0.w, R3, R0;
MAD result.color.xyz, R0, R2, R1;
MUL result.color.w, R2, R1;
END
# 65 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_DetailTexEnable]
Float 9 [_DetailTexOffset]
Float 10 [_DetailTexScale]
Float 11 [_DetailTexPower]
Vector 12 [_DetailTexColor]
Float 13 [_AtlasOffsetX]
Float 14 [_AtlasOffsetY]
Float 15 [_AtlasScaleX]
Float 16 [_AtlasScaleY]
Vector 17 [unity_LightmapFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
SetTexture 8 [unity_Lightmap] 2D
SetTexture 9 [unity_LightmapInd] 2D
"ps_3_0
; 58 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c18, 1.00000000, -1.00000000, 0.00000000, 0.02500000
def c19, -0.50000000, 8.00000000, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2
dcl_texcoord2 v3.xy
dcl_texcoord3 v4
texld r1, v3, s8
texld r0, v3, s9
mul_pp r0.xyz, r0.w, r0
dp4 r0.w, v4, v4
rsq r0.w, r0.w
rcp r0.w, r0.w
mul_pp r0.xyz, r0, c19.y
mul_pp r1.xyz, r1.w, r1
mad_pp r2.xyz, r1, c19.y, -r0
texldp r1, v2, s7
mad_sat r0.w, r0, c17.z, c17
mad_pp r2.xyz, r0.w, r2, r0
mov_pp r0.xyz, c3
add_pp r0.xyz, -c4, r0
log_pp r1.x, r1.x
log_pp r1.y, r1.y
log_pp r1.z, r1.z
add_pp r3.xyz, -r1, r2
mov_pp r1.xyz, c5
add_pp r2.xyz, c18.y, r1
mad_pp r2.xyz, v1.y, r2, c18.x
mov_pp r0.w, c18.x
mad_pp r0.xyz, v1.x, r0, c4
mul_pp r0, r0, c0
mul_pp r4.xyz, r0, r3
texld r0.xyz, v0, s0
mul r1.xyz, r0, c1
texld r0.xyz, v0, s1
mad r0.xyz, r0, c2, -r1
mad r0.xyz, v1.x, r0, r1
mul r0.xyz, r0, r2
log_pp r1.z, r1.w
mul_pp r1.w, -r1.z, r0.y
mov r2.x, c15
mov r2.y, c16.x
mov r1.y, c14.x
mov r1.x, c13
mad r1.xy, v0.zwzw, r2, r1
texld r1.x, r1, s3
add r2.w, -r1.x, c18.x
mul_pp r2.xyz, r1.w, r4
mov r1.xyz, c6
add r4.xy, v0.zwzw, c9.x
mul_sat r2.w, r2, c7.x
add r1.xyz, c18.y, r1
mad r1.xyz, r2.w, r1, c18.x
mul r0.xyz, r0, r1
mul r4.xy, r4, c10.x
texld r1.xy, r4, s6
add r1.x, r1, r1.y
mov r1.z, c11.x
max r1.y, c18.z, r1.z
add r1.x, r1, c19
mad_sat r2.w, r1.x, r1.y, c18
mov r1.xyz, c12
add r2.w, -r2, c18.x
mul r2.w, r2, c11.x
add r1.xyz, c18.y, r1
mad r1.xyz, r2.w, r1, c18.x
mov r2.w, c8.x
mul r1.xyz, r0, r1
add_pp r2.w, c19.x, r2
cmp_pp r0.xyz, -r2.w, r0, r1
mad_pp oC0.xyz, r0, r3, r2
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
ConstBuffer "$Globals" 304 // 288 used size, 29 vars
Vector 32 [_SpecColor] 4
Vector 48 [_Color] 3
Vector 64 [_TrimColor] 3
Vector 80 [_TrimSpecColor] 3
Vector 96 [_MainSpecColor] 3
Vector 112 [_VertexMaskColor] 3
Vector 128 [_BodyOcclusionColor] 3
Float 140 [_BodyOcclusionPower]
Float 156 [_DetailTexEnable]
Float 160 [_DetailTexOffset]
Float 164 [_DetailTexScale]
Float 168 [_DetailTexPower]
Vector 176 [_DetailTexColor] 3
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
Vector 272 [unity_LightmapFade] 4
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 3
SetTexture 2 [_BodyOcclusionTex] 2D 2
SetTexture 3 [_BumpDetailTex] 2D 1
SetTexture 4 [_LightBuffer] 2D 4
SetTexture 5 [unity_Lightmap] 2D 5
SetTexture 6 [unity_LightmapInd] 2D 6
// 55 instructions, 4 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 7 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednolldcipifooehegjaiohnlngogmlafcabaaaaaahaajaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
emaiaaaaeaaaaaaabdacaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
gcbaaaadpcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaagcbaaaadlcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacaeaaaaaaaaaaaaaidcaabaaaaaaaaaaaogbkbaaa
abaaaaaaagiacaaaaaaaaaaaakaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaa
aaaaaaaafgifcaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaalpdeaaaaaiccaabaaaaaaaaaaackiacaaaaaaaaaaa
akaaaaaaabeaaaaaaaaaaaaadccaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaamnmmmmdmaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackiacaaaaaaaaaaaakaaaaaaaaaaaaalocaabaaaaaaaaaaaagijcaaa
aaaaaaaaalaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaialpdcaaaaam
hcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaa
dkiacaaaaaaaaaaaamaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaa
akiacaaaaaaaaaaaanaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
jgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaaaaaaaaaiicaabaaaaaaaaaaaakaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaaiaaaaaaaaaaaaalhcaabaaaabaaaaaaegiccaaa
aaaaaaaaaiaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaam
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegiccaaaaaaaaaaaadaaaaaadcaaaaalhcaabaaaacaaaaaa
egacbaaaacaaaaaaegiccaaaaaaaaaaaaeaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaajhcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
adaaaaaaaaaaaaalhcaabaaaadaaaaaaegiccaaaaaaaaaaaahaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaadaaaaaafgbfbaaa
acaaaaaaegacbaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
diaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadbaaaaaiicaabaaaaaaaaaaa
abeaaaaaaaaaaadpdkiacaaaaaaaaaaaajaaaaaadhaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaacpaaaaafpcaabaaa
abaaaaaaegaobaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaaacaaaaaa
dkaabaiaebaaaaaaabaaaaaabbaaaaahicaabaaaabaaaaaaegbobaaaafaaaaaa
egbobaaaafaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadccaaaal
icaabaaaabaaaaaadkaabaaaabaaaaaackiacaaaaaaaaaaabbaaaaaadkiacaaa
aaaaaaaabbaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaa
agaaaaaaaagabaaaagaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaaebdiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaapgapbaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaafaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaa
aaaaaaebdcaaaaakhcaabaaaadaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaabaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaacaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaafaaaaaaegiccaiaebaaaaaaaaaaaaaaagaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaagaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegiocaaaaaaaaaaaacaaaaaadiaaaaahhcaabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_BumpPower]
Float 9 [_BodyBumpPower]
Float 10 [_BumpDetailPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_Shininess]
Float 17 [_TrimShininess]
Float 18 [_AtlasOffsetX]
Float 19 [_AtlasOffsetY]
Float 20 [_AtlasScaleX]
Float 21 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
SetTexture 8 [unity_Lightmap] 2D
SetTexture 9 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 165 ALU, 11 TEX
PARAM c[26] = { program.local[0..21],
		{ 1, 0, 2, 0.5 },
		{ -0.40824828, -0.70710677, 0.57735026, 8 },
		{ -0.40824831, 0.70710677, 0.57735026, 128 },
		{ 0.81649655, 0, 0.57735026, 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MOV R4.xy, c[22];
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MAD R3.xy, R3.wyzw, c[22].z, -c[22].x;
MOV R0.z, c[20].x;
MOV R0.w, c[21].x;
MOV R0.y, c[19].x;
MOV R0.x, c[18];
MAD R4.zw, fragment.texcoord[0], R0, R0.xyxy;
TEX R0.yw, R4.zwzw, texture[4], 2D;
MAD R0.xy, R0.wyzw, c[22].z, -c[22].x;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.z, -R0, c[22].x;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[22].wwxw;
MUL R1.xyz, R1, c[9].x;
ADD R0.w, -R4.x, c[9].x;
ADD R1.xyz, R1, c[22].wwxw;
CMP R1.xyz, -R0.w, R0, R1;
MOV R0.xy, c[9].x;
MOV R0.z, c[22].y;
MAD R0.xyz, R1, R0, R1;
DP3 R0.w, R0, R0;
MUL R1.xy, fragment.texcoord[0].zwzw, c[13].x;
TEX R1.yw, R1, texture[6], 2D;
MAD R1.xy, R1.wyzw, c[22].z, -c[22].x;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R0;
TEX R0.yw, fragment.texcoord[0], texture[5], 2D;
MAD R0.xy, R0.wyzw, c[22].z, -c[22].x;
MUL R3.zw, R0.xyxy, R0.xyxy;
ADD_SAT R2.w, R3.z, R3;
MUL R0.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.w, -R2, c[22].x;
MUL R1.zw, R1.xyxy, R1.xyxy;
RSQ R2.w, R0.w;
ADD R0.z, -R0, c[22].x;
RSQ R0.w, R0.z;
RCP R0.z, R2.w;
RCP R3.z, R0.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
ADD_SAT R0.w, R1.z, R1;
MOV R0.xy, c[8].x;
MOV R0.z, c[22].y;
MAD R3.xyz, R3, R0, R2;
ADD R0.w, -R0, c[22].x;
RSQ R0.x, R0.w;
RCP R1.z, R0.x;
DP3 R0.w, R3, R3;
RSQ R0.w, R0.w;
ABS R3.w, c[8].x;
MOV R0.z, c[22].y;
MOV R0.xy, c[10].x;
MUL R5.xyz, R1, R0;
MAD R5.xyz, R0.w, R3, R5;
MAD R0.xyz, R1, R0, R2;
DP3 R1.y, R5, R5;
DP3 R1.x, R0, R0;
RSQ R1.w, R1.x;
MUL R0.xyz, R1.w, R0;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R5;
ABS R2.w, c[10].x;
CMP R5.x, -R2.w, c[22], c[22].y;
CMP R1.w, -R3, c[22].x, c[22].y;
CMP R2.w, -R2, c[22].y, c[22].x;
MUL R5.y, R1.w, R5.x;
CMP R5.z, -R3.w, c[22].y, c[22].x;
ABS R3.w, R5.y;
MUL R2.w, R1, R2;
CMP R3.w, -R3, c[22].y, c[22].x;
MUL R5.x, R5, R5.z;
MUL R5.y, R3.w, R5.x;
ABS R5.x, R5;
CMP R5.x, -R5, c[22].y, c[22];
MUL R1.w, R3, R5.x;
MUL R3.w, R1, R2;
CMP R1.xyz, -R5.y, R0, R1;
MUL R3.xyz, R0.w, R3;
TEX R0, fragment.texcoord[2], texture[9], 2D;
MUL R0.xyz, R0.w, R0;
ABS R0.w, R2;
CMP R0.w, -R0, c[22].y, c[22].x;
DP3 R2.w, fragment.texcoord[3], fragment.texcoord[3];
CMP R1.xyz, -R3.w, R3, R1;
MUL R0.xyz, R0, c[23].w;
MUL R0.w, R1, R0;
CMP R2.xyz, -R0.w, R2, R1;
MUL R3.xyz, R0.y, c[24];
MAD R3.xyz, R0.x, c[25], R3;
MAD R3.xyz, R0.z, c[23], R3;
DP3 R0.w, R3, R3;
DP3_SAT R1.z, R2, c[23];
DP3_SAT R1.y, R2, c[24];
DP3_SAT R1.x, R2, c[25];
DP3 R1.w, R1, R0;
RSQ R0.w, R0.w;
MUL R1.xyz, R0.w, R3;
TEX R0, fragment.texcoord[2], texture[8], 2D;
RSQ R2.w, R2.w;
MUL R0.xyz, R0.w, R0;
MAD R3.xyz, R2.w, fragment.texcoord[3], R1;
MUL R0.xyz, R0, R1.w;
DP3 R0.w, R3, R3;
MUL R1.xyz, R0, c[23].w;
RSQ R0.x, R0.w;
MUL R0.xyz, R0.x, R3;
DP3 R0.x, R2, R0;
MOV R0.w, c[16].x;
ADD R0.w, -R0, c[17].x;
MAD R0.y, fragment.color.primary.x, R0.w, c[16].x;
MUL R2.x, R0.y, c[24].w;
MAX R1.w, R0.x, c[22].y;
TXP R0, fragment.texcoord[1], texture[7], 2D;
POW R1.w, R1.w, R2.x;
LG2 R2.w, R0.w;
MOV R0.w, c[22].x;
ADD R3.xyz, -R0.w, c[5];
MAD R3.xyz, fragment.color.primary.y, R3, c[22].x;
LG2 R2.x, R0.x;
LG2 R2.y, R0.y;
LG2 R2.z, R0.z;
ADD R1, -R2, R1;
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R2.xyz, R0, c[1];
TEX R5.x, R4.zwzw, texture[3], 2D;
ADD R2.w, -R5.x, c[22].x;
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[2], -R2;
MAD R2.xyz, fragment.color.primary.x, R0, R2;
MUL R2.xyz, R2, R3;
MOV R0.xyz, c[4];
ADD R0.xyz, -R0, c[3];
ADD R3.xy, fragment.texcoord[0].zwzw, c[12].x;
MUL R3.xy, R3, c[13].x;
TEX R5.xy, R3, texture[6], 2D;
ADD R3.w, R5.x, R5.y;
MUL R1.w, R1, R2.y;
MUL_SAT R2.w, R2, c[7].x;
ADD R3.xyz, -R4.x, c[6];
MAD R3.xyz, R2.w, R3, c[22].x;
MUL R2.xyz, R2, R3;
MOV R0.w, c[22].x;
MAD R0.xyz, fragment.color.primary.x, R0, c[4];
MUL R0, R0, c[0];
MUL R0.xyz, R1, R0;
MUL R0.xyz, R1.w, R0;
MAX R4.y, R4, c[14].x;
ADD R3.w, R3, -c[22];
MAD_SAT R3.w, R3, R4.y, c[25];
ADD R2.w, -R3, c[22].x;
MUL R3.w, R2, c[14].x;
MOV R2.w, c[11].x;
ADD R3.xyz, -R4.x, c[15];
SLT R2.w, c[22], R2;
MAD R3.xyz, R3.w, R3, c[22].x;
ABS R2.w, R2;
MUL R3.xyz, R2, R3;
CMP R2.w, -R2, c[22].y, c[22].x;
CMP R2.xyz, -R2.w, R2, R3;
MAD result.color.xyz, R1, R2, R0;
MUL result.color.w, R1, R0;
END
# 165 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_BumpPower]
Float 9 [_BodyBumpPower]
Float 10 [_BumpDetailPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_Shininess]
Float 17 [_TrimShininess]
Float 18 [_AtlasOffsetX]
Float 19 [_AtlasOffsetY]
Float 20 [_AtlasScaleX]
Float 21 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
SetTexture 8 [unity_Lightmap] 2D
SetTexture 9 [unity_LightmapInd] 2D
"ps_3_0
; 157 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c22, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c23, -0.50000000, -1.00000000, 0.50000000, 1.00000000
def c24, -0.40824828, -0.70710677, 0.57735026, 8.00000000
def c25, -0.40824831, 0.70710677, 0.57735026, 128.00000000
def c26, 0.81649655, 0.00000000, 0.57735026, 0.02500000
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xyz
texld r3.yw, v0, s2
mad_pp r3.xy, r3.wyzw, c22.z, c22.w
mov r0.z, c20.x
mov r0.w, c21.x
mov r0.y, c19.x
mov r0.x, c18
mad r5.xy, v0.zwzw, r0.zwzw, r0
texld r0.yw, r5, s4
mad_pp r0.xy, r0.wyzw, c22.z, c22.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c22.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
add r1.xyz, r0, c23.xxyw
mul r1.xyz, r1, c9.x
mov r0.w, c9.x
add r0.w, c22, r0
add r1.xyz, r1, c23.zzww
cmp r1.xyz, -r0.w, r1, r0
mov r0.xy, c9.x
mov r0.z, c22.x
mad r2.xyz, r1, r0, r1
mul r0.xy, v0.zwzw, c13.x
texld r0.yw, r0, s6
mad_pp r1.xy, r0.wyzw, c22.z, c22.w
dp3 r0.z, r2, r2
rsq r0.x, r0.z
mul r2.xyz, r0.x, r2
texld r0.yw, v0, s5
mad_pp r0.xy, r0.wyzw, c22.z, c22.w
mul_pp r3.zw, r0.xyxy, r0.xyxy
add_pp_sat r2.w, r3.z, r3
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.w, -r2, c22.y
mul_pp r1.zw, r1.xyxy, r1.xyxy
rsq_pp r2.w, r0.w
add_pp r0.z, -r0, c22.y
rsq_pp r0.w, r0.z
rcp_pp r3.z, r0.w
rcp_pp r0.z, r2.w
add r3.xyz, r3, -r0
mad r3.xyz, v1.x, r3, r0
add_pp_sat r0.w, r1.z, r1
mov r0.xy, c8.x
mov r0.z, c22.x
mad r3.xyz, r3, r0, r2
add_pp r0.w, -r0, c22.y
rsq_pp r0.x, r0.w
rcp_pp r1.z, r0.x
dp3 r0.w, r3, r3
rsq r0.w, r0.w
mov r0.z, c22.x
mov r0.xy, c10.x
mul r4.xyz, r1, r0
mad r0.xyz, r1, r0, r2
mad r4.xyz, r0.w, r3, r4
dp3 r1.x, r4, r4
dp3 r1.y, r0, r0
rsq r1.w, r1.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, r4
abs r3.w, c10.x
cmp r4.x, -r3.w, c22, c22.y
abs r4.y, c8.x
cmp r2.w, -r4.y, c22.x, c22.y
mul r0.xyz, r1.w, r0
mul_pp r1.w, r2, r4.x
cmp r3.w, -r3, c22.y, c22.x
cmp r4.y, -r4, c22, c22.x
mul_pp r2.w, r2, r3
mul_pp r4.y, r4.x, r4
mul r3.xyz, r0.w, r3
abs_pp r1.w, r1
cmp_pp r4.x, -r1.w, c22.y, c22
mul_pp r1.w, r4.x, r4.y
cmp_pp r0.xyz, -r1.w, r1, r0
texld r1, v3, s9
mul_pp r1.xyz, r1.w, r1
abs_pp r0.w, r4.y
abs_pp r1.w, r2
cmp_pp r0.w, -r0, c22.y, c22.x
mul_pp r0.w, r4.x, r0
mul_pp r3.w, r0, r2
cmp_pp r1.w, -r1, c22.y, c22.x
dp3_pp r2.w, v4, v4
mul_pp r1.xyz, r1, c24.w
cmp_pp r0.xyz, -r3.w, r0, r3
mul_pp r0.w, r0, r1
cmp_pp r0.xyz, -r0.w, r0, r2
mul r3.xyz, r1.y, c25
mad r3.xyz, r1.x, c26, r3
mad r3.xyz, r1.z, c24, r3
dp3 r0.w, r3, r3
dp3_pp_sat r2.z, r0, c24
dp3_pp_sat r2.y, r0, c25
dp3_pp_sat r2.x, r0, c26
rsq r1.w, r0.w
dp3_pp r0.w, r2, r1
mul r2.xyz, r1.w, r3
texld r1, v3, s8
mul_pp r1.xyz, r1.w, r1
rsq_pp r2.w, r2.w
mov_pp r1.w, c17.x
mov_pp r3.xyz, c5
mul_pp r1.xyz, r1, r0.w
mad_pp r2.xyz, r2.w, v4, r2
dp3_pp r0.w, r2, r2
rsq_pp r0.w, r0.w
mul_pp r2.xyz, r0.w, r2
add_pp r1.w, -c16.x, r1
texld r4.x, r5, s3
add r2.w, -r4.x, c22.y
add r4.xy, v0.zwzw, c12.x
dp3_pp r0.x, r0, r2
mad_pp r0.w, v1.x, r1, c16.x
mul_pp r2.x, r0.w, c25.w
max_pp r1.w, r0.x, c22.x
pow r0, r1.w, r2.x
mul_pp r0.xyz, r1, c24.w
texldp r1, v2, s7
add_pp r3.xyz, c22.w, r3
mul_sat r2.w, r2, c7.x
log_pp r1.x, r1.x
log_pp r1.y, r1.y
log_pp r1.z, r1.z
log_pp r1.w, r1.w
add_pp r1, -r1, r0
texld r0.xyz, v0, s0
mul r2.xyz, r0, c1
texld r0.xyz, v0, s1
mad r0.xyz, r0, c2, -r2
mad r0.xyz, v1.x, r0, r2
mad_pp r2.xyz, v1.y, r3, c22.y
mul r2.xyz, r0, r2
mov_pp r3.xyz, c3
add_pp r0.xyz, -c4, r3
mul_pp r1.w, r1, r2.y
mov_pp r0.w, c22.y
mad_pp r0.xyz, v1.x, r0, c4
mul_pp r0, r0, c0
mul_pp r0.xyz, r1, r0
mul_pp r3.xyz, r1.w, r0
mov r0.xyz, c6
add r0.xyz, c22.w, r0
mad r0.xyz, r2.w, r0, c22.y
mul r0.xyz, r2, r0
mul r4.xy, r4, c13.x
texld r2.xy, r4, s6
add r2.x, r2, r2.y
mov r2.z, c14.x
max r2.y, c22.x, r2.z
add r2.x, r2, c23
mad_sat r2.w, r2.x, r2.y, c26
mov r2.xyz, c15
add r2.w, -r2, c22.y
mul r2.w, r2, c14.x
add r2.xyz, c22.w, r2
mad r2.xyz, r2.w, r2, c22.y
mov r2.w, c11.x
mul r2.xyz, r0, r2
add_pp r2.w, c23.x, r2
cmp_pp r0.xyz, -r2.w, r0, r2
mad_pp oC0.xyz, r1, r0, r3
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
ConstBuffer "$Globals" 304 // 212 used size, 29 vars
Vector 32 [_SpecColor] 4
Vector 48 [_Color] 3
Vector 64 [_TrimColor] 3
Vector 80 [_TrimSpecColor] 3
Vector 96 [_MainSpecColor] 3
Vector 112 [_VertexMaskColor] 3
Vector 128 [_BodyOcclusionColor] 3
Float 140 [_BodyOcclusionPower]
Float 144 [_BumpPower]
Float 148 [_BodyBumpPower]
Float 152 [_BumpDetailPower]
Float 156 [_DetailTexEnable]
Float 160 [_DetailTexOffset]
Float 164 [_DetailTexScale]
Float 168 [_DetailTexPower]
Vector 176 [_DetailTexColor] 3
Float 188 [_Shininess]
Float 192 [_TrimShininess]
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [_BumpDetailTex] 2D 2
SetTexture 7 [_LightBuffer] 2D 7
SetTexture 8 [unity_Lightmap] 2D 8
SetTexture 9 [unity_LightmapInd] 2D 9
// 134 instructions, 6 temp regs, 0 temp arrays:
// ALU 87 float, 0 int, 2 uint
// TEX 11 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedijiajnbofobnhfofnignejleknfmbpjlabaaaaaajabdaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
gmbcaaaaeaaaaaaajlaeaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaad
aagabaaaaiaaaaaafkaaaaadaagabaaaajaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaa
ffffaaaafibiaaaeaahabaaaajaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaaddcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaaddcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaafaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaa
abaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaamaaaaaa
diaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaanaaaaaa
aaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaaeaaaaaaaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaabaaaaaa
abeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaaiaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaaacaaaaaahgapbaaaacaaaaaa
apaaaaahbcaabaaaabaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaaakaabaaaabaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaamalpaaaamalpaaaaialpaaaaaaaaaaaaaaakhcaabaaaacaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaadcaaaaan
hcaabaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaaegacbaaaabaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaiadpaaaaaaaabnaaaaaiicaabaaaabaaaaaaabeaaaaa
aaaaiadpbkiacaaaaaaaaaaaajaaaaaadhaaaaajhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadgaaaaafecaabaaaacaaaaaa
abeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaafgijcaaaaaaaaaaaajaaaaaa
dcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaagacbaaaacaaaaaaegacbaaa
abaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaa
aaaaaaaaajaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaahocaabaaaadaaaaaaagajbaaa
aaaaaaaaagaabaaaadaaaaaabiaaaaaldcaabaaaaeaaaaaaigiacaaaaaaaaaaa
ajaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadjaaaaalmcaabaaa
aeaaaaaakgiccaaaaaaaaaaaajaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaaaeaaaaaaegaabaaaaeaaaaaa
abaaaaahecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaadhaaaaaj
hcaabaaaacaaaaaafgafbaaaaeaaaaaajgahbaaaadaaaaaaegacbaaaacaaaaaa
diaaaaaigcaabaaaadaaaaaakgblbaaaabaaaaaafgifcaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaagaaaaaaaagabaaa
acaaaaaadcaaaaapgcaabaaaadaaaaaapganbaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaaaaa
diaaaaahdcaabaaaafaaaaaapgapbaaaacaaaaaajgafbaaaadaaaaaadgaaaaaf
ecaabaaaafaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaabaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagaabaaaadaaaaaaegacbaaaafaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaadhaaaaajhcaabaaaabaaaaaaagaabaaaaeaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaadhaaaaajhcaabaaaaaaaaaaa
kgakbaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaa
afaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaajaaaaaa
aagabaaaajaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaacaaaaaaabeaaaaa
aaaaaaebdiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaapgapbaaaabaaaaaa
diaaaaakhcaabaaaadaaaaaafgafbaaaacaaaaaaaceaaaaaomafnblopdaedfdp
dkmnbddpaaaaaaaadcaaaaamhcaabaaaadaaaaaaagaabaaaacaaaaaaaceaaaaa
olaffbdpaaaaaaaadkmnbddpaaaaaaaaegacbaaaadaaaaaadcaaaaamhcaabaaa
adaaaaaakgakbaaaacaaaaaaaceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaa
egacbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
abaaaaaaegacbaaaadaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadeaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaa
cpaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaakccaabaaaabaaaaaa
dkiacaiaebaaaaaaaaaaaaaaalaaaaaaakiacaaaaaaaaaaaamaaaaaadcaaaaak
ccaabaaaabaaaaaaakbabaaaacaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaa
alaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaed
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaabjaaaaaf
icaabaaaabaaaaaaakaabaaaabaaaaaaapcaaaakbcaabaaaadaaaaaaaceaaaaa
olaffbdpdkmnbddpaaaaaaaaaaaaaaaaigaabaaaaaaaaaaabacaaaakccaabaaa
adaaaaaaaceaaaaaomafnblopdaedfdpdkmnbddpaaaaaaaaegacbaaaaaaaaaaa
bacaaaakecaabaaaadaaaaaaaceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaa
egacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaaiaaaaaa
aagabaaaaiaaaaaadiaaaaahccaabaaaaaaaaaaadkaabaaaacaaaaaaabeaaaaa
aaaaaaebdiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaafgafbaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaaaaaaaaaeghobaaaahaaaaaaaagabaaaahaaaaaacpaaaaaf
pcaabaaaacaaaaaaegaobaaaacaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaa
abaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaafaaaaaaegiccaiaebaaaaaaaaaaaaaaagaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaagaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegiocaaaaaaaaaaaacaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaihcaabaaa
acaaaaaaegacbaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaadcaaaaalhcaabaaa
adaaaaaaegacbaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaadaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaadaaaaaaegiccaaaaaaaaaaaahaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaadaaaaaa
fgbfbaaaacaaaaaaegacbaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaaaacaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaacaaaaaadkaabaaaabaaaaaaaaaaaaalhcaabaaaadaaaaaa
egiccaaaaaaaaaaaaiaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaa
dcaaaaamhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaidcaabaaaadaaaaaaogbkbaaaabaaaaaa
agiacaaaaaaaaaaaakaaaaaadiaaaaaidcaabaaaadaaaaaaegaabaaaadaaaaaa
fgifcaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaagaaaaaaaagabaaaacaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaa
adaaaaaaakaabaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaalpdeaaaaaiicaabaaaabaaaaaackiacaaaaaaaaaaaakaaaaaa
abeaaaaaaaaaaaaadccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaamnmmmmdmaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaaakaaaaaaaaaaaaalhcaabaaaadaaaaaaegiccaaaaaaaaaaa
alaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaa
adaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaaabeaaaaaaaaaaadpdkiacaaaaaaaaaaa
ajaaaaaadhaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaa
egacbaaaacaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_AtlasOffsetX]
Float 17 [_AtlasOffsetY]
Float 18 [_AtlasScaleX]
Float 19 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 50 ALU, 5 TEX
PARAM c[21] = { program.local[0..19],
		{ 1, 0, 0.5, 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TXP R0, fragment.texcoord[1], texture[7], 2D;
MOV R2.w, c[20].x;
ADD R3.xyz, -R2.w, c[5];
ADD R2.xyz, R0, fragment.texcoord[2];
MOV R1.xyz, c[4];
ADD R0.xyz, -R1, c[3];
MAD R1.xyz, fragment.color.primary.x, R0, c[4];
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R4.xyz, R0, c[1];
MOV R1.w, c[20].x;
MUL R1, R1, c[0];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[2], -R4;
MAD R0.xyz, fragment.color.primary.x, R0, R4;
MAD R3.xyz, fragment.color.primary.y, R3, c[20].x;
MUL R3.xyz, R0, R3;
MUL R2.w, R0, R3.y;
MUL R1.xyz, R1, R2;
MOV R4.x, c[18];
MOV R4.y, c[19].x;
MOV R0.y, c[17].x;
MOV R0.x, c[16];
MAD R0.xy, fragment.texcoord[0].zwzw, R4, R0;
TEX R0.x, R0, texture[3], 2D;
ADD R0.z, -R0.x, c[20].x;
MUL_SAT R3.w, R0.z, c[7].x;
MOV R0.zw, c[20].xyyx;
ADD R0.xy, fragment.texcoord[0].zwzw, c[12].x;
MUL R0.xy, R0, c[13].x;
TEX R0.xy, R0, texture[6], 2D;
ADD R0.x, R0, R0.y;
ADD R4.xyz, -R0.w, c[6];
MAX R0.y, R0.z, c[14].x;
ADD R0.x, R0, -c[20].z;
MAD_SAT R4.w, R0.x, R0.y, c[20];
MAD R0.xyz, R3.w, R4, c[20].x;
MUL R3.xyz, R3, R0;
ADD R3.w, -R4, c[20].x;
MUL R4.x, R3.w, c[14];
ADD R0.xyz, -R0.w, c[15];
MOV R3.w, c[11].x;
SLT R0.w, c[20].z, R3;
MAD R0.xyz, R4.x, R0, c[20].x;
ABS R0.w, R0;
MUL R1.xyz, R2.w, R1;
MUL R0.xyz, R3, R0;
CMP R0.w, -R0, c[20].y, c[20].x;
CMP R0.xyz, -R0.w, R3, R0;
MAD result.color.xyz, R0, R2, R1;
MUL result.color.w, R2, R1;
END
# 50 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_DetailTexEnable]
Float 9 [_DetailTexOffset]
Float 10 [_DetailTexScale]
Float 11 [_DetailTexPower]
Vector 12 [_DetailTexColor]
Float 13 [_AtlasOffsetX]
Float 14 [_AtlasOffsetY]
Float 15 [_AtlasScaleX]
Float 16 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
"ps_3_0
; 45 ALU, 5 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
dcl_2d s7
def c17, 1.00000000, -1.00000000, 0.00000000, 0.02500000
def c18, -0.50000000, 0, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2
dcl_texcoord2 v3.xyz
texldp r1, v2, s7
add_pp r3.xyz, r1, v3
mov_pp r1.xyz, c5
add_pp r2.xyz, c17.y, r1
mov_pp r0.xyz, c3
add_pp r0.xyz, -c4, r0
mad_pp r2.xyz, v1.y, r2, c17.x
mov_pp r0.w, c17.x
mad_pp r0.xyz, v1.x, r0, c4
mul_pp r0, r0, c0
mul_pp r4.xyz, r0, r3
texld r0.xyz, v0, s0
mul r1.xyz, r0, c1
texld r0.xyz, v0, s1
mad r0.xyz, r0, c2, -r1
mad r0.xyz, v1.x, r0, r1
mul r0.xyz, r0, r2
mul_pp r1.w, r1, r0.y
mov r2.x, c15
mov r2.y, c16.x
mov r1.y, c14.x
mov r1.x, c13
mad r1.xy, v0.zwzw, r2, r1
texld r1.x, r1, s3
add r2.w, -r1.x, c17.x
mul_pp r2.xyz, r1.w, r4
mov r1.xyz, c6
add r4.xy, v0.zwzw, c9.x
mul_sat r2.w, r2, c7.x
add r1.xyz, c17.y, r1
mad r1.xyz, r2.w, r1, c17.x
mul r0.xyz, r0, r1
mul r4.xy, r4, c10.x
texld r1.xy, r4, s6
add r1.x, r1, r1.y
mov r1.z, c11.x
max r1.y, c17.z, r1.z
add r1.x, r1, c18
mad_sat r2.w, r1.x, r1.y, c17
mov r1.xyz, c12
add r2.w, -r2, c17.x
mul r2.w, r2, c11.x
add r1.xyz, c17.y, r1
mad r1.xyz, r2.w, r1, c17.x
mov r2.w, c8.x
mul r1.xyz, r0, r1
add_pp r2.w, c18.x, r2
cmp_pp r0.xyz, -r2.w, r0, r1
mad_pp oC0.xyz, r0, r3, r2
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
ConstBuffer "$Globals" 272 // 212 used size, 27 vars
Vector 32 [_SpecColor] 4
Vector 48 [_Color] 3
Vector 64 [_TrimColor] 3
Vector 80 [_TrimSpecColor] 3
Vector 96 [_MainSpecColor] 3
Vector 112 [_VertexMaskColor] 3
Vector 128 [_BodyOcclusionColor] 3
Float 140 [_BodyOcclusionPower]
Float 156 [_DetailTexEnable]
Float 160 [_DetailTexOffset]
Float 164 [_DetailTexScale]
Float 168 [_DetailTexPower]
Vector 176 [_DetailTexColor] 3
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 3
SetTexture 2 [_BodyOcclusionTex] 2D 2
SetTexture 3 [_BumpDetailTex] 2D 1
SetTexture 4 [_LightBuffer] 2D 4
// 44 instructions, 4 temp regs, 0 temp arrays:
// ALU 28 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedabmonkjflkcgmobmaclklcgfnpckjngaabaaaaaaleahaaaaadaaaaaa
cmaaaaaanaaaaaaaaeabaaaaejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefckiagaaaaeaaaaaaakkabaaaafjaaaaaeegiocaaaaaaaaaaa
aoaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaad
dcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaaaaaaaaaidcaabaaaaaaaaaaa
ogbkbaaaabaaaaaaagiacaaaaaaaaaaaakaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaafgifcaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaaaaaaaa
egaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaaaaaaaaahbcaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaalpdeaaaaaiccaabaaaaaaaaaaackiacaaa
aaaaaaaaakaaaaaaabeaaaaaaaaaaaaadccaaaajbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaamnmmmmdmaaaaaaaibcaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaaibcaabaaaaaaaaaaa
akaabaaaaaaaaaaackiacaaaaaaaaaaaakaaaaaaaaaaaaalocaabaaaaaaaaaaa
agijcaaaaaaaaaaaalaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaialp
dcaaaaamhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaa
abaaaaaadkiacaaaaaaaaaaaamaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaa
abaaaaaaakiacaaaaaaaaaaaanaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaajgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaaaaaaaaiicaabaaaaaaaaaaa
akaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaaiaaaaaaaaaaaaalhcaabaaaabaaaaaa
egiccaaaaaaaaaaaaiaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaa
dcaaaaamhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaihcaabaaa
adaaaaaaegacbaaaadaaaaaaegiccaaaaaaaaaaaadaaaaaadcaaaaalhcaabaaa
acaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaaeaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaalhcaabaaaadaaaaaaegiccaaaaaaaaaaaahaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaadaaaaaa
fgbfbaaaacaaaaaaegacbaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadbaaaaaiicaabaaa
aaaaaaaaabeaaaaaaaaaaadpdkiacaaaaaaaaaaaajaaaaaadhaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaadiaaaaah
icaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaabaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaaaaeaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaafaaaaaaegiccaiaebaaaaaaaaaaaaaaagaaaaaadcaaaaak
hcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
agaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaa
acaaaaaaegaobaaaacaaaaaaegiocaaaaaaaaaaaacaaaaaadiaaaaahhcaabaaa
acaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_AtlasOffsetX]
Float 17 [_AtlasOffsetY]
Float 18 [_AtlasScaleX]
Float 19 [_AtlasScaleY]
Vector 20 [unity_LightmapFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
SetTexture 8 [unity_Lightmap] 2D
SetTexture 9 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 61 ALU, 7 TEX
PARAM c[23] = { program.local[0..20],
		{ 1, 0, 8, 0.5 },
		{ 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R0, fragment.texcoord[2], texture[8], 2D;
MUL R1.xyz, R0.w, R0;
TEX R0, fragment.texcoord[2], texture[9], 2D;
MUL R0.xyz, R0.w, R0;
MUL R0.xyz, R0, c[21].z;
DP4 R1.w, fragment.texcoord[3], fragment.texcoord[3];
RSQ R0.w, R1.w;
MOV R2.w, c[21].x;
ADD R3.xyz, -R2.w, c[5];
RCP R0.w, R0.w;
MAD R1.xyz, R1, c[21].z, -R0;
MAD_SAT R0.w, R0, c[20].z, c[20];
MAD R2.xyz, R0.w, R1, R0;
TXP R0, fragment.texcoord[1], texture[7], 2D;
ADD R2.xyz, R0, R2;
MOV R1.xyz, c[4];
ADD R0.xyz, -R1, c[3];
MAD R1.xyz, fragment.color.primary.x, R0, c[4];
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R4.xyz, R0, c[1];
MOV R1.w, c[21].x;
MUL R1, R1, c[0];
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[2], -R4;
MAD R0.xyz, fragment.color.primary.x, R0, R4;
MAD R3.xyz, fragment.color.primary.y, R3, c[21].x;
MUL R3.xyz, R0, R3;
MUL R2.w, R0, R3.y;
MUL R1.xyz, R1, R2;
MOV R4.x, c[18];
MOV R4.y, c[19].x;
MOV R0.y, c[17].x;
MOV R0.x, c[16];
MAD R0.xy, fragment.texcoord[0].zwzw, R4, R0;
TEX R0.x, R0, texture[3], 2D;
ADD R0.z, -R0.x, c[21].x;
MUL_SAT R3.w, R0.z, c[7].x;
MOV R0.zw, c[21].xyyx;
ADD R0.xy, fragment.texcoord[0].zwzw, c[12].x;
MUL R0.xy, R0, c[13].x;
TEX R0.xy, R0, texture[6], 2D;
ADD R0.x, R0, R0.y;
ADD R4.xyz, -R0.w, c[6];
MAX R0.y, R0.z, c[14].x;
ADD R0.x, R0, -c[21].w;
MAD_SAT R4.w, R0.x, R0.y, c[22].x;
MAD R0.xyz, R3.w, R4, c[21].x;
MUL R3.xyz, R3, R0;
ADD R3.w, -R4, c[21].x;
MUL R4.x, R3.w, c[14];
ADD R0.xyz, -R0.w, c[15];
MOV R3.w, c[11].x;
SLT R0.w, c[21], R3;
MAD R0.xyz, R4.x, R0, c[21].x;
ABS R0.w, R0;
MUL R1.xyz, R2.w, R1;
MUL R0.xyz, R3, R0;
CMP R0.w, -R0, c[21].y, c[21].x;
CMP R0.xyz, -R0.w, R3, R0;
MAD result.color.xyz, R0, R2, R1;
MUL result.color.w, R2, R1;
END
# 61 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_DetailTexEnable]
Float 9 [_DetailTexOffset]
Float 10 [_DetailTexScale]
Float 11 [_DetailTexPower]
Vector 12 [_DetailTexColor]
Float 13 [_AtlasOffsetX]
Float 14 [_AtlasOffsetY]
Float 15 [_AtlasScaleX]
Float 16 [_AtlasScaleY]
Vector 17 [unity_LightmapFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
SetTexture 8 [unity_Lightmap] 2D
SetTexture 9 [unity_LightmapInd] 2D
"ps_3_0
; 54 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c18, 1.00000000, -1.00000000, 0.00000000, 0.02500000
def c19, -0.50000000, 8.00000000, 0, 0
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2
dcl_texcoord2 v3.xy
dcl_texcoord3 v4
texld r0, v3, s8
mul_pp r1.xyz, r0.w, r0
texld r0, v3, s9
mul_pp r0.xyz, r0.w, r0
mul_pp r0.xyz, r0, c19.y
dp4 r1.w, v4, v4
rsq r0.w, r1.w
rcp r0.w, r0.w
mad_pp r1.xyz, r1, c19.y, -r0
mad_sat r0.w, r0, c17.z, c17
mad_pp r2.xyz, r0.w, r1, r0
texldp r1, v2, s7
add_pp r3.xyz, r1, r2
mov_pp r1.xyz, c5
add_pp r2.xyz, c18.y, r1
mov_pp r0.xyz, c3
add_pp r0.xyz, -c4, r0
mad_pp r2.xyz, v1.y, r2, c18.x
mov_pp r0.w, c18.x
mad_pp r0.xyz, v1.x, r0, c4
mul_pp r0, r0, c0
mul_pp r4.xyz, r0, r3
texld r0.xyz, v0, s0
mul r1.xyz, r0, c1
texld r0.xyz, v0, s1
mad r0.xyz, r0, c2, -r1
mad r0.xyz, v1.x, r0, r1
mul r0.xyz, r0, r2
mul_pp r1.w, r1, r0.y
mov r2.x, c15
mov r2.y, c16.x
mov r1.y, c14.x
mov r1.x, c13
mad r1.xy, v0.zwzw, r2, r1
texld r1.x, r1, s3
add r2.w, -r1.x, c18.x
mul_pp r2.xyz, r1.w, r4
mov r1.xyz, c6
add r4.xy, v0.zwzw, c9.x
mul_sat r2.w, r2, c7.x
add r1.xyz, c18.y, r1
mad r1.xyz, r2.w, r1, c18.x
mul r0.xyz, r0, r1
mul r4.xy, r4, c10.x
texld r1.xy, r4, s6
add r1.x, r1, r1.y
mov r1.z, c11.x
max r1.y, c18.z, r1.z
add r1.x, r1, c19
mad_sat r2.w, r1.x, r1.y, c18
mov r1.xyz, c12
add r2.w, -r2, c18.x
mul r2.w, r2, c11.x
add r1.xyz, c18.y, r1
mad r1.xyz, r2.w, r1, c18.x
mov r2.w, c8.x
mul r1.xyz, r0, r1
add_pp r2.w, c19.x, r2
cmp_pp r0.xyz, -r2.w, r0, r1
mad_pp oC0.xyz, r0, r3, r2
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
ConstBuffer "$Globals" 304 // 288 used size, 29 vars
Vector 32 [_SpecColor] 4
Vector 48 [_Color] 3
Vector 64 [_TrimColor] 3
Vector 80 [_TrimSpecColor] 3
Vector 96 [_MainSpecColor] 3
Vector 112 [_VertexMaskColor] 3
Vector 128 [_BodyOcclusionColor] 3
Float 140 [_BodyOcclusionPower]
Float 156 [_DetailTexEnable]
Float 160 [_DetailTexOffset]
Float 164 [_DetailTexScale]
Float 168 [_DetailTexPower]
Vector 176 [_DetailTexColor] 3
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
Vector 272 [unity_LightmapFade] 4
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 3
SetTexture 2 [_BodyOcclusionTex] 2D 2
SetTexture 3 [_BumpDetailTex] 2D 1
SetTexture 4 [_LightBuffer] 2D 4
SetTexture 5 [unity_Lightmap] 2D 5
SetTexture 6 [unity_LightmapInd] 2D 6
// 54 instructions, 4 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 7 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpnkbpdimjliikhcllklhmfgbigofbhjiabaaaaaafeajaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
daaiaaaaeaaaaaaaamacaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
gcbaaaadpcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaagcbaaaadlcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacaeaaaaaaaaaaaaaidcaabaaaaaaaaaaaogbkbaaa
abaaaaaaagiacaaaaaaaaaaaakaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaa
aaaaaaaafgifcaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaalpdeaaaaaiccaabaaaaaaaaaaackiacaaaaaaaaaaa
akaaaaaaabeaaaaaaaaaaaaadccaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaamnmmmmdmaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackiacaaaaaaaaaaaakaaaaaaaaaaaaalocaabaaaaaaaaaaaagijcaaa
aaaaaaaaalaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaialpdcaaaaam
hcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaa
dkiacaaaaaaaaaaaamaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaa
akiacaaaaaaaaaaaanaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
jgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaaaaaaaaaiicaabaaaaaaaaaaaakaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaaiaaaaaaaaaaaaalhcaabaaaabaaaaaaegiccaaa
aaaaaaaaaiaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaam
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegiccaaaaaaaaaaaadaaaaaadcaaaaalhcaabaaaacaaaaaa
egacbaaaacaaaaaaegiccaaaaaaaaaaaaeaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaajhcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
adaaaaaaaaaaaaalhcaabaaaadaaaaaaegiccaaaaaaaaaaaahaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaamhcaabaaaadaaaaaafgbfbaaa
acaaaaaaegacbaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
diaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadbaaaaaiicaabaaaaaaaaaaa
abeaaaaaaaaaaadpdkiacaaaaaaaaaaaajaaaaaadhaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaadiaaaaahicaabaaa
aaaaaaaabkaabaaaacaaaaaadkaabaaaabaaaaaabbaaaaahicaabaaaabaaaaaa
egbobaaaafaaaaaaegbobaaaafaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadccaaaalicaabaaaabaaaaaadkaabaaaabaaaaaackiacaaaaaaaaaaa
bbaaaaaadkiacaaaaaaaaaaabbaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
aeaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaaebdiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaapgapbaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaafaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
adaaaaaaabeaaaaaaaaaaaebdcaaaaakhcaabaaaadaaaaaapgapbaaaacaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaacaaaaaa
pgapbaaaabaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaafaaaaaaegiccaiaebaaaaaaaaaaaaaaagaaaaaadcaaaaak
hcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
agaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaa
acaaaaaaegaobaaaacaaaaaaegiocaaaaaaaaaaaacaaaaaadiaaaaahhcaabaaa
acaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_BumpPower]
Float 9 [_BodyBumpPower]
Float 10 [_BumpDetailPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_Shininess]
Float 17 [_TrimShininess]
Float 18 [_AtlasOffsetX]
Float 19 [_AtlasOffsetY]
Float 20 [_AtlasScaleX]
Float 21 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
SetTexture 8 [unity_Lightmap] 2D
SetTexture 9 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 161 ALU, 11 TEX
PARAM c[26] = { program.local[0..21],
		{ 1, 0, 2, 0.5 },
		{ -0.40824828, -0.70710677, 0.57735026, 8 },
		{ -0.40824831, 0.70710677, 0.57735026, 128 },
		{ 0.81649655, 0, 0.57735026, 0.025 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MOV R4.xy, c[22];
TEX R3.yw, fragment.texcoord[0], texture[2], 2D;
MAD R3.xy, R3.wyzw, c[22].z, -c[22].x;
MOV R0.z, c[20].x;
MOV R0.w, c[21].x;
MOV R0.y, c[19].x;
MOV R0.x, c[18];
MAD R4.zw, fragment.texcoord[0], R0, R0.xyxy;
TEX R0.yw, R4.zwzw, texture[4], 2D;
MAD R0.xy, R0.wyzw, c[22].z, -c[22].x;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.z, -R0, c[22].x;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
ADD R1.xyz, R0, -c[22].wwxw;
MUL R1.xyz, R1, c[9].x;
ADD R0.w, -R4.x, c[9].x;
ADD R1.xyz, R1, c[22].wwxw;
CMP R1.xyz, -R0.w, R0, R1;
MOV R0.xy, c[9].x;
MOV R0.z, c[22].y;
MAD R0.xyz, R1, R0, R1;
DP3 R0.w, R0, R0;
MUL R1.xy, fragment.texcoord[0].zwzw, c[13].x;
TEX R1.yw, R1, texture[6], 2D;
MAD R1.xy, R1.wyzw, c[22].z, -c[22].x;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R0;
TEX R0.yw, fragment.texcoord[0], texture[5], 2D;
MAD R0.xy, R0.wyzw, c[22].z, -c[22].x;
MUL R3.zw, R0.xyxy, R0.xyxy;
ADD_SAT R2.w, R3.z, R3;
MUL R0.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.w, -R2, c[22].x;
MUL R1.zw, R1.xyxy, R1.xyxy;
RSQ R2.w, R0.w;
ADD R0.z, -R0, c[22].x;
RSQ R0.w, R0.z;
RCP R0.z, R2.w;
RCP R3.z, R0.w;
ADD R3.xyz, R3, -R0;
MAD R3.xyz, fragment.color.primary.x, R3, R0;
ADD_SAT R0.w, R1.z, R1;
MOV R0.xy, c[8].x;
MOV R0.z, c[22].y;
MAD R3.xyz, R3, R0, R2;
ADD R0.w, -R0, c[22].x;
RSQ R0.x, R0.w;
DP3 R0.w, R3, R3;
RCP R1.z, R0.x;
RSQ R0.w, R0.w;
ABS R3.w, c[8].x;
MOV R0.z, c[22].y;
MOV R0.xy, c[10].x;
MUL R5.xyz, R1, R0;
MAD R0.xyz, R1, R0, R2;
MAD R5.xyz, R0.w, R3, R5;
DP3 R1.y, R5, R5;
DP3 R1.x, R0, R0;
RSQ R1.w, R1.x;
MUL R0.xyz, R1.w, R0;
RSQ R1.y, R1.y;
MUL R1.xyz, R1.y, R5;
ABS R2.w, c[10].x;
CMP R5.x, -R2.w, c[22], c[22].y;
CMP R1.w, -R3, c[22].x, c[22].y;
CMP R2.w, -R2, c[22].y, c[22].x;
MUL R5.y, R1.w, R5.x;
CMP R5.z, -R3.w, c[22].y, c[22].x;
ABS R3.w, R5.y;
MUL R2.w, R1, R2;
MUL R5.x, R5, R5.z;
CMP R3.w, -R3, c[22].y, c[22].x;
MUL R5.y, R3.w, R5.x;
CMP R0.xyz, -R5.y, R0, R1;
MUL R1.xyz, R0.w, R3;
ABS R0.w, R5.x;
CMP R0.w, -R0, c[22].y, c[22].x;
MUL R1.w, R3, R0;
MUL R3.x, R1.w, R2.w;
ABS R0.w, R2;
CMP R2.w, -R0, c[22].y, c[22].x;
CMP R1.xyz, -R3.x, R1, R0;
MUL R1.w, R1, R2;
CMP R1.xyz, -R1.w, R2, R1;
TEX R0, fragment.texcoord[2], texture[9], 2D;
MUL R2.xyz, R0.w, R0;
MUL R2.xyz, R2, c[23].w;
MUL R3.xyz, R2.y, c[24];
DP3_SAT R0.z, R1, c[23];
DP3_SAT R0.y, R1, c[24];
DP3_SAT R0.x, R1, c[25];
DP3 R1.w, R0, R2;
MAD R3.xyz, R2.x, c[25], R3;
MAD R2.xyz, R2.z, c[23], R3;
TEX R0, fragment.texcoord[2], texture[8], 2D;
MUL R0.xyz, R0.w, R0;
DP3 R0.w, fragment.texcoord[3], fragment.texcoord[3];
MUL R0.xyz, R0, R1.w;
DP3 R2.w, R2, R2;
RSQ R1.w, R2.w;
MUL R2.xyz, R1.w, R2;
RSQ R0.w, R0.w;
MAD R3.xyz, R0.w, fragment.texcoord[3], R2;
MUL R2.xyz, R0, c[23].w;
DP3 R0.x, R3, R3;
MOV R0.y, c[16].x;
ADD R0.w, -R0.y, c[17].x;
RSQ R0.x, R0.x;
MUL R0.xyz, R0.x, R3;
DP3 R0.x, R1, R0;
MAD R0.w, fragment.color.primary.x, R0, c[16].x;
MUL R0.y, R0.w, c[24].w;
MAX R0.x, R0, c[22].y;
POW R2.w, R0.x, R0.y;
MOV R0.w, c[22].x;
ADD R3.xyz, -R0.w, c[5];
TXP R1, fragment.texcoord[1], texture[7], 2D;
ADD R1, R1, R2;
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R2.xyz, R0, c[1];
TEX R5.x, R4.zwzw, texture[3], 2D;
ADD R2.w, -R5.x, c[22].x;
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R0.xyz, R0, c[2], -R2;
MAD R2.xyz, fragment.color.primary.x, R0, R2;
MAD R3.xyz, fragment.color.primary.y, R3, c[22].x;
MUL R2.xyz, R2, R3;
MOV R0.xyz, c[4];
ADD R0.xyz, -R0, c[3];
ADD R3.xy, fragment.texcoord[0].zwzw, c[12].x;
MUL R3.xy, R3, c[13].x;
TEX R5.xy, R3, texture[6], 2D;
ADD R3.w, R5.x, R5.y;
MUL R1.w, R1, R2.y;
MUL_SAT R2.w, R2, c[7].x;
ADD R3.xyz, -R4.x, c[6];
MAD R3.xyz, R2.w, R3, c[22].x;
MUL R2.xyz, R2, R3;
MOV R0.w, c[22].x;
MAD R0.xyz, fragment.color.primary.x, R0, c[4];
MUL R0, R0, c[0];
MUL R0.xyz, R1, R0;
MUL R0.xyz, R1.w, R0;
MAX R4.y, R4, c[14].x;
ADD R3.w, R3, -c[22];
MAD_SAT R3.w, R3, R4.y, c[25];
ADD R2.w, -R3, c[22].x;
MUL R3.w, R2, c[14].x;
MOV R2.w, c[11].x;
ADD R3.xyz, -R4.x, c[15];
SLT R2.w, c[22], R2;
MAD R3.xyz, R3.w, R3, c[22].x;
ABS R2.w, R2;
MUL R3.xyz, R2, R3;
CMP R2.w, -R2, c[22].y, c[22].x;
CMP R2.xyz, -R2.w, R2, R3;
MAD result.color.xyz, R1, R2, R0;
MUL result.color.w, R1, R0;
END
# 161 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_SpecColor]
Vector 1 [_Color]
Vector 2 [_TrimColor]
Vector 3 [_TrimSpecColor]
Vector 4 [_MainSpecColor]
Vector 5 [_VertexMaskColor]
Vector 6 [_BodyOcclusionColor]
Float 7 [_BodyOcclusionPower]
Float 8 [_BumpPower]
Float 9 [_BodyBumpPower]
Float 10 [_BumpDetailPower]
Float 11 [_DetailTexEnable]
Float 12 [_DetailTexOffset]
Float 13 [_DetailTexScale]
Float 14 [_DetailTexPower]
Vector 15 [_DetailTexColor]
Float 16 [_Shininess]
Float 17 [_TrimShininess]
Float 18 [_AtlasOffsetX]
Float 19 [_AtlasOffsetY]
Float 20 [_AtlasScaleX]
Float 21 [_AtlasScaleY]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_BumpDetailTex] 2D
SetTexture 7 [_LightBuffer] 2D
SetTexture 8 [unity_Lightmap] 2D
SetTexture 9 [unity_LightmapInd] 2D
"ps_3_0
; 154 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c22, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c23, -0.50000000, -1.00000000, 0.50000000, 1.00000000
def c24, -0.40824828, -0.70710677, 0.57735026, 8.00000000
def c25, -0.40824831, 0.70710677, 0.57735026, 128.00000000
def c26, 0.81649655, 0.00000000, 0.57735026, 0.02500000
dcl_texcoord0 v0
dcl_color0 v1.xy
dcl_texcoord1 v2
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xyz
texld r3.yw, v0, s2
mad_pp r3.xy, r3.wyzw, c22.z, c22.w
mov r0.z, c20.x
mov r0.w, c21.x
mov r0.y, c19.x
mov r0.x, c18
mad r5.xy, v0.zwzw, r0.zwzw, r0
texld r0.yw, r5, s4
mad_pp r0.xy, r0.wyzw, c22.z, c22.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c22.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
add r1.xyz, r0, c23.xxyw
mul r1.xyz, r1, c9.x
mov r0.w, c9.x
add r0.w, c22, r0
add r1.xyz, r1, c23.zzww
cmp r1.xyz, -r0.w, r1, r0
mov r0.xy, c9.x
mov r0.z, c22.x
mad r2.xyz, r1, r0, r1
mul r0.xy, v0.zwzw, c13.x
texld r0.yw, r0, s6
mad_pp r1.xy, r0.wyzw, c22.z, c22.w
dp3 r0.z, r2, r2
rsq r0.x, r0.z
mul r2.xyz, r0.x, r2
texld r0.yw, v0, s5
mad_pp r0.xy, r0.wyzw, c22.z, c22.w
mul_pp r3.zw, r0.xyxy, r0.xyxy
add_pp_sat r2.w, r3.z, r3
mul_pp r0.zw, r3.xyxy, r3.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.w, -r2, c22.y
mul_pp r1.zw, r1.xyxy, r1.xyxy
rsq_pp r2.w, r0.w
add_pp r0.z, -r0, c22.y
rsq_pp r0.w, r0.z
rcp_pp r3.z, r0.w
rcp_pp r0.z, r2.w
add r3.xyz, r3, -r0
mad r3.xyz, v1.x, r3, r0
add_pp_sat r0.w, r1.z, r1
mov r0.xy, c8.x
mov r0.z, c22.x
mad r3.xyz, r3, r0, r2
add_pp r0.w, -r0, c22.y
rsq_pp r0.x, r0.w
rcp_pp r1.z, r0.x
dp3 r0.w, r3, r3
rsq r1.w, r0.w
mov r0.z, c22.x
mov r0.xy, c10.x
mul r4.xyz, r1, r0
mad r4.xyz, r1.w, r3, r4
mad r0.xyz, r1, r0, r2
dp3 r0.w, r4, r4
dp3 r1.x, r0, r0
rsq r2.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r4
abs r3.w, c10.x
mul r3.xyz, r1.w, r3
mul r0.xyz, r2.w, r0
abs r4.y, c8.x
cmp r2.w, -r4.y, c22.x, c22.y
cmp r4.x, -r3.w, c22, c22.y
mul_pp r0.w, r2, r4.x
cmp r4.y, -r4, c22, c22.x
cmp r1.w, -r3, c22.y, c22.x
mul_pp r4.y, r4.x, r4
abs_pp r0.w, r0
cmp_pp r4.x, -r0.w, c22.y, c22
mul_pp r0.w, r4.x, r4.y
cmp_pp r1.xyz, -r0.w, r1, r0
texld r0, v3, s9
mul_pp r0.xyz, r0.w, r0
abs_pp r0.w, r4.y
cmp_pp r0.w, -r0, c22.y, c22.x
mul_pp r0.w, r4.x, r0
mul_pp r1.w, r2, r1
mul_pp r2.w, r0, r1
abs_pp r1.w, r1
cmp_pp r1.w, -r1, c22.y, c22.x
mul_pp r0.xyz, r0, c24.w
cmp_pp r1.xyz, -r2.w, r1, r3
mul_pp r0.w, r0, r1
cmp_pp r1.xyz, -r0.w, r1, r2
mul r3.xyz, r0.y, c25
mad r3.xyz, r0.x, c26, r3
mad r3.xyz, r0.z, c24, r3
dp3 r0.w, r3, r3
rsq r1.w, r0.w
texld r4.x, r5, s3
add r2.w, -r4.x, c22.y
dp3_pp r0.w, v4, v4
add r4.xy, v0.zwzw, c12.x
dp3_pp_sat r2.z, r1, c24
dp3_pp_sat r2.y, r1, c25
dp3_pp_sat r2.x, r1, c26
dp3_pp r2.x, r2, r0
mul r3.xyz, r1.w, r3
rsq_pp r0.w, r0.w
mad_pp r3.xyz, r0.w, v4, r3
dp3_pp r0.w, r3, r3
rsq_pp r0.x, r0.w
mul_pp r0.xyz, r0.x, r3
dp3_pp r0.x, r1, r0
mov_pp r0.w, c17.x
add_pp r0.w, -c16.x, r0
mad_pp r0.y, v1.x, r0.w, c16.x
mov_pp r3.xyz, c5
max_pp r2.y, r0.x, c22.x
mul_pp r2.z, r0.y, c25.w
texld r1, v3, s8
pow r0, r2.y, r2.z
mul_pp r0.xyz, r1.w, r1
mul_pp r0.xyz, r0, r2.x
mul_pp r1.xyz, r0, c24.w
mov r1.w, r0
texldp r0, v2, s7
add_pp r1, r0, r1
texld r0.xyz, v0, s0
mul r2.xyz, r0, c1
texld r0.xyz, v0, s1
mad r0.xyz, r0, c2, -r2
mad r0.xyz, v1.x, r0, r2
add_pp r3.xyz, c22.w, r3
mad_pp r2.xyz, v1.y, r3, c22.y
mul r2.xyz, r0, r2
mov_pp r3.xyz, c3
add_pp r0.xyz, -c4, r3
mul_pp r1.w, r1, r2.y
mul_sat r2.w, r2, c7.x
mov_pp r0.w, c22.y
mad_pp r0.xyz, v1.x, r0, c4
mul_pp r0, r0, c0
mul_pp r0.xyz, r1, r0
mul_pp r3.xyz, r1.w, r0
mov r0.xyz, c6
add r0.xyz, c22.w, r0
mad r0.xyz, r2.w, r0, c22.y
mul r0.xyz, r2, r0
mul r4.xy, r4, c13.x
texld r2.xy, r4, s6
add r2.x, r2, r2.y
mov r2.z, c14.x
max r2.y, c22.x, r2.z
add r2.x, r2, c23
mad_sat r2.w, r2.x, r2.y, c26
mov r2.xyz, c15
add r2.w, -r2, c22.y
mul r2.w, r2, c14.x
add r2.xyz, c22.w, r2
mad r2.xyz, r2.w, r2, c22.y
mov r2.w, c11.x
mul r2.xyz, r0, r2
add_pp r2.w, c23.x, r2
cmp_pp r0.xyz, -r2.w, r0, r2
mad_pp oC0.xyz, r1, r0, r3
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
ConstBuffer "$Globals" 304 // 212 used size, 29 vars
Vector 32 [_SpecColor] 4
Vector 48 [_Color] 3
Vector 64 [_TrimColor] 3
Vector 80 [_TrimSpecColor] 3
Vector 96 [_MainSpecColor] 3
Vector 112 [_VertexMaskColor] 3
Vector 128 [_BodyOcclusionColor] 3
Float 140 [_BodyOcclusionPower]
Float 144 [_BumpPower]
Float 148 [_BodyBumpPower]
Float 152 [_BumpDetailPower]
Float 156 [_DetailTexEnable]
Float 160 [_DetailTexOffset]
Float 164 [_DetailTexScale]
Float 168 [_DetailTexPower]
Vector 176 [_DetailTexColor] 3
Float 188 [_Shininess]
Float 192 [_TrimShininess]
Float 196 [_AtlasOffsetX]
Float 200 [_AtlasOffsetY]
Float 204 [_AtlasScaleX]
Float 208 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [_BumpDetailTex] 2D 2
SetTexture 7 [_LightBuffer] 2D 7
SetTexture 8 [unity_Lightmap] 2D 8
SetTexture 9 [unity_LightmapInd] 2D 9
// 133 instructions, 6 temp regs, 0 temp arrays:
// ALU 86 float, 0 int, 2 uint
// TEX 11 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjmandnlekidfomgankcoiommfgmjolhlabaaaaaahibdaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
febcaaaaeaaaaaaajfaeaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaad
aagabaaaaiaaaaaafkaaaaadaagabaaaajaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaa
ffffaaaafibiaaaeaahabaaaajaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaaddcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaaddcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaafaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaa
abaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaamaaaaaa
diaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaanaaaaaa
aaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaaeaaaaaaaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaabaaaaaa
abeaaaaaaaaaiadpdicaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaaiaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaaaaaaaahdcaabaaaacaaaaaahgapbaaaacaaaaaahgapbaaaacaaaaaa
apaaaaahbcaabaaaabaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaaakaabaaaabaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaamalpaaaamalpaaaaialpaaaaaaaaaaaaaaakhcaabaaaacaaaaaa
egacbaaaacaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaadcaaaaan
hcaabaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaaegacbaaaabaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaiadpaaaaaaaabnaaaaaiicaabaaaabaaaaaaabeaaaaa
aaaaiadpbkiacaaaaaaaaaaaajaaaaaadhaaaaajhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadgaaaaafecaabaaaacaaaaaa
abeaaaaaaaaaaaaadgaaaaagjcaabaaaacaaaaaafgijcaaaaaaaaaaaajaaaaaa
dcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaagacbaaaacaaaaaaegacbaaa
abaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaa
aaaaaaaaajaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaahocaabaaaadaaaaaaagajbaaa
aaaaaaaaagaabaaaadaaaaaabiaaaaaldcaabaaaaeaaaaaaigiacaaaaaaaaaaa
ajaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadjaaaaalmcaabaaa
aeaaaaaakgiccaaaaaaaaaaaajaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaabaaaaahdcaabaaaaeaaaaaaogakbaaaaeaaaaaaegaabaaaaeaaaaaa
abaaaaahecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaadhaaaaaj
hcaabaaaacaaaaaafgafbaaaaeaaaaaajgahbaaaadaaaaaaegacbaaaacaaaaaa
diaaaaaigcaabaaaadaaaaaakgblbaaaabaaaaaafgifcaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaagaaaaaaaagabaaa
acaaaaaadcaaaaapgcaabaaaadaaaaaapganbaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaaaaaaaaaialpaaaaialpaaaaaaaa
diaaaaahdcaabaaaafaaaaaapgapbaaaacaaaaaajgafbaaaadaaaaaadgaaaaaf
ecaabaaaafaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaabaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagaabaaaadaaaaaaegacbaaaafaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaadhaaaaajhcaabaaaabaaaaaaagaabaaaaeaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaadhaaaaajhcaabaaaaaaaaaaa
kgakbaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaa
afaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaajaaaaaa
aagabaaaajaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaacaaaaaaabeaaaaa
aaaaaaebdiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaapgapbaaaabaaaaaa
diaaaaakhcaabaaaadaaaaaafgafbaaaacaaaaaaaceaaaaaomafnblopdaedfdp
dkmnbddpaaaaaaaadcaaaaamhcaabaaaadaaaaaaagaabaaaacaaaaaaaceaaaaa
olaffbdpaaaaaaaadkmnbddpaaaaaaaaegacbaaaadaaaaaadcaaaaamhcaabaaa
adaaaaaakgakbaaaacaaaaaaaceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaa
egacbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
abaaaaaaegacbaaaadaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadeaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaa
cpaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaakccaabaaaabaaaaaa
dkiacaiaebaaaaaaaaaaaaaaalaaaaaaakiacaaaaaaaaaaaamaaaaaadcaaaaak
ccaabaaaabaaaaaaakbabaaaacaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaa
alaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaed
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaabjaaaaaf
icaabaaaabaaaaaaakaabaaaabaaaaaaapcaaaakbcaabaaaadaaaaaaaceaaaaa
olaffbdpdkmnbddpaaaaaaaaaaaaaaaaigaabaaaaaaaaaaabacaaaakccaabaaa
adaaaaaaaceaaaaaomafnblopdaedfdpdkmnbddpaaaaaaaaegacbaaaaaaaaaaa
bacaaaakecaabaaaadaaaaaaaceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaa
egacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaaiaaaaaa
aagabaaaaiaaaaaadiaaaaahccaabaaaaaaaaaaadkaabaaaacaaaaaaabeaaaaa
aaaaaaebdiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaafgafbaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaaaaaaaaaeghobaaaahaaaaaaaagabaaaahaaaaaaaaaaaaah
pcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaaaaaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaafaaaaaaegiccaiaebaaaaaaaaaaaaaaagaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaagaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaai
pcaabaaaacaaaaaaegaobaaaacaaaaaaegiocaaaaaaaaaaaacaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaagaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
diaaaaaihcaabaaaacaaaaaaegacbaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaa
dcaaaaalhcaabaaaadaaaaaaegacbaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaacaaaaaaagbabaaaacaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaadaaaaaaegiccaaa
aaaaaaaaahaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadcaaaaam
hcaabaaaadaaaaaafgbfbaaaacaaaaaaegacbaaaadaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaaa
acaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaacaaaaaadkaabaaaabaaaaaaaaaaaaal
hcaabaaaadaaaaaaegiccaaaaaaaaaaaaiaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadcaaaaamhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaidcaabaaaadaaaaaa
ogbkbaaaabaaaaaaagiacaaaaaaaaaaaakaaaaaadiaaaaaidcaabaaaadaaaaaa
egaabaaaadaaaaaafgifcaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaacaaaaaaaaaaaaahicaabaaa
aaaaaaaabkaabaaaadaaaaaaakaabaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaalpdeaaaaaiicaabaaaabaaaaaackiacaaa
aaaaaaaaakaaaaaaabeaaaaaaaaaaaaadccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaabeaaaaamnmmmmdmaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackiacaaaaaaaaaaaakaaaaaaaaaaaaalhcaabaaaadaaaaaa
egiccaaaaaaaaaaaalaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaa
dcaaaaamhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaadbaaaaaiicaabaaaaaaaaaaaabeaaaaaaaaaaadp
dkiacaaaaaaaaaaaajaaaaaadhaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}

}
	}

#LINE 126

	}
		
	SubShader {
		Tags { "RenderType"="Opaque" }
		LOD 200
		
			
	Pass {
		Name "FORWARD"
		Tags { "LightMode" = "ForwardBase" }
Program "vp" {
// Vertex combos: 12
//   opengl - ALU: 8 to 81
//   d3d9 - ALU: 8 to 84
//   d3d11 - ALU: 1 to 39, TEX: 0 to 0, FLOW: 1 to 1
//   d3d11_9x - ALU: 1 to 39, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_WorldSpaceLightPos0]
Vector 15 [unity_SHAr]
Vector 16 [unity_SHAg]
Vector 17 [unity_SHAb]
Vector 18 [unity_SHBr]
Vector 19 [unity_SHBg]
Vector 20 [unity_SHBb]
Vector 21 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 22 [unity_Scale]
Vector 23 [_MainTex_ST]
Vector 24 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 45 ALU
PARAM c[25] = { { 1 },
		state.matrix.mvp,
		program.local[5..24] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R1.xyz, vertex.normal, c[22].w;
DP3 R2.w, R1, c[6];
DP3 R0.x, R1, c[5];
DP3 R0.z, R1, c[7];
MOV R0.y, R2.w;
MOV R0.w, c[0].x;
MUL R1, R0.xyzz, R0.yzzx;
DP4 R2.z, R0, c[17];
DP4 R2.y, R0, c[16];
DP4 R2.x, R0, c[15];
MUL R0.w, R2, R2;
MAD R0.w, R0.x, R0.x, -R0;
DP4 R0.z, R1, c[20];
DP4 R0.y, R1, c[19];
DP4 R0.x, R1, c[18];
ADD R0.xyz, R2, R0;
MUL R1.xyz, R0.w, c[21];
ADD result.texcoord[2].xyz, R0, R1;
MOV R1.xyz, c[13];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[22].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[14];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP3 result.texcoord[1].y, R3, R1;
DP3 result.texcoord[3].y, R1, R2;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[3].z, vertex.normal, R2;
DP3 result.texcoord[3].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[24].xyxy, c[24];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[23], c[23].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 45 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [unity_SHAr]
Vector 15 [unity_SHAg]
Vector 16 [unity_SHAb]
Vector 17 [unity_SHBr]
Vector 18 [unity_SHBg]
Vector 19 [unity_SHBb]
Vector 20 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_MainTex_ST]
Vector 23 [_BodyBumpTex_ST]
"vs_2_0
; 48 ALU
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r1.xyz, v2, c21.w
dp3 r2.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r2.w
mov r0.w, c24.x
mul r1, r0.xyzz, r0.yzzx
dp4 r2.z, r0, c16
dp4 r2.y, r0, c15
dp4 r2.x, r0, c14
mul r0.w, r2, r2
mad r0.w, r0.x, r0.x, -r0
dp4 r0.z, r1, c19
dp4 r0.y, r1, c18
dp4 r0.x, r1, c17
mul r1.xyz, r0.w, c20
add r0.xyz, r2, r0
add oT2.xyz, r0, r1
mov r0.w, c24.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c21.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c13, r0
mov r0, c9
mov r1, c8
dp4 r4.y, c13, r0
dp4 r4.x, c13, r1
dp3 oT1.y, r4, r2
dp3 oT3.y, r2, r3
dp3 oT1.z, v2, r4
dp3 oT1.x, r4, v1
dp3 oT3.z, v2, r3
dp3 oT3.x, v1, r3
mov oD0, v5
mad oT0.zw, v4.xyxy, c23.xyxy, c23
mad oT0.xy, v3, c22, c22.zwzw
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 144 // 144 used size, 13 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 42 instructions, 5 temp regs, 0 temp arrays:
// ALU 23 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbjdlfnbejoljgcnognblohlemkmhpfngabaaaaaaceaiaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcgmagaaaaeaaaabaajlabaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacafaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaaiaaaaaa
kgiocaaaaaaaaaaaaiaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaegbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaai
hcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
lcaabaaaabaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaabaaaaaaegaibaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaa
abaaaaaaegadbaaaabaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaiadp
bbaaaaaibcaabaaaacaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaabaaaaaa
bbaaaaaiccaabaaaacaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaabaaaaaa
bbaaaaaiecaabaaaacaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaadaaaaaajgacbaaaabaaaaaaegakbaaaabaaaaaabbaaaaai
bcaabaaaaeaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaadaaaaaabbaaaaai
ccaabaaaaeaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaadaaaaaabbaaaaai
ecaabaaaaeaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaadaaaaaaaaaaaaah
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaahicaabaaa
aaaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadcaaaaak
hccabaaaaeaaaaaaegiccaaaacaaaaaabiaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaaegacbaaa
abaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_12).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_9 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BodyBumpTex, tmpvar_17).xyz * 2.0) - 1.0);
  bodyBump_7 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_6 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp vec4 c_27;
  lowp float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD1));
  highp vec3 tmpvar_29;
  tmpvar_29 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_28) * 2.0);
  c_27.xyz = tmpvar_29;
  c_27.w = 0.0;
  c_1.w = c_27.w;
  c_1.xyz = (c_27.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_12).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 normal_14;
  normal_14.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_14.z = sqrt((1.0 - clamp (dot (normal_14.xy, normal_14.xy), 0.0, 1.0)));
  trimBumpTex_9 = normal_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 normal_19;
  normal_19.xy = ((texture2D (_BodyBumpTex, tmpvar_17).wy * 2.0) - 1.0);
  normal_19.z = sqrt((1.0 - clamp (dot (normal_19.xy, normal_19.xy), 0.0, 1.0)));
  bodyBump_7 = normal_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bumpMap_6 = normal_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp vec4 c_27;
  lowp float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD1));
  highp vec3 tmpvar_29;
  tmpvar_29 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_28) * 2.0);
  c_27.xyz = tmpvar_29;
  c_27.w = 0.0;
  c_1.w = c_27.w;
  c_1.xyz = (c_27.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [unity_SHAr]
Vector 15 [unity_SHAg]
Vector 16 [unity_SHAb]
Vector 17 [unity_SHBr]
Vector 18 [unity_SHBg]
Vector 19 [unity_SHBb]
Vector 20 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_MainTex_ST]
Vector 23 [_BodyBumpTex_ST]
"agal_vs
c24 1.0 0.0 0.0 0.0
[bc]
adaaaaaaabaaahacabaaaaoeaaaaaaaabfaaaappabaaaaaa mul r1.xyz, a1, c21.w
bcaaaaaaacaaaiacabaaaakeacaaaaaaafaaaaoeabaaaaaa dp3 r2.w, r1.xyzz, c5
bcaaaaaaaaaaabacabaaaakeacaaaaaaaeaaaaoeabaaaaaa dp3 r0.x, r1.xyzz, c4
bcaaaaaaaaaaaeacabaaaakeacaaaaaaagaaaaoeabaaaaaa dp3 r0.z, r1.xyzz, c6
aaaaaaaaaaaaacacacaaaappacaaaaaaaaaaaaaaaaaaaaaa mov r0.y, r2.w
aaaaaaaaaaaaaiacbiaaaaaaabaaaaaaaaaaaaaaaaaaaaaa mov r0.w, c24.x
adaaaaaaabaaapacaaaaaakeacaaaaaaaaaaaacjacaaaaaa mul r1, r0.xyzz, r0.yzzx
bdaaaaaaacaaaeacaaaaaaoeacaaaaaabaaaaaoeabaaaaaa dp4 r2.z, r0, c16
bdaaaaaaacaaacacaaaaaaoeacaaaaaaapaaaaoeabaaaaaa dp4 r2.y, r0, c15
bdaaaaaaacaaabacaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 r2.x, r0, c14
adaaaaaaaaaaaiacacaaaappacaaaaaaacaaaappacaaaaaa mul r0.w, r2.w, r2.w
adaaaaaaadaaaiacaaaaaaaaacaaaaaaaaaaaaaaacaaaaaa mul r3.w, r0.x, r0.x
acaaaaaaaaaaaiacadaaaappacaaaaaaaaaaaappacaaaaaa sub r0.w, r3.w, r0.w
bdaaaaaaaaaaaeacabaaaaoeacaaaaaabdaaaaoeabaaaaaa dp4 r0.z, r1, c19
bdaaaaaaaaaaacacabaaaaoeacaaaaaabcaaaaoeabaaaaaa dp4 r0.y, r1, c18
bdaaaaaaaaaaabacabaaaaoeacaaaaaabbaaaaoeabaaaaaa dp4 r0.x, r1, c17
adaaaaaaabaaahacaaaaaappacaaaaaabeaaaaoeabaaaaaa mul r1.xyz, r0.w, c20
abaaaaaaaaaaahacacaaaakeacaaaaaaaaaaaakeacaaaaaa add r0.xyz, r2.xyzz, r0.xyzz
abaaaaaaacaaahaeaaaaaakeacaaaaaaabaaaakeacaaaaaa add v2.xyz, r0.xyzz, r1.xyzz
aaaaaaaaaaaaaiacbiaaaaaaabaaaaaaaaaaaaaaaaaaaaaa mov r0.w, c24.x
aaaaaaaaaaaaahacamaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, c12
bdaaaaaaabaaaeacaaaaaaoeacaaaaaaakaaaaoeabaaaaaa dp4 r1.z, r0, c10
bdaaaaaaabaaacacaaaaaaoeacaaaaaaajaaaaoeabaaaaaa dp4 r1.y, r0, c9
bdaaaaaaabaaabacaaaaaaoeacaaaaaaaiaaaaoeabaaaaaa dp4 r1.x, r0, c8
adaaaaaaaeaaahacabaaaakeacaaaaaabfaaaappabaaaaaa mul r4.xyz, r1.xyzz, c21.w
acaaaaaaadaaahacaeaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub r3.xyz, r4.xyzz, a0
aaaaaaaaaaaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, a5
adaaaaaaabaaahacabaaaancaaaaaaaaaaaaaaajacaaaaaa mul r1.xyz, a1.zxyw, r0.yzxx
aaaaaaaaaaaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, a5
adaaaaaaafaaahacabaaaamjaaaaaaaaaaaaaafcacaaaaaa mul r5.xyz, a1.yzxw, r0.zxyy
acaaaaaaabaaahacafaaaakeacaaaaaaabaaaakeacaaaaaa sub r1.xyz, r5.xyzz, r1.xyzz
adaaaaaaacaaahacabaaaakeacaaaaaaafaaaappaaaaaaaa mul r2.xyz, r1.xyzz, a5.w
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaaeaaaeacanaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r4.z, c13, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaaeaaacacanaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r4.y, c13, r0
bdaaaaaaaeaaabacanaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r4.x, c13, r1
bcaaaaaaabaaacaeaeaaaakeacaaaaaaacaaaakeacaaaaaa dp3 v1.y, r4.xyzz, r2.xyzz
bcaaaaaaadaaacaeacaaaakeacaaaaaaadaaaakeacaaaaaa dp3 v3.y, r2.xyzz, r3.xyzz
bcaaaaaaabaaaeaeabaaaaoeaaaaaaaaaeaaaakeacaaaaaa dp3 v1.z, a1, r4.xyzz
bcaaaaaaabaaabaeaeaaaakeacaaaaaaafaaaaoeaaaaaaaa dp3 v1.x, r4.xyzz, a5
bcaaaaaaadaaaeaeabaaaaoeaaaaaaaaadaaaakeacaaaaaa dp3 v3.z, a1, r3.xyzz
bcaaaaaaadaaabaeafaaaaoeaaaaaaaaadaaaakeacaaaaaa dp3 v3.x, a5, r3.xyzz
aaaaaaaaahaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v7, a2
adaaaaaaafaaamacaeaaaaeeaaaaaaaabhaaaaeeabaaaaaa mul r5.zw, a4.xyxy, c23.xyxy
abaaaaaaaaaaamaeafaaaaopacaaaaaabhaaaaoeabaaaaaa add v0.zw, r5.wwzw, c23
adaaaaaaafaaadacadaaaaoeaaaaaaaabgaaaaoeabaaaaaa mul r5.xy, a3, c22
abaaaaaaaaaaadaeafaaaafeacaaaaaabgaaaaooabaaaaaa add v0.xy, r5.xyyy, c22.zwzw
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 144 // 144 used size, 13 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 42 instructions, 5 temp regs, 0 temp arrays:
// ALU 23 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedgcgefhccbplnhcpolmodaohbmjjmmihcabaaaaaacaamaaaaaeaaaaaa
daaaaaaaciaeaaaajmakaaaagealaaaaebgpgodjpaadaaaapaadaaaaaaacpopp
headaaaahmaaaaaaahaaceaaaaaahiaaaaaahiaaaaaaceaaabaahiaaaaaaahaa
acaaabaaaaaaaaaaabaaaeaaabaaadaaaaaaaaaaacaaaaaaabaaaeaaaaaaaaaa
acaabcaaahaaafaaaaaaaaaaadaaaaaaaeaaamaaaaaaaaaaadaaamaaadaabaaa
aaaaaaaaadaabaaaafaabdaaaaaaaaaaaaaaaaaaaaacpoppfbaaaaafbiaaapka
aaaaiadpaaaaaaaaaaaaaaaaaaaaaaaabpaaaaacafaaaaiaaaaaapjabpaaaaac
afaaabiaabaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapja
bpaaaaacafaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoa
adaaoejaabaaoekaabaaookaaeaaaaaeaaaaamoaaeaaeejaacaaeekaacaaoeka
abaaaaacaaaaapiaaeaaoekaafaaaaadabaaahiaaaaaffiabeaaoekaaeaaaaae
abaaahiabdaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiabfaaoekaaaaakkia
abaaoeiaaeaaaaaeaaaaahiabgaaoekaaaaappiaaaaaoeiaaiaaaaadacaaaboa
abaaoejaaaaaoeiaabaaaaacabaaahiaacaaoejaafaaaaadacaaahiaabaancia
abaamjjaaeaaaaaeabaaahiaabaamjiaabaancjaacaaoeibafaaaaadabaaahia
abaaoeiaabaappjaaiaaaaadacaaacoaabaaoeiaaaaaoeiaaiaaaaadacaaaeoa
acaaoejaaaaaoeiaabaaaaacaaaaahiaadaaoekaafaaaaadacaaahiaaaaaffia
beaaoekaaeaaaaaeaaaaaliabdaakekaaaaaaaiaacaakeiaaeaaaaaeaaaaahia
bfaaoekaaaaakkiaaaaapeiaacaaaaadaaaaahiaaaaaoeiabgaaoekaaeaaaaae
aaaaahiaaaaaoeiabhaappkaaaaaoejbaiaaaaadaeaaaboaabaaoejaaaaaoeia
aiaaaaadaeaaacoaabaaoeiaaaaaoeiaaiaaaaadaeaaaeoaacaaoejaaaaaoeia
afaaaaadaaaaahiaacaaoejabhaappkaafaaaaadabaaahiaaaaaffiabbaaoeka
aeaaaaaeaaaaaliabaaakekaaaaaaaiaabaakeiaaeaaaaaeaaaaahiabcaaoeka
aaaakkiaaaaapeiaabaaaaacaaaaaiiabiaaaakaajaaaaadabaaabiaafaaoeka
aaaaoeiaajaaaaadabaaaciaagaaoekaaaaaoeiaajaaaaadabaaaeiaahaaoeka
aaaaoeiaafaaaaadacaaapiaaaaacjiaaaaakeiaajaaaaadadaaabiaaiaaoeka
acaaoeiaajaaaaadadaaaciaajaaoekaacaaoeiaajaaaaadadaaaeiaakaaoeka
acaaoeiaacaaaaadabaaahiaabaaoeiaadaaoeiaafaaaaadaaaaaciaaaaaffia
aaaaffiaaeaaaaaeaaaaabiaaaaaaaiaaaaaaaiaaaaaffibaeaaaaaeadaaahoa
alaaoekaaaaaaaiaabaaoeiaafaaaaadaaaaapiaaaaaffjaanaaoekaaeaaaaae
aaaaapiaamaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaoaaoekaaaaakkja
aaaaoeiaaeaaaaaeaaaaapiaapaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadma
aaaappiaaaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacabaaapoa
afaaoejappppaaaafdeieefcgmagaaaaeaaaabaajlabaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaa
egiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaadcaaaaalmccabaaa
abaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaaiaaaaaakgiocaaaaaaaaaaa
aiaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaahhcaabaaa
aaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
jgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaa
abaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaa
adaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaihcaabaaaabaaaaaa
egbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaaihcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaaklcaabaaaabaaaaaa
egiicaaaadaaaaaaamaaaaaaagaabaaaabaaaaaaegaibaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaaabaaaaaaegadbaaa
abaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaiadpbbaaaaaibcaabaaa
acaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaabaaaaaabbaaaaaiccaabaaa
acaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaabaaaaaabbaaaaaiecaabaaa
acaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
adaaaaaajgacbaaaabaaaaaaegakbaaaabaaaaaabbaaaaaibcaabaaaaeaaaaaa
egiocaaaacaaaaaabfaaaaaaegaobaaaadaaaaaabbaaaaaiccaabaaaaeaaaaaa
egiocaaaacaaaaaabgaaaaaaegaobaaaadaaaaaabbaaaaaiecaabaaaaeaaaaaa
egiocaaaacaaaaaabhaaaaaaegaobaaaadaaaaaaaaaaaaahhcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaacaaaaaabiaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
eccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadoaaaaabejfdeheo
maaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apapaaaakbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaakjaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapadaaaalaaaaaaaabaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apadaaaaljaaaaaaaaaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafaepfdej
feejepeoaafeebeoehefeofeaaeoepfcenebemaafeeffiedepepfceeaaedepem
epfcaaklepfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
apaaaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapaaaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl
"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 495
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 476
v2f_surf vert_surf( in appdata_full v ) {
    #line 478
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 482
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 486
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 490
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 495
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 495
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 499
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 503
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 507
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 511
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 14 [unity_LightmapST]
Vector 15 [_MainTex_ST]
Vector 16 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 8 ALU
PARAM c[17] = { program.local[0],
		state.matrix.mvp,
		program.local[5..16] };
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[16].xyxy, c[16];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[15], c[15].zwzw;
MAD result.texcoord[1].xy, vertex.texcoord[1], c[14], c[14].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 8 instructions, 0 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"vs_2_0
; 8 ALU
dcl_position0 v0
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov oD0, v5
mad oT0.zw, v4.xyxy, c14.xyxy, c14
mad oT0.xy, v3, c13, c13.zwzw
mad oT1.xy, v4, c12, c12.zwzw
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 160 used size, 14 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerDraw" 336 // 64 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
BindCB "$Globals" 0
BindCB "UnityPerDraw" 1
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 1 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjkdehnaeoponahfpfeloelpeghnmfpoabaaaaaafaadaaaaadaaaaaa
cmaaaaaapeaaaaaaiaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoieaaaaaaaeaaaaaa
aiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaahnaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl
fdeieefcmiabaaaaeaaaabaahcaaaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaaeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagiaaaaacabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaajaaaaaa
kgiocaaaaaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
dcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaaahaaaaaa
ogikcaaaaaaaaaaaahaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 glstate_matrix_mvp;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_Lightmap;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  mediump float trimMask_4;
  highp float bodyOcc_5;
  highp vec3 trimDifTex_6;
  highp vec3 mainTex_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_6 = tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10.x = _AtlasScaleX;
  tmpvar_10.y = _AtlasScaleY;
  highp vec2 tmpvar_11;
  tmpvar_11.x = _AtlasOffsetX;
  tmpvar_11.y = _AtlasOffsetY;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.zw * tmpvar_10) + tmpvar_11);
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_BodyOcclusionTex, tmpvar_12).x;
  bodyOcc_5 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = tmpvar_2.x;
  trimMask_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (mainTex_7 * _Color);
  mainTex_7 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (trimDifTex_6 * _TrimColor);
  trimDifTex_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (mix (tmpvar_15, tmpvar_16, vec3(trimMask_4)) * bodyOcc_5);
  tmpvar_3 = tmpvar_17;
  c_1.xyz = (tmpvar_3 * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 glstate_matrix_mvp;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_Lightmap;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  mediump float trimMask_4;
  highp float bodyOcc_5;
  highp vec3 trimDifTex_6;
  highp vec3 mainTex_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_6 = tmpvar_9;
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  highp vec2 tmpvar_11;
  tmpvar_11.x = _AtlasScaleX;
  tmpvar_11.y = _AtlasScaleY;
  highp vec2 tmpvar_12;
  tmpvar_12.x = _AtlasOffsetX;
  tmpvar_12.y = _AtlasOffsetY;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.zw * tmpvar_11) + tmpvar_12);
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_BodyOcclusionTex, tmpvar_13).x;
  bodyOcc_5 = tmpvar_14;
  lowp vec3 normal_15;
  normal_15.xy = ((texture2D (_BodyBumpTex, tmpvar_13).wy * 2.0) - 1.0);
  normal_15.z = sqrt((1.0 - clamp (dot (normal_15.xy, normal_15.xy), 0.0, 1.0)));
  lowp vec3 normal_16;
  normal_16.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  highp float tmpvar_17;
  tmpvar_17 = tmpvar_2.x;
  trimMask_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (mainTex_7 * _Color);
  mainTex_7 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (trimDifTex_6 * _TrimColor);
  trimDifTex_6 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = (mix (tmpvar_18, tmpvar_19, vec3(trimMask_4)) * bodyOcc_5);
  tmpvar_3 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD1);
  c_1.xyz = (tmpvar_3 * ((8.0 * tmpvar_21.w) * tmpvar_21.xyz));
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"agal_vs
[bc]
aaaaaaaaahaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v7, a2
adaaaaaaaaaaamacaeaaaaeeaaaaaaaaaoaaaaeeabaaaaaa mul r0.zw, a4.xyxy, c14.xyxy
abaaaaaaaaaaamaeaaaaaaopacaaaaaaaoaaaaoeabaaaaaa add v0.zw, r0.wwzw, c14
adaaaaaaaaaaadacadaaaaoeaaaaaaaaanaaaaoeabaaaaaa mul r0.xy, a3, c13
abaaaaaaaaaaadaeaaaaaafeacaaaaaaanaaaaooabaaaaaa add v0.xy, r0.xyyy, c13.zwzw
adaaaaaaaaaaadacaeaaaaoeaaaaaaaaamaaaaoeabaaaaaa mul r0.xy, a4, c12
abaaaaaaabaaadaeaaaaaafeacaaaaaaamaaaaooabaaaaaa add v1.xy, r0.xyyy, c12.zwzw
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaamaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.zw, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 160 used size, 14 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerDraw" 336 // 64 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
BindCB "$Globals" 0
BindCB "UnityPerDraw" 1
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 1 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedjefcibpdjpbhappfkcekloannlnidpleabaaaaaaiiaeaaaaaeaaaaaa
daaaaaaageabaaaadeadaaaapmadaaaaebgpgodjcmabaaaacmabaaaaaaacpopp
omaaaaaaeaaaaaaaacaaceaaaaaadmaaaaaadmaaaaaaceaaabaadmaaaaaaahaa
adaaabaaaaaaaaaaabaaaaaaaeaaaeaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaac
afaaaaiaaaaaapjabpaaaaacafaaadiaadaaapjabpaaaaacafaaaeiaaeaaapja
bpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoejaacaaoekaacaaooka
aeaaaaaeaaaaamoaaeaaeejaadaaeekaadaaoekaaeaaaaaeacaaadoaaeaaoeja
abaaoekaabaaookaafaaaaadaaaaapiaaaaaffjaafaaoekaaeaaaaaeaaaaapia
aeaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaagaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaahaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacabaaapoaafaaoeja
ppppaaaafdeieefcmiabaaaaeaaaabaahcaaaaaafjaaaaaeegiocaaaaaaaaaaa
akaaaaaafjaaaaaeegiocaaaabaaaaaaaeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaa
gfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaa
aiaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
ajaaaaaakgiocaaaaaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaa
ahaaaaaaogikcaaaaaaaaaaaahaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaaaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apadaaaalaaaaaaaabaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeo
ehefeofeaaeoepfcenebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheo
ieaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaahnaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapaaaaaaheaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 472
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 490
uniform sampler2D unity_Lightmap;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 475
v2f_surf vert_surf( in appdata_full v ) {
    #line 477
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 481
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 485
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 472
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 490
uniform sampler2D unity_Lightmap;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 491
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 494
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 498
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 502
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    #line 506
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * lm);
    c.w = o.Alpha;
    #line 510
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Matrix 9 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [unity_LightmapST]
Vector 17 [_MainTex_ST]
Vector 18 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 21 ALU
PARAM c[19] = { { 1 },
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
TEMP R2;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, R0, vertex.attrib[14].w;
MOV R0.xyz, c[13];
MOV R0.w, c[0].x;
DP4 R2.z, R0, c[11];
DP4 R2.x, R0, c[9];
DP4 R2.y, R0, c[10];
MAD R0.xyz, R2, c[15].w, -vertex.position;
DP3 result.texcoord[2].y, R0, R1;
DP3 result.texcoord[2].z, vertex.normal, R0;
DP3 result.texcoord[2].x, R0, vertex.attrib[14];
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[18].xyxy, c[18];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[17], c[17].zwzw;
MAD result.texcoord[1].xy, vertex.texcoord[1], c[16], c[16].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 21 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 8 [_World2Object]
Vector 13 [unity_Scale]
Vector 14 [unity_LightmapST]
Vector 15 [_MainTex_ST]
Vector 16 [_BodyBumpTex_ST]
"vs_2_0
; 22 ALU
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r0.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r0, v1.w
mov r0.xyz, c12
mov r0.w, c17.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
mad r0.xyz, r2, c13.w, -v0
dp3 oT2.y, r0, r1
dp3 oT2.z, v2, r0
dp3 oT2.x, r0, v1
mov oD0, v5
mad oT0.zw, v4.xyxy, c16.xyxy, c16
mad oT0.xy, v3, c15, c15.zwzw
mad oT1.xy, v4, c14, c14.zwzw
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 160 used size, 14 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgibacdkioccbohcblnoekkgimpikodmbabaaaaaabiafaaaaadaaaaaa
cmaaaaaapeaaaaaajiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefchiadaaaa
eaaaabaanoaaaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaa
ogikcaaaaaaaaaaaaiaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaa
agiecaaaaaaaaaaaajaaaaaakgiocaaaaaaaaaaaajaaaaaadgaaaaafpccabaaa
acaaaaaaegbobaaaafaaaaaadcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaa
egiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaa
aaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
jgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaa
abaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaa
baaaaaahcccabaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bccabaaaaeaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaa
aeaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_6 * (((_World2Object * tmpvar_7).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_9 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BodyBumpTex, tmpvar_17).xyz * 2.0) - 1.0);
  bodyBump_7 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_6 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_28;
  mediump vec3 viewDir_29;
  viewDir_29 = tmpvar_27;
  highp float nh_30;
  mat3 tmpvar_31;
  tmpvar_31[0].x = 0.816497;
  tmpvar_31[0].y = -0.408248;
  tmpvar_31[0].z = -0.408248;
  tmpvar_31[1].x = 0.0;
  tmpvar_31[1].y = 0.707107;
  tmpvar_31[1].z = -0.707107;
  tmpvar_31[2].x = 0.57735;
  tmpvar_31[2].y = 0.57735;
  tmpvar_31[2].z = 0.57735;
  mediump vec3 normal_32;
  normal_32 = tmpvar_4;
  mediump vec3 scalePerBasisVector_33;
  mediump vec3 lm_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_34 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_33 = tmpvar_36;
  lm_34 = (lm_34 * dot (clamp ((tmpvar_31 * normal_32), 0.0, 1.0), scalePerBasisVector_33));
  vec3 v_37;
  v_37.x = tmpvar_31[0].x;
  v_37.y = tmpvar_31[1].x;
  v_37.z = tmpvar_31[2].x;
  vec3 v_38;
  v_38.x = tmpvar_31[0].y;
  v_38.y = tmpvar_31[1].y;
  v_38.z = tmpvar_31[2].y;
  vec3 v_39;
  v_39.x = tmpvar_31[0].z;
  v_39.y = tmpvar_31[1].z;
  v_39.z = tmpvar_31[2].z;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_4, normalize((normalize((((scalePerBasisVector_33.x * v_37) + (scalePerBasisVector_33.y * v_38)) + (scalePerBasisVector_33.z * v_39))) + viewDir_29))));
  nh_30 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = lm_34;
  tmpvar_41.w = pow (nh_30, 0.0);
  tmpvar_28 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_3 * tmpvar_28.xyz);
  c_1.xyz = tmpvar_42;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_6 * (((_World2Object * tmpvar_7).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 normal_14;
  normal_14.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_14.z = sqrt((1.0 - clamp (dot (normal_14.xy, normal_14.xy), 0.0, 1.0)));
  trimBumpTex_9 = normal_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 normal_19;
  normal_19.xy = ((texture2D (_BodyBumpTex, tmpvar_17).wy * 2.0) - 1.0);
  normal_19.z = sqrt((1.0 - clamp (dot (normal_19.xy, normal_19.xy), 0.0, 1.0)));
  bodyBump_7 = normal_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bumpMap_6 = normal_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (unity_Lightmap, xlv_TEXCOORD1);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_LightmapInd, xlv_TEXCOORD1);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_30;
  mediump vec3 viewDir_31;
  viewDir_31 = tmpvar_29;
  highp float nh_32;
  mat3 tmpvar_33;
  tmpvar_33[0].x = 0.816497;
  tmpvar_33[0].y = -0.408248;
  tmpvar_33[0].z = -0.408248;
  tmpvar_33[1].x = 0.0;
  tmpvar_33[1].y = 0.707107;
  tmpvar_33[1].z = -0.707107;
  tmpvar_33[2].x = 0.57735;
  tmpvar_33[2].y = 0.57735;
  tmpvar_33[2].z = 0.57735;
  mediump vec3 normal_34;
  normal_34 = tmpvar_4;
  mediump vec3 scalePerBasisVector_35;
  mediump vec3 lm_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((8.0 * tmpvar_27.w) * tmpvar_27.xyz);
  lm_36 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((8.0 * tmpvar_28.w) * tmpvar_28.xyz);
  scalePerBasisVector_35 = tmpvar_38;
  lm_36 = (lm_36 * dot (clamp ((tmpvar_33 * normal_34), 0.0, 1.0), scalePerBasisVector_35));
  vec3 v_39;
  v_39.x = tmpvar_33[0].x;
  v_39.y = tmpvar_33[1].x;
  v_39.z = tmpvar_33[2].x;
  vec3 v_40;
  v_40.x = tmpvar_33[0].y;
  v_40.y = tmpvar_33[1].y;
  v_40.z = tmpvar_33[2].y;
  vec3 v_41;
  v_41.x = tmpvar_33[0].z;
  v_41.y = tmpvar_33[1].z;
  v_41.z = tmpvar_33[2].z;
  mediump float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_4, normalize((normalize((((scalePerBasisVector_35.x * v_39) + (scalePerBasisVector_35.y * v_40)) + (scalePerBasisVector_35.z * v_41))) + viewDir_31))));
  nh_32 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.xyz = lm_36;
  tmpvar_43.w = pow (nh_32, 0.0);
  tmpvar_30 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_3 * tmpvar_30.xyz);
  c_1.xyz = tmpvar_44;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 8 [_World2Object]
Vector 13 [unity_Scale]
Vector 14 [unity_LightmapST]
Vector 15 [_MainTex_ST]
Vector 16 [_BodyBumpTex_ST]
"agal_vs
c17 1.0 0.0 0.0 0.0
[bc]
aaaaaaaaaaaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, a5
adaaaaaaabaaahacabaaaancaaaaaaaaaaaaaaajacaaaaaa mul r1.xyz, a1.zxyw, r0.yzxx
aaaaaaaaaaaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, a5
adaaaaaaacaaahacabaaaamjaaaaaaaaaaaaaafcacaaaaaa mul r2.xyz, a1.yzxw, r0.zxyy
acaaaaaaaaaaahacacaaaakeacaaaaaaabaaaakeacaaaaaa sub r0.xyz, r2.xyzz, r1.xyzz
adaaaaaaabaaahacaaaaaakeacaaaaaaafaaaappaaaaaaaa mul r1.xyz, r0.xyzz, a5.w
aaaaaaaaaaaaahacamaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, c12
aaaaaaaaaaaaaiacbbaaaaaaabaaaaaaaaaaaaaaaaaaaaaa mov r0.w, c17.x
bdaaaaaaacaaaeacaaaaaaoeacaaaaaaakaaaaoeabaaaaaa dp4 r2.z, r0, c10
bdaaaaaaacaaabacaaaaaaoeacaaaaaaaiaaaaoeabaaaaaa dp4 r2.x, r0, c8
bdaaaaaaacaaacacaaaaaaoeacaaaaaaajaaaaoeabaaaaaa dp4 r2.y, r0, c9
adaaaaaaacaaahacacaaaakeacaaaaaaanaaaappabaaaaaa mul r2.xyz, r2.xyzz, c13.w
acaaaaaaaaaaahacacaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub r0.xyz, r2.xyzz, a0
bcaaaaaaacaaacaeaaaaaakeacaaaaaaabaaaakeacaaaaaa dp3 v2.y, r0.xyzz, r1.xyzz
bcaaaaaaacaaaeaeabaaaaoeaaaaaaaaaaaaaakeacaaaaaa dp3 v2.z, a1, r0.xyzz
bcaaaaaaacaaabaeaaaaaakeacaaaaaaafaaaaoeaaaaaaaa dp3 v2.x, r0.xyzz, a5
aaaaaaaaahaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v7, a2
adaaaaaaaaaaamacaeaaaaeeaaaaaaaabaaaaaeeabaaaaaa mul r0.zw, a4.xyxy, c16.xyxy
abaaaaaaaaaaamaeaaaaaaopacaaaaaabaaaaaoeabaaaaaa add v0.zw, r0.wwzw, c16
adaaaaaaaaaaadacadaaaaoeaaaaaaaaapaaaaoeabaaaaaa mul r0.xy, a3, c15
abaaaaaaaaaaadaeaaaaaafeacaaaaaaapaaaaooabaaaaaa add v0.xy, r0.xyyy, c15.zwzw
adaaaaaaaaaaadacaeaaaaoeaaaaaaaaaoaaaaoeabaaaaaa mul r0.xy, a4, c14
abaaaaaaabaaadaeaaaaaafeacaaaaaaaoaaaaooabaaaaaa add v1.xy, r0.xyyy, c14.zwzw
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaamaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.zw, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 160 used size, 14 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedhemoaijpaagogbokgmkgeaciibjfgbjeabaaaaaafiahaaaaaeaaaaaa
daaaaaaagmacaaaaomafaaaaleagaaaaebgpgodjdeacaaaadeacaaaaaaacpopp
nmabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaahaa
adaaabaaaaaaaaaaabaaaeaaabaaaeaaaaaaaaaaacaaaaaaaeaaafaaaaaaaaaa
acaabaaaafaaajaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadia
adaaapjabpaaaaacafaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaae
aaaaadoaadaaoejaacaaoekaacaaookaaeaaaaaeaaaaamoaaeaaeejaadaaeeka
adaaoekaaeaaaaaeacaaadoaaeaaoejaabaaoekaabaaookaabaaaaacaaaaahia
aeaaoekaafaaaaadabaaahiaaaaaffiaakaaoekaaeaaaaaeaaaaaliaajaakeka
aaaaaaiaabaakeiaaeaaaaaeaaaaahiaalaaoekaaaaakkiaaaaapeiaacaaaaad
aaaaahiaaaaaoeiaamaaoekaaeaaaaaeaaaaahiaaaaaoeiaanaappkaaaaaoejb
aiaaaaadadaaaboaabaaoejaaaaaoeiaabaaaaacabaaahiaabaaoejaafaaaaad
acaaahiaabaamjiaacaancjaaeaaaaaeabaaahiaacaamjjaabaanciaacaaoeib
afaaaaadabaaahiaabaaoeiaabaappjaaiaaaaadadaaacoaabaaoeiaaaaaoeia
aiaaaaadadaaaeoaacaaoejaaaaaoeiaafaaaaadaaaaapiaaaaaffjaagaaoeka
aeaaaaaeaaaaapiaafaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaahaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiaaiaaoekaaaaappjaaaaaoeiaaeaaaaae
aaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaac
abaaapoaafaaoejappppaaaafdeieefchiadaaaaeaaaabaanoaaaaaafjaaaaae
egiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
dcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaad
dccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaajaaaaaa
kgiocaaaaaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
dcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaaahaaaaaa
ogikcaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaa
cgbjbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaa
aeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
acaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
acaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaa
acaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaaeaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 473
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 495
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 476
v2f_surf vert_surf( in appdata_full v ) {
    #line 478
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 482
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 486
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 491
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 473
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 495
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * _SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 495
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 499
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 503
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 507
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    #line 511
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    #line 515
    c.xyz += (o.Albedo * lm);
    c.w = o.Alpha;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_SHAr]
Vector 17 [unity_SHAg]
Vector 18 [unity_SHAb]
Vector 19 [unity_SHBr]
Vector 20 [unity_SHBg]
Vector 21 [unity_SHBb]
Vector 22 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 23 [unity_Scale]
Vector 24 [_MainTex_ST]
Vector 25 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 50 ALU
PARAM c[26] = { { 1, 0.5 },
		state.matrix.mvp,
		program.local[5..25] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R1.xyz, vertex.normal, c[23].w;
DP3 R2.w, R1, c[6];
DP3 R0.x, R1, c[5];
DP3 R0.z, R1, c[7];
MOV R0.y, R2.w;
MOV R0.w, c[0].x;
MUL R1, R0.xyzz, R0.yzzx;
DP4 R2.z, R0, c[18];
DP4 R2.y, R0, c[17];
DP4 R2.x, R0, c[16];
MUL R0.w, R2, R2;
MAD R0.w, R0.x, R0.x, -R0;
DP4 R0.z, R1, c[21];
DP4 R0.y, R1, c[20];
DP4 R0.x, R1, c[19];
ADD R0.xyz, R2, R0;
MUL R1.xyz, R0.w, c[22];
ADD result.texcoord[2].xyz, R0, R1;
MOV R1.xyz, c[13];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[23].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[15];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R0.w, vertex.position, c[4];
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
DP3 result.texcoord[1].y, R3, R1;
DP3 result.texcoord[3].y, R1, R2;
MUL R1.xyz, R0.xyww, c[0].y;
MUL R1.y, R1, c[14].x;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[3].z, vertex.normal, R2;
DP3 result.texcoord[3].x, vertex.attrib[14], R2;
ADD result.texcoord[4].xy, R1, R1.z;
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[4].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[25].xyxy, c[25];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[24], c[24].zwzw;
END
# 50 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_SHAr]
Vector 17 [unity_SHAg]
Vector 18 [unity_SHAb]
Vector 19 [unity_SHBr]
Vector 20 [unity_SHBg]
Vector 21 [unity_SHBb]
Vector 22 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 23 [unity_Scale]
Vector 24 [_MainTex_ST]
Vector 25 [_BodyBumpTex_ST]
"vs_2_0
; 53 ALU
def c26, 1.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r1.xyz, v2, c23.w
dp3 r2.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r2.w
mov r0.w, c26.x
mul r1, r0.xyzz, r0.yzzx
dp4 r2.z, r0, c18
dp4 r2.y, r0, c17
dp4 r2.x, r0, c16
mul r0.w, r2, r2
mad r0.w, r0.x, r0.x, -r0
dp4 r0.z, r1, c21
dp4 r0.y, r1, c20
dp4 r0.x, r1, c19
mul r1.xyz, r0.w, c22
add r0.xyz, r2, r0
add oT2.xyz, r0, r1
mov r0.w, c26.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c23.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c15, r0
mov r0, c9
dp4 r4.y, c15, r0
mov r1, c8
dp4 r4.x, c15, r1
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c26.y
mul r1.y, r1, c13.x
dp3 oT1.y, r4, r2
dp3 oT3.y, r2, r3
dp3 oT1.z, v2, r4
dp3 oT1.x, r4, v1
dp3 oT3.z, v2, r3
dp3 oT3.x, v1, r3
mad oT4.xy, r1.z, c14.zwzw, r1
mov oPos, r0
mov oD0, v5
mov oT4.zw, r0
mad oT0.zw, v4.xyxy, c25.xyxy, c25
mad oT0.xy, v3, c24, c24.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 6 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedijkllncekbobepmhkkmgdeehfgnoabepabaaaaaaneaiaaaaadaaaaaa
cmaaaaaapeaaaaaamiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheommaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaamfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklfdeieefcaeahaaaaeaaaabaambabaaaafjaaaaaeegiocaaa
aaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagiaaaaacagaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaa
egiacaaaaaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaadcaaaaalmccabaaa
abaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaakgiocaaaaaaaaaaa
amaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaahhcaabaaa
abaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
jgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaa
acaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaacaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahcccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaah
bccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaaheccabaaa
adaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
egbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaaihcaabaaaadaaaaaa
fgafbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaaklcaabaaaacaaaaaa
egiicaaaadaaaaaaamaaaaaaagaabaaaacaaaaaaegaibaaaadaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaaacaaaaaaegadbaaa
acaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaiadpbbaaaaaibcaabaaa
adaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaacaaaaaabbaaaaaiccaabaaa
adaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaacaaaaaabbaaaaaiecaabaaa
adaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaacaaaaaadiaaaaahpcaabaaa
aeaaaaaajgacbaaaacaaaaaaegakbaaaacaaaaaabbaaaaaibcaabaaaafaaaaaa
egiocaaaacaaaaaabfaaaaaaegaobaaaaeaaaaaabbaaaaaiccaabaaaafaaaaaa
egiocaaaacaaaaaabgaaaaaaegaobaaaaeaaaaaabbaaaaaiecaabaaaafaaaaaa
egiocaaaacaaaaaabhaaaaaaegaobaaaaeaaaaaaaaaaaaahhcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaafaaaaaadiaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaacaaaaaabiaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaj
hcaabaaaacaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
acaaaaaaegacbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
baaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaah
eccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaagaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaagaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_12).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_9 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BodyBumpTex, tmpvar_17).xyz * 2.0) - 1.0);
  bodyBump_7 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_6 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp float tmpvar_27;
  mediump float lightShadowDataX_28;
  highp float dist_29;
  lowp float tmpvar_30;
  tmpvar_30 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = max (float((dist_29 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_28);
  tmpvar_27 = tmpvar_32;
  lowp vec4 c_33;
  lowp float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD1));
  highp vec3 tmpvar_35;
  tmpvar_35 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_34) * (tmpvar_27 * 2.0));
  c_33.xyz = tmpvar_35;
  c_33.w = 0.0;
  c_1.w = c_33.w;
  c_1.xyz = (c_33.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_8;
  tmpvar_8[0] = _Object2World[0].xyz;
  tmpvar_8[1] = _Object2World[1].xyz;
  tmpvar_8[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (tmpvar_8 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  highp float vC_17;
  mediump vec3 x3_18;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAr, normal_16);
  x1_20.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAg, normal_16);
  x1_20.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAb, normal_16);
  x1_20.z = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_16.xyzz * normal_16.yzzx);
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBr, tmpvar_24);
  x2_19.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBg, tmpvar_24);
  x2_19.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBb, tmpvar_24);
  x2_19.z = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y));
  vC_17 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = (unity_SHC.xyz * vC_17);
  x3_18 = tmpvar_29;
  tmpvar_15 = ((x1_20 + x2_19) + x3_18);
  shlight_3 = tmpvar_15;
  tmpvar_6 = shlight_3;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_7.zw;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_11 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = o_30;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 normal_14;
  normal_14.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_14.z = sqrt((1.0 - clamp (dot (normal_14.xy, normal_14.xy), 0.0, 1.0)));
  trimBumpTex_9 = normal_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 normal_19;
  normal_19.xy = ((texture2D (_BodyBumpTex, tmpvar_17).wy * 2.0) - 1.0);
  normal_19.z = sqrt((1.0 - clamp (dot (normal_19.xy, normal_19.xy), 0.0, 1.0)));
  bodyBump_7 = normal_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bumpMap_6 = normal_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  lowp vec4 c_28;
  lowp float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD1));
  highp vec3 tmpvar_30;
  tmpvar_30 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_29) * (tmpvar_27.x * 2.0));
  c_28.xyz = tmpvar_30;
  c_28.w = 0.0;
  c_1.w = c_28.w;
  c_1.xyz = (c_28.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_WorldSpaceLightPos0]
Vector 15 [unity_SHAr]
Vector 16 [unity_SHAg]
Vector 17 [unity_SHAb]
Vector 18 [unity_SHBr]
Vector 19 [unity_SHBg]
Vector 20 [unity_SHBb]
Vector 21 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 22 [unity_Scale]
Vector 23 [unity_NPOTScale]
Vector 24 [_MainTex_ST]
Vector 25 [_BodyBumpTex_ST]
"agal_vs
c26 1.0 0.5 0.0 0.0
[bc]
adaaaaaaabaaahacabaaaaoeaaaaaaaabgaaaappabaaaaaa mul r1.xyz, a1, c22.w
bcaaaaaaacaaaiacabaaaakeacaaaaaaafaaaaoeabaaaaaa dp3 r2.w, r1.xyzz, c5
bcaaaaaaaaaaabacabaaaakeacaaaaaaaeaaaaoeabaaaaaa dp3 r0.x, r1.xyzz, c4
bcaaaaaaaaaaaeacabaaaakeacaaaaaaagaaaaoeabaaaaaa dp3 r0.z, r1.xyzz, c6
aaaaaaaaaaaaacacacaaaappacaaaaaaaaaaaaaaaaaaaaaa mov r0.y, r2.w
aaaaaaaaaaaaaiacbkaaaaaaabaaaaaaaaaaaaaaaaaaaaaa mov r0.w, c26.x
adaaaaaaabaaapacaaaaaakeacaaaaaaaaaaaacjacaaaaaa mul r1, r0.xyzz, r0.yzzx
bdaaaaaaacaaaeacaaaaaaoeacaaaaaabbaaaaoeabaaaaaa dp4 r2.z, r0, c17
bdaaaaaaacaaacacaaaaaaoeacaaaaaabaaaaaoeabaaaaaa dp4 r2.y, r0, c16
bdaaaaaaacaaabacaaaaaaoeacaaaaaaapaaaaoeabaaaaaa dp4 r2.x, r0, c15
adaaaaaaaaaaaiacacaaaappacaaaaaaacaaaappacaaaaaa mul r0.w, r2.w, r2.w
adaaaaaaadaaaiacaaaaaaaaacaaaaaaaaaaaaaaacaaaaaa mul r3.w, r0.x, r0.x
acaaaaaaaaaaaiacadaaaappacaaaaaaaaaaaappacaaaaaa sub r0.w, r3.w, r0.w
bdaaaaaaaaaaaeacabaaaaoeacaaaaaabeaaaaoeabaaaaaa dp4 r0.z, r1, c20
bdaaaaaaaaaaacacabaaaaoeacaaaaaabdaaaaoeabaaaaaa dp4 r0.y, r1, c19
bdaaaaaaaaaaabacabaaaaoeacaaaaaabcaaaaoeabaaaaaa dp4 r0.x, r1, c18
adaaaaaaabaaahacaaaaaappacaaaaaabfaaaaoeabaaaaaa mul r1.xyz, r0.w, c21
abaaaaaaaaaaahacacaaaakeacaaaaaaaaaaaakeacaaaaaa add r0.xyz, r2.xyzz, r0.xyzz
abaaaaaaacaaahaeaaaaaakeacaaaaaaabaaaakeacaaaaaa add v2.xyz, r0.xyzz, r1.xyzz
aaaaaaaaaaaaaiacbkaaaaaaabaaaaaaaaaaaaaaaaaaaaaa mov r0.w, c26.x
aaaaaaaaaaaaahacamaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, c12
bdaaaaaaabaaaeacaaaaaaoeacaaaaaaakaaaaoeabaaaaaa dp4 r1.z, r0, c10
bdaaaaaaabaaacacaaaaaaoeacaaaaaaajaaaaoeabaaaaaa dp4 r1.y, r0, c9
bdaaaaaaabaaabacaaaaaaoeacaaaaaaaiaaaaoeabaaaaaa dp4 r1.x, r0, c8
adaaaaaaaeaaahacabaaaakeacaaaaaabgaaaappabaaaaaa mul r4.xyz, r1.xyzz, c22.w
acaaaaaaadaaahacaeaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub r3.xyz, r4.xyzz, a0
aaaaaaaaaaaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, a5
adaaaaaaabaaahacabaaaancaaaaaaaaaaaaaaajacaaaaaa mul r1.xyz, a1.zxyw, r0.yzxx
aaaaaaaaaaaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, a5
adaaaaaaafaaahacabaaaamjaaaaaaaaaaaaaafcacaaaaaa mul r5.xyz, a1.yzxw, r0.zxyy
acaaaaaaabaaahacafaaaakeacaaaaaaabaaaakeacaaaaaa sub r1.xyz, r5.xyzz, r1.xyzz
adaaaaaaacaaahacabaaaakeacaaaaaaafaaaappaaaaaaaa mul r2.xyz, r1.xyzz, a5.w
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaaeaaaeacaoaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r4.z, c14, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaaeaaacacaoaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r4.y, c14, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaaeaaabacaoaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r4.x, c14, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 r0.w, a0, c3
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 r0.z, a0, c2
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 r0.x, a0, c0
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 r0.y, a0, c1
adaaaaaaabaaahacaaaaaapeacaaaaaabkaaaaffabaaaaaa mul r1.xyz, r0.xyww, c26.y
adaaaaaaabaaacacabaaaaffacaaaaaaanaaaaaaabaaaaaa mul r1.y, r1.y, c13.x
abaaaaaaabaaadacabaaaafeacaaaaaaabaaaakkacaaaaaa add r1.xy, r1.xyyy, r1.z
bcaaaaaaabaaacaeaeaaaakeacaaaaaaacaaaakeacaaaaaa dp3 v1.y, r4.xyzz, r2.xyzz
bcaaaaaaadaaacaeacaaaakeacaaaaaaadaaaakeacaaaaaa dp3 v3.y, r2.xyzz, r3.xyzz
bcaaaaaaabaaaeaeabaaaaoeaaaaaaaaaeaaaakeacaaaaaa dp3 v1.z, a1, r4.xyzz
bcaaaaaaabaaabaeaeaaaakeacaaaaaaafaaaaoeaaaaaaaa dp3 v1.x, r4.xyzz, a5
bcaaaaaaadaaaeaeabaaaaoeaaaaaaaaadaaaakeacaaaaaa dp3 v3.z, a1, r3.xyzz
bcaaaaaaadaaabaeafaaaaoeaaaaaaaaadaaaakeacaaaaaa dp3 v3.x, a5, r3.xyzz
adaaaaaaaeaaadaeabaaaafeacaaaaaabhaaaaoeabaaaaaa mul v4.xy, r1.xyyy, c23
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
aaaaaaaaahaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v7, a2
aaaaaaaaaeaaamaeaaaaaaopacaaaaaaaaaaaaaaaaaaaaaa mov v4.zw, r0.wwzw
adaaaaaaafaaamacaeaaaaeeaaaaaaaabjaaaaeeabaaaaaa mul r5.zw, a4.xyxy, c25.xyxy
abaaaaaaaaaaamaeafaaaaopacaaaaaabjaaaaoeabaaaaaa add v0.zw, r5.wwzw, c25
adaaaaaaafaaadacadaaaaoeaaaaaaaabiaaaaoeabaaaaaa mul r5.xy, a3, c24
abaaaaaaaaaaadaeafaaaafeacaaaaaabiaaaaooabaaaaaa add v0.xy, r5.xyyy, c24.zwzw
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 6 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedkhpakocdklhjahechdfodhogiaebddipabaaaaaabmanaaaaaeaaaaaa
daaaaaaaheaeaaaaiaalaaaaeiamaaaaebgpgodjdmaeaaaadmaeaaaaaaacpopp
maadaaaahmaaaaaaahaaceaaaaaahiaaaaaahiaaaaaaceaaabaahiaaaaaaalaa
acaaabaaaaaaaaaaabaaaeaaacaaadaaaaaaaaaaacaaaaaaabaaafaaaaaaaaaa
acaabcaaahaaagaaaaaaaaaaadaaaaaaaeaaanaaaaaaaaaaadaaamaaadaabbaa
aaaaaaaaadaabaaaafaabeaaaaaaaaaaaaaaaaaaaaacpoppfbaaaaafbjaaapka
aaaaiadpaaaaaadpaaaaaaaaaaaaaaaabpaaaaacafaaaaiaaaaaapjabpaaaaac
afaaabiaabaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapja
bpaaaaacafaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoa
adaaoejaabaaoekaabaaookaaeaaaaaeaaaaamoaaeaaeejaacaaeekaacaaoeka
abaaaaacaaaaapiaafaaoekaafaaaaadabaaahiaaaaaffiabfaaoekaaeaaaaae
abaaahiabeaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiabgaaoekaaaaakkia
abaaoeiaaeaaaaaeaaaaahiabhaaoekaaaaappiaaaaaoeiaaiaaaaadacaaaboa
abaaoejaaaaaoeiaabaaaaacabaaahiaacaaoejaafaaaaadacaaahiaabaancia
abaamjjaaeaaaaaeabaaahiaabaamjiaabaancjaacaaoeibafaaaaadabaaahia
abaaoeiaabaappjaaiaaaaadacaaacoaabaaoeiaaaaaoeiaaiaaaaadacaaaeoa
acaaoejaaaaaoeiaabaaaaacaaaaahiaadaaoekaafaaaaadacaaahiaaaaaffia
bfaaoekaaeaaaaaeaaaaaliabeaakekaaaaaaaiaacaakeiaaeaaaaaeaaaaahia
bgaaoekaaaaakkiaaaaapeiaacaaaaadaaaaahiaaaaaoeiabhaaoekaaeaaaaae
aaaaahiaaaaaoeiabiaappkaaaaaoejbaiaaaaadaeaaaboaabaaoejaaaaaoeia
aiaaaaadaeaaacoaabaaoeiaaaaaoeiaaiaaaaadaeaaaeoaacaaoejaaaaaoeia
afaaaaadaaaaahiaacaaoejabiaappkaafaaaaadabaaahiaaaaaffiabcaaoeka
aeaaaaaeaaaaaliabbaakekaaaaaaaiaabaakeiaaeaaaaaeaaaaahiabdaaoeka
aaaakkiaaaaapeiaabaaaaacaaaaaiiabjaaaakaajaaaaadabaaabiaagaaoeka
aaaaoeiaajaaaaadabaaaciaahaaoekaaaaaoeiaajaaaaadabaaaeiaaiaaoeka
aaaaoeiaafaaaaadacaaapiaaaaacjiaaaaakeiaajaaaaadadaaabiaajaaoeka
acaaoeiaajaaaaadadaaaciaakaaoekaacaaoeiaajaaaaadadaaaeiaalaaoeka
acaaoeiaacaaaaadabaaahiaabaaoeiaadaaoeiaafaaaaadaaaaaciaaaaaffia
aaaaffiaaeaaaaaeaaaaabiaaaaaaaiaaaaaaaiaaaaaffibaeaaaaaeadaaahoa
amaaoekaaaaaaaiaabaaoeiaafaaaaadaaaaapiaaaaaffjaaoaaoekaaeaaaaae
aaaaapiaanaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaapaaoekaaaaakkja
aaaaoeiaaeaaaaaeaaaaapiabaaaoekaaaaappjaaaaaoeiaafaaaaadabaaabia
aaaaffiaaeaaaakaafaaaaadabaaaiiaabaaaaiabjaaffkaafaaaaadabaaafia
aaaapeiabjaaffkaacaaaaadafaaadoaabaakkiaabaaomiaaeaaaaaeaaaaadma
aaaappiaaaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacafaaamoa
aaaaoeiaabaaaaacabaaapoaafaaoejappppaaaafdeieefcaeahaaaaeaaaabaa
mbabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
pccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadpccabaaa
agaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaalaaaaaaogikcaaaaaaaaaaa
alaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
amaaaaaakgiocaaaaaaaaaaaamaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaahhcaabaaaabaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaa
abaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaaegbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaa
diaaaaaihcaabaaaadaaaaaafgafbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaaklcaabaaaacaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaacaaaaaa
egaibaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaacaaaaaaegadbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaa
aaaaiadpbbaaaaaibcaabaaaadaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaa
acaaaaaabbaaaaaiccaabaaaadaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaa
acaaaaaabbaaaaaiecaabaaaadaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaa
acaaaaaadiaaaaahpcaabaaaaeaaaaaajgacbaaaacaaaaaaegakbaaaacaaaaaa
bbaaaaaibcaabaaaafaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaaeaaaaaa
bbaaaaaiccaabaaaafaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaaeaaaaaa
bbaaaaaiecaabaaaafaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaaeaaaaaa
aaaaaaahhcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaadiaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaa
abaaaaaaakaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaa
dcaaaaakhccabaaaaeaaaaaaegiccaaaacaaaaaabiaaaaaapgapbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaapgipcaaaadaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaa
egacbaaaacaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaa
acaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaagaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaagaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab
ejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaa
kjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaaabaaaaaaaaaaaaaaadaaaaaa
aeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaa
faepfdejfeejepeoaafeebeoehefeofeaaeoepfcenebemaafeeffiedepepfcee
aaedepemepfcaaklepfdeheommaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaapaaaaaamfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapaaaaaa
lmaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaalmaaaaaaacaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaa
afaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaa
fdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 483
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 485
v2f_surf vert_surf( in appdata_full v ) {
    #line 487
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 491
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 495
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 499
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 503
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 483
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 458
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 462
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 466
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 470
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 505
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 507
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 511
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 515
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 519
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_ProjectionParams]
Vector 15 [unity_LightmapST]
Vector 16 [_MainTex_ST]
Vector 17 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 13 ALU
PARAM c[18] = { { 0.5 },
		state.matrix.mvp,
		program.local[5..17] };
TEMP R0;
TEMP R1;
DP4 R0.w, vertex.position, c[4];
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R1.xyz, R0.xyww, c[0].x;
MUL R1.y, R1, c[13].x;
ADD result.texcoord[2].xy, R1, R1.z;
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[2].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[17].xyxy, c[17];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[16], c[16].zwzw;
MAD result.texcoord[1].xy, vertex.texcoord[1], c[15], c[15].zwzw;
END
# 13 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_ProjectionParams]
Vector 13 [_ScreenParams]
Vector 14 [unity_LightmapST]
Vector 15 [_MainTex_ST]
Vector 16 [_BodyBumpTex_ST]
"vs_2_0
; 13 ALU
def c17, 0.50000000, 0, 0, 0
dcl_position0 v0
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c17.x
mul r1.y, r1, c12.x
mad oT2.xy, r1.z, c13.zwzw, r1
mov oPos, r0
mov oD0, v5
mov oT2.zw, r0
mad oT0.zw, v4.xyxy, c16.xyxy, c16
mad oT0.xy, v3, c15, c15.zwzw
mad oT1.xy, v4, c14, c14.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 224 used size, 15 vars
Vector 176 [unity_LightmapST] 4
Vector 192 [_MainTex_ST] 4
Vector 208 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 64 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 14 instructions, 2 temp regs, 0 temp arrays:
// ALU 4 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcpnllnblhfdeheafnfgdhgdkjjenbjgnabaaaaaabaaeaaaaadaaaaaa
cmaaaaaapeaaaaaajiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefchaacaaaa
eaaaabaajmaaaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaaeaaaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaal
dccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaa
aaaaaaaaamaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaa
aaaaaaaaanaaaaaakgiocaaaaaaaaaaaanaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaafaaaaaadcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaaegiacaaa
aaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
mccabaaaaeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_Lightmap;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  mediump float trimMask_4;
  highp float bodyOcc_5;
  highp vec3 trimDifTex_6;
  highp vec3 mainTex_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_6 = tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10.x = _AtlasScaleX;
  tmpvar_10.y = _AtlasScaleY;
  highp vec2 tmpvar_11;
  tmpvar_11.x = _AtlasOffsetX;
  tmpvar_11.y = _AtlasOffsetY;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.zw * tmpvar_10) + tmpvar_11);
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_BodyOcclusionTex, tmpvar_12).x;
  bodyOcc_5 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = tmpvar_2.x;
  trimMask_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (mainTex_7 * _Color);
  mainTex_7 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (trimDifTex_6 * _TrimColor);
  trimDifTex_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (mix (tmpvar_15, tmpvar_16, vec3(trimMask_4)) * bodyOcc_5);
  tmpvar_3 = tmpvar_17;
  lowp float tmpvar_18;
  mediump float lightShadowDataX_19;
  highp float dist_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((dist_20 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_19);
  tmpvar_18 = tmpvar_23;
  c_1.xyz = (tmpvar_3 * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_18 * 2.0))));
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = o_3;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_Lightmap;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  mediump float trimMask_4;
  highp float bodyOcc_5;
  highp vec3 trimDifTex_6;
  highp vec3 mainTex_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_6 = tmpvar_9;
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  highp vec2 tmpvar_11;
  tmpvar_11.x = _AtlasScaleX;
  tmpvar_11.y = _AtlasScaleY;
  highp vec2 tmpvar_12;
  tmpvar_12.x = _AtlasOffsetX;
  tmpvar_12.y = _AtlasOffsetY;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.zw * tmpvar_11) + tmpvar_12);
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_BodyOcclusionTex, tmpvar_13).x;
  bodyOcc_5 = tmpvar_14;
  lowp vec3 normal_15;
  normal_15.xy = ((texture2D (_BodyBumpTex, tmpvar_13).wy * 2.0) - 1.0);
  normal_15.z = sqrt((1.0 - clamp (dot (normal_15.xy, normal_15.xy), 0.0, 1.0)));
  lowp vec3 normal_16;
  normal_16.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  highp float tmpvar_17;
  tmpvar_17 = tmpvar_2.x;
  trimMask_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (mainTex_7 * _Color);
  mainTex_7 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (trimDifTex_6 * _TrimColor);
  trimDifTex_6 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = (mix (tmpvar_18, tmpvar_19, vec3(trimMask_4)) * bodyOcc_5);
  tmpvar_3 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD1);
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((8.0 * tmpvar_22.w) * tmpvar_22.xyz);
  c_1.xyz = (tmpvar_3 * max (min (tmpvar_23, ((tmpvar_21.x * 2.0) * tmpvar_22.xyz)), (tmpvar_23 * tmpvar_21.x)));
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_ProjectionParams]
Vector 13 [unity_NPOTScale]
Vector 14 [unity_LightmapST]
Vector 15 [_MainTex_ST]
Vector 16 [_BodyBumpTex_ST]
"agal_vs
c17 0.5 0.0 0.0 0.0
[bc]
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 r0.w, a0, c3
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 r0.z, a0, c2
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 r0.x, a0, c0
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 r0.y, a0, c1
adaaaaaaabaaahacaaaaaapeacaaaaaabbaaaaaaabaaaaaa mul r1.xyz, r0.xyww, c17.x
adaaaaaaabaaacacabaaaaffacaaaaaaamaaaaaaabaaaaaa mul r1.y, r1.y, c12.x
abaaaaaaabaaadacabaaaafeacaaaaaaabaaaakkacaaaaaa add r1.xy, r1.xyyy, r1.z
adaaaaaaacaaadaeabaaaafeacaaaaaaanaaaaoeabaaaaaa mul v2.xy, r1.xyyy, c13
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
aaaaaaaaahaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v7, a2
aaaaaaaaacaaamaeaaaaaaopacaaaaaaaaaaaaaaaaaaaaaa mov v2.zw, r0.wwzw
adaaaaaaaaaaamacaeaaaaeeaaaaaaaabaaaaaeeabaaaaaa mul r0.zw, a4.xyxy, c16.xyxy
abaaaaaaaaaaamaeaaaaaaopacaaaaaabaaaaaoeabaaaaaa add v0.zw, r0.wwzw, c16
adaaaaaaaaaaadacadaaaaoeaaaaaaaaapaaaaoeabaaaaaa mul r0.xy, a3, c15
abaaaaaaaaaaadaeaaaaaafeacaaaaaaapaaaaooabaaaaaa add v0.xy, r0.xyyy, c15.zwzw
adaaaaaaaaaaadacaeaaaaoeaaaaaaaaaoaaaaoeabaaaaaa mul r0.xy, a4, c14
abaaaaaaabaaadaeaaaaaafeacaaaaaaaoaaaaooabaaaaaa add v1.xy, r0.xyyy, c14.zwzw
aaaaaaaaabaaamaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.zw, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 224 used size, 15 vars
Vector 176 [unity_LightmapST] 4
Vector 192 [_MainTex_ST] 4
Vector 208 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 64 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 14 instructions, 2 temp regs, 0 temp arrays:
// ALU 4 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedghbjakpjlnbffopinclimcjgdpdednfaabaaaaaaliafaaaaaeaaaaaa
daaaaaaaneabaaaaemaeaaaabeafaaaaebgpgodjjmabaaaajmabaaaaaaacpopp
faabaaaaemaaaaaaadaaceaaaaaaeiaaaaaaeiaaaaaaceaaabaaeiaaaaaaalaa
adaaabaaaaaaaaaaabaaafaaabaaaeaaaaaaaaaaacaaaaaaaeaaafaaaaaaaaaa
aaaaaaaaaaacpoppfbaaaaafajaaapkaaaaaaadpaaaaaaaaaaaaaaaaaaaaaaaa
bpaaaaacafaaaaiaaaaaapjabpaaaaacafaaadiaadaaapjabpaaaaacafaaaeia
aeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoejaacaaoeka
acaaookaaeaaaaaeaaaaamoaaeaaeejaadaaeekaadaaoekaaeaaaaaeacaaadoa
aeaaoejaabaaoekaabaaookaafaaaaadaaaaapiaaaaaffjaagaaoekaaeaaaaae
aaaaapiaafaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaahaaoekaaaaakkja
aaaaoeiaaeaaaaaeaaaaapiaaiaaoekaaaaappjaaaaaoeiaafaaaaadabaaabia
aaaaffiaaeaaaakaafaaaaadabaaaiiaabaaaaiaajaaaakaafaaaaadabaaafia
aaaapeiaajaaaakaacaaaaadadaaadoaabaakkiaabaaomiaaeaaaaaeaaaaadma
aaaappiaaaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacadaaamoa
aaaaoeiaabaaaaacabaaapoaafaaoejappppaaaafdeieefchaacaaaaeaaaabaa
jmaaaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaaeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaa
gfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadpccabaaa
aeaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaa
amaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
anaaaaaakgiocaaaaaaaaaaaanaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaa
alaaaaaaogikcaaaaaaaaaaaalaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaa
aeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 481
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 484
v2f_surf vert_surf( in appdata_full v ) {
    #line 486
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 490
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 494
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 498
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 481
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 458
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 462
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 466
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 470
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 501
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 503
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 507
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 511
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 515
    lowp vec4 c = vec4( 0.0);
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    #line 519
    c.w = o.Alpha;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Matrix 9 [_World2Object]
Vector 16 [unity_Scale]
Vector 17 [unity_LightmapST]
Vector 18 [_MainTex_ST]
Vector 19 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 26 ALU
PARAM c[20] = { { 1, 0.5 },
		state.matrix.mvp,
		program.local[5..19] };
TEMP R0;
TEMP R1;
TEMP R2;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R0.xyz, R0, vertex.attrib[14].w;
MOV R1.xyz, c[13];
MOV R1.w, c[0].x;
DP4 R0.w, vertex.position, c[4];
DP4 R2.z, R1, c[11];
DP4 R2.x, R1, c[9];
DP4 R2.y, R1, c[10];
MAD R2.xyz, R2, c[16].w, -vertex.position;
DP3 result.texcoord[2].y, R2, R0;
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R1.xyz, R0.xyww, c[0].y;
MUL R1.y, R1, c[14].x;
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, R2, vertex.attrib[14];
ADD result.texcoord[3].xy, R1, R1.z;
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[3].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[19].xyxy, c[19];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[18], c[18].zwzw;
MAD result.texcoord[1].xy, vertex.texcoord[1], c[17], c[17].zwzw;
END
# 26 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 8 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [unity_LightmapST]
Vector 17 [_MainTex_ST]
Vector 18 [_BodyBumpTex_ST]
"vs_2_0
; 27 ALU
def c19, 1.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r0.xyz, v2.yzxw, r0.zxyw, -r1
mul r0.xyz, r0, v1.w
mov r1.xyz, c12
mov r1.w, c19.x
dp4 r0.w, v0, c3
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mad r2.xyz, r2, c15.w, -v0
dp3 oT2.y, r2, r0
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c19.y
mul r1.y, r1, c13.x
dp3 oT2.z, v2, r2
dp3 oT2.x, r2, v1
mad oT3.xy, r1.z, c14.zwzw, r1
mov oPos, r0
mov oD0, v5
mov oT3.zw, r0
mad oT0.zw, v4.xyxy, c18.xyxy, c18
mad oT0.xy, v3, c17, c17.zwzw
mad oT1.xy, v4, c16, c16.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 224 used size, 15 vars
Vector 176 [unity_LightmapST] 4
Vector 192 [_MainTex_ST] 4
Vector 208 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 25 instructions, 3 temp regs, 0 temp arrays:
// ALU 11 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedabejnkpkbedfmfmhnohfpiedkjgajgbjabaaaaaamiafaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcbaaeaaaaeaaaabaaaeabaaaa
fjaaaaaeegiocaaaaaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaaddccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaa
afaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaa
amaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
anaaaaaakgiocaaaaaaaaaaaanaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaa
alaaaaaaogikcaaaaaaaaaaaalaaaaaadiaaaaahhcaabaaaabaaaaaajgbebaaa
abaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaajgbebaaaacaaaaaa
cgbjbaaaabaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaa
abaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaacaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaa
aeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaacaaaaaabdaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaa
pgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaa
aeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbccabaaaaeaaaaaa
egbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaa
acaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaa
akiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaafaaaaaa
kgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaakgakbaaaabaaaaaamgaabaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_6 * (((_World2Object * tmpvar_7).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_9 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BodyBumpTex, tmpvar_17).xyz * 2.0) - 1.0);
  bodyBump_7 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_6 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp float tmpvar_27;
  mediump float lightShadowDataX_28;
  highp float dist_29;
  lowp float tmpvar_30;
  tmpvar_30 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = max (float((dist_29 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_28);
  tmpvar_27 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_34;
  mediump vec3 viewDir_35;
  viewDir_35 = tmpvar_33;
  highp float nh_36;
  mat3 tmpvar_37;
  tmpvar_37[0].x = 0.816497;
  tmpvar_37[0].y = -0.408248;
  tmpvar_37[0].z = -0.408248;
  tmpvar_37[1].x = 0.0;
  tmpvar_37[1].y = 0.707107;
  tmpvar_37[1].z = -0.707107;
  tmpvar_37[2].x = 0.57735;
  tmpvar_37[2].y = 0.57735;
  tmpvar_37[2].z = 0.57735;
  mediump vec3 normal_38;
  normal_38 = tmpvar_4;
  mediump vec3 scalePerBasisVector_39;
  mediump vec3 lm_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_40 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_39 = tmpvar_42;
  lm_40 = (lm_40 * dot (clamp ((tmpvar_37 * normal_38), 0.0, 1.0), scalePerBasisVector_39));
  vec3 v_43;
  v_43.x = tmpvar_37[0].x;
  v_43.y = tmpvar_37[1].x;
  v_43.z = tmpvar_37[2].x;
  vec3 v_44;
  v_44.x = tmpvar_37[0].y;
  v_44.y = tmpvar_37[1].y;
  v_44.z = tmpvar_37[2].y;
  vec3 v_45;
  v_45.x = tmpvar_37[0].z;
  v_45.y = tmpvar_37[1].z;
  v_45.z = tmpvar_37[2].z;
  mediump float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_4, normalize((normalize((((scalePerBasisVector_39.x * v_43) + (scalePerBasisVector_39.y * v_44)) + (scalePerBasisVector_39.z * v_45))) + viewDir_35))));
  nh_36 = tmpvar_46;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = lm_40;
  tmpvar_47.w = pow (nh_36, 0.0);
  tmpvar_34 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = vec3((tmpvar_27 * 2.0));
  mediump vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_3 * min (tmpvar_34.xyz, tmpvar_48));
  c_1.xyz = tmpvar_49;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _WorldSpaceCameraPos;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_4.zw;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_7 * (((_World2Object * tmpvar_8).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD3 = o_9;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 normal_14;
  normal_14.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_14.z = sqrt((1.0 - clamp (dot (normal_14.xy, normal_14.xy), 0.0, 1.0)));
  trimBumpTex_9 = normal_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 normal_19;
  normal_19.xy = ((texture2D (_BodyBumpTex, tmpvar_17).wy * 2.0) - 1.0);
  normal_19.z = sqrt((1.0 - clamp (dot (normal_19.xy, normal_19.xy), 0.0, 1.0)));
  bodyBump_7 = normal_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bumpMap_6 = normal_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD1);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_LightmapInd, xlv_TEXCOORD1);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_31;
  mediump vec3 viewDir_32;
  viewDir_32 = tmpvar_30;
  highp float nh_33;
  mat3 tmpvar_34;
  tmpvar_34[0].x = 0.816497;
  tmpvar_34[0].y = -0.408248;
  tmpvar_34[0].z = -0.408248;
  tmpvar_34[1].x = 0.0;
  tmpvar_34[1].y = 0.707107;
  tmpvar_34[1].z = -0.707107;
  tmpvar_34[2].x = 0.57735;
  tmpvar_34[2].y = 0.57735;
  tmpvar_34[2].z = 0.57735;
  mediump vec3 normal_35;
  normal_35 = tmpvar_4;
  mediump vec3 scalePerBasisVector_36;
  mediump vec3 lm_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((8.0 * tmpvar_28.w) * tmpvar_28.xyz);
  lm_37 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((8.0 * tmpvar_29.w) * tmpvar_29.xyz);
  scalePerBasisVector_36 = tmpvar_39;
  lm_37 = (lm_37 * dot (clamp ((tmpvar_34 * normal_35), 0.0, 1.0), scalePerBasisVector_36));
  vec3 v_40;
  v_40.x = tmpvar_34[0].x;
  v_40.y = tmpvar_34[1].x;
  v_40.z = tmpvar_34[2].x;
  vec3 v_41;
  v_41.x = tmpvar_34[0].y;
  v_41.y = tmpvar_34[1].y;
  v_41.z = tmpvar_34[2].y;
  vec3 v_42;
  v_42.x = tmpvar_34[0].z;
  v_42.y = tmpvar_34[1].z;
  v_42.z = tmpvar_34[2].z;
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_4, normalize((normalize((((scalePerBasisVector_36.x * v_40) + (scalePerBasisVector_36.y * v_41)) + (scalePerBasisVector_36.z * v_42))) + viewDir_32))));
  nh_33 = tmpvar_43;
  highp vec4 tmpvar_44;
  tmpvar_44.xyz = lm_37;
  tmpvar_44.w = pow (nh_33, 0.0);
  tmpvar_31 = tmpvar_44;
  lowp vec3 arg1_45;
  arg1_45 = ((tmpvar_27.x * 2.0) * tmpvar_28.xyz);
  mediump vec3 tmpvar_46;
  tmpvar_46 = (tmpvar_3 * max (min (tmpvar_31.xyz, arg1_45), (tmpvar_31.xyz * tmpvar_27.x)));
  c_1.xyz = tmpvar_46;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Matrix 8 [_World2Object]
Vector 14 [unity_Scale]
Vector 15 [unity_NPOTScale]
Vector 16 [unity_LightmapST]
Vector 17 [_MainTex_ST]
Vector 18 [_BodyBumpTex_ST]
"agal_vs
c19 1.0 0.5 0.0 0.0
[bc]
aaaaaaaaaaaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, a5
adaaaaaaabaaahacabaaaancaaaaaaaaaaaaaaajacaaaaaa mul r1.xyz, a1.zxyw, r0.yzxx
aaaaaaaaaaaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, a5
adaaaaaaacaaahacabaaaamjaaaaaaaaaaaaaafcacaaaaaa mul r2.xyz, a1.yzxw, r0.zxyy
acaaaaaaaaaaahacacaaaakeacaaaaaaabaaaakeacaaaaaa sub r0.xyz, r2.xyzz, r1.xyzz
adaaaaaaaaaaahacaaaaaakeacaaaaaaafaaaappaaaaaaaa mul r0.xyz, r0.xyzz, a5.w
aaaaaaaaabaaahacamaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1.xyz, c12
aaaaaaaaabaaaiacbdaaaaaaabaaaaaaaaaaaaaaaaaaaaaa mov r1.w, c19.x
bdaaaaaaacaaaeacabaaaaoeacaaaaaaakaaaaoeabaaaaaa dp4 r2.z, r1, c10
bdaaaaaaacaaabacabaaaaoeacaaaaaaaiaaaaoeabaaaaaa dp4 r2.x, r1, c8
bdaaaaaaacaaacacabaaaaoeacaaaaaaajaaaaoeabaaaaaa dp4 r2.y, r1, c9
adaaaaaaadaaahacacaaaakeacaaaaaaaoaaaappabaaaaaa mul r3.xyz, r2.xyzz, c14.w
acaaaaaaabaaahacadaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub r1.xyz, r3.xyzz, a0
bcaaaaaaacaaacaeabaaaakeacaaaaaaaaaaaakeacaaaaaa dp3 v2.y, r1.xyzz, r0.xyzz
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 r0.w, a0, c3
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 r0.z, a0, c2
bcaaaaaaacaaaeaeabaaaaoeaaaaaaaaabaaaakeacaaaaaa dp3 v2.z, a1, r1.xyzz
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 r0.x, a0, c0
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 r0.y, a0, c1
adaaaaaaacaaahacaaaaaapeacaaaaaabdaaaaffabaaaaaa mul r2.xyz, r0.xyww, c19.y
bcaaaaaaacaaabaeabaaaakeacaaaaaaafaaaaoeaaaaaaaa dp3 v2.x, r1.xyzz, a5
adaaaaaaabaaacacacaaaaffacaaaaaaanaaaaaaabaaaaaa mul r1.y, r2.y, c13.x
aaaaaaaaabaaabacacaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r1.x, r2.x
abaaaaaaabaaadacabaaaafeacaaaaaaacaaaakkacaaaaaa add r1.xy, r1.xyyy, r2.z
adaaaaaaadaaadaeabaaaafeacaaaaaaapaaaaoeabaaaaaa mul v3.xy, r1.xyyy, c15
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
aaaaaaaaahaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v7, a2
aaaaaaaaadaaamaeaaaaaaopacaaaaaaaaaaaaaaaaaaaaaa mov v3.zw, r0.wwzw
adaaaaaaadaaamacaeaaaaeeaaaaaaaabcaaaaeeabaaaaaa mul r3.zw, a4.xyxy, c18.xyxy
abaaaaaaaaaaamaeadaaaaopacaaaaaabcaaaaoeabaaaaaa add v0.zw, r3.wwzw, c18
adaaaaaaadaaadacadaaaaoeaaaaaaaabbaaaaoeabaaaaaa mul r3.xy, a3, c17
abaaaaaaaaaaadaeadaaaafeacaaaaaabbaaaaooabaaaaaa add v0.xy, r3.xyyy, c17.zwzw
adaaaaaaadaaadacaeaaaaoeaaaaaaaabaaaaaoeabaaaaaa mul r3.xy, a4, c16
abaaaaaaabaaadaeadaaaafeacaaaaaabaaaaaooabaaaaaa add v1.xy, r3.xyyy, c16.zwzw
aaaaaaaaabaaamaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.zw, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 224 used size, 15 vars
Vector 176 [unity_LightmapST] 4
Vector 192 [_MainTex_ST] 4
Vector 208 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 25 instructions, 3 temp regs, 0 temp arrays:
// ALU 11 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedabcckkhmlfjilngoelpfdhoinkccpeafabaaaaaagmaiaaaaaeaaaaaa
daaaaaaanaacaaaaoiagaaaalaahaaaaebgpgodjjiacaaaajiacaaaaaaacpopp
eaacaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaalaa
adaaabaaaaaaaaaaabaaaeaaacaaaeaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaabaaaafaaakaaaaaaaaaaaaaaaaaaaaacpoppfbaaaaafapaaapkaaaaaaadp
aaaaaaaaaaaaaaaaaaaaaaaabpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabia
abaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapjabpaaaaac
afaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoeja
acaaoekaacaaookaaeaaaaaeaaaaamoaaeaaeejaadaaeekaadaaoekaaeaaaaae
acaaadoaaeaaoejaabaaoekaabaaookaabaaaaacaaaaahiaaeaaoekaafaaaaad
abaaahiaaaaaffiaalaaoekaaeaaaaaeaaaaaliaakaakekaaaaaaaiaabaakeia
aeaaaaaeaaaaahiaamaaoekaaaaakkiaaaaapeiaacaaaaadaaaaahiaaaaaoeia
anaaoekaaeaaaaaeaaaaahiaaaaaoeiaaoaappkaaaaaoejbaiaaaaadadaaaboa
abaaoejaaaaaoeiaabaaaaacabaaahiaabaaoejaafaaaaadacaaahiaabaamjia
acaancjaaeaaaaaeabaaahiaacaamjjaabaanciaacaaoeibafaaaaadabaaahia
abaaoeiaabaappjaaiaaaaadadaaacoaabaaoeiaaaaaoeiaaiaaaaadadaaaeoa
acaaoejaaaaaoeiaafaaaaadaaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapia
agaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaajaaoekaaaaappjaaaaaoeiaafaaaaadabaaabiaaaaaffia
afaaaakaafaaaaadabaaaiiaabaaaaiaapaaaakaafaaaaadabaaafiaaaaapeia
apaaaakaacaaaaadaeaaadoaabaakkiaabaaomiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacaeaaamoaaaaaoeia
abaaaaacabaaapoaafaaoejappppaaaafdeieefcbaaeaaaaeaaaabaaaeabaaaa
fjaaaaaeegiocaaaaaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaaddccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaa
afaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaa
amaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
anaaaaaakgiocaaaaaaaaaaaanaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadcaaaaaldccabaaaadaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaa
alaaaaaaogikcaaaaaaaaaaaalaaaaaadiaaaaahhcaabaaaabaaaaaajgbebaaa
abaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaajgbebaaaacaaaaaa
cgbjbaaaabaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaa
abaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaacaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaa
aeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaacaaaaaabdaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaa
pgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaa
aeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbccabaaaaeaaaaaa
egbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaa
acaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaa
akiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaafaaaaaa
kgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaakgakbaaaabaaaaaamgaabaaa
abaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
laaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaaabaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfcenebemaa
feeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaaaiaaaaaa
jiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
acaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadamaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 482
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 503
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 485
v2f_surf vert_surf( in appdata_full v ) {
    #line 487
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 491
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 495
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 499
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 482
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 503
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * _SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 458
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 462
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 466
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 470
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 505
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 507
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 511
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 515
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 519
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    #line 523
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    c.w = o.Alpha;
    #line 527
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_WorldSpaceLightPos0]
Vector 15 [unity_4LightPosX0]
Vector 16 [unity_4LightPosY0]
Vector 17 [unity_4LightPosZ0]
Vector 18 [unity_4LightAtten0]
Vector 19 [unity_LightColor0]
Vector 20 [unity_LightColor1]
Vector 21 [unity_LightColor2]
Vector 22 [unity_LightColor3]
Vector 23 [unity_SHAr]
Vector 24 [unity_SHAg]
Vector 25 [unity_SHAb]
Vector 26 [unity_SHBr]
Vector 27 [unity_SHBg]
Vector 28 [unity_SHBb]
Vector 29 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 30 [unity_Scale]
Vector 31 [_MainTex_ST]
Vector 32 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 76 ALU
PARAM c[33] = { { 1, 0 },
		state.matrix.mvp,
		program.local[5..32] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
MUL R3.xyz, vertex.normal, c[30].w;
DP4 R0.x, vertex.position, c[6];
ADD R1, -R0.x, c[16];
DP3 R3.w, R3, c[6];
DP3 R4.x, R3, c[5];
DP3 R3.x, R3, c[7];
MUL R2, R3.w, R1;
DP4 R0.x, vertex.position, c[5];
ADD R0, -R0.x, c[15];
MUL R1, R1, R1;
MOV R4.z, R3.x;
MAD R2, R4.x, R0, R2;
MOV R4.w, c[0].x;
DP4 R4.y, vertex.position, c[7];
MAD R1, R0, R0, R1;
ADD R0, -R4.y, c[17];
MAD R1, R0, R0, R1;
MAD R0, R3.x, R0, R2;
MUL R2, R1, c[18];
MOV R4.y, R3.w;
RSQ R1.x, R1.x;
RSQ R1.y, R1.y;
RSQ R1.w, R1.w;
RSQ R1.z, R1.z;
MUL R0, R0, R1;
ADD R1, R2, c[0].x;
RCP R1.x, R1.x;
RCP R1.y, R1.y;
RCP R1.w, R1.w;
RCP R1.z, R1.z;
MAX R0, R0, c[0].y;
MUL R0, R0, R1;
MUL R1.xyz, R0.y, c[20];
MAD R1.xyz, R0.x, c[19], R1;
MAD R0.xyz, R0.z, c[21], R1;
MAD R1.xyz, R0.w, c[22], R0;
MUL R0, R4.xyzz, R4.yzzx;
MUL R1.w, R3, R3;
DP4 R3.z, R0, c[28];
DP4 R3.y, R0, c[27];
DP4 R3.x, R0, c[26];
MAD R1.w, R4.x, R4.x, -R1;
MUL R0.xyz, R1.w, c[29];
MOV R1.w, c[0].x;
DP4 R2.z, R4, c[25];
DP4 R2.y, R4, c[24];
DP4 R2.x, R4, c[23];
ADD R2.xyz, R2, R3;
ADD R0.xyz, R2, R0;
ADD result.texcoord[2].xyz, R0, R1;
MOV R1.xyz, c[13];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[30].w, -vertex.position;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R1, c[14];
MUL R0.xyz, R0, vertex.attrib[14].w;
DP4 R3.z, R1, c[11];
DP4 R3.y, R1, c[10];
DP4 R3.x, R1, c[9];
DP3 result.texcoord[1].y, R3, R0;
DP3 result.texcoord[3].y, R0, R2;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[3].z, vertex.normal, R2;
DP3 result.texcoord[3].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[32].xyxy, c[32];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[31], c[31].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 76 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [unity_4LightPosX0]
Vector 15 [unity_4LightPosY0]
Vector 16 [unity_4LightPosZ0]
Vector 17 [unity_4LightAtten0]
Vector 18 [unity_LightColor0]
Vector 19 [unity_LightColor1]
Vector 20 [unity_LightColor2]
Vector 21 [unity_LightColor3]
Vector 22 [unity_SHAr]
Vector 23 [unity_SHAg]
Vector 24 [unity_SHAb]
Vector 25 [unity_SHBr]
Vector 26 [unity_SHBg]
Vector 27 [unity_SHBb]
Vector 28 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_MainTex_ST]
Vector 31 [_BodyBumpTex_ST]
"vs_2_0
; 79 ALU
def c32, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r3.xyz, v2, c29.w
dp4 r0.x, v0, c5
add r1, -r0.x, c15
dp3 r3.w, r3, c5
dp3 r4.x, r3, c4
dp3 r3.x, r3, c6
mul r2, r3.w, r1
dp4 r0.x, v0, c4
add r0, -r0.x, c14
mul r1, r1, r1
mov r4.z, r3.x
mad r2, r4.x, r0, r2
mov r4.w, c32.x
dp4 r4.y, v0, c6
mad r1, r0, r0, r1
add r0, -r4.y, c16
mad r1, r0, r0, r1
mad r0, r3.x, r0, r2
mul r2, r1, c17
mov r4.y, r3.w
rsq r1.x, r1.x
rsq r1.y, r1.y
rsq r1.w, r1.w
rsq r1.z, r1.z
mul r0, r0, r1
add r1, r2, c32.x
dp4 r2.z, r4, c24
dp4 r2.y, r4, c23
dp4 r2.x, r4, c22
rcp r1.x, r1.x
rcp r1.y, r1.y
rcp r1.w, r1.w
rcp r1.z, r1.z
max r0, r0, c32.y
mul r0, r0, r1
mul r1.xyz, r0.y, c19
mad r1.xyz, r0.x, c18, r1
mad r0.xyz, r0.z, c20, r1
mad r1.xyz, r0.w, c21, r0
mul r0, r4.xyzz, r4.yzzx
mul r1.w, r3, r3
dp4 r3.z, r0, c27
dp4 r3.y, r0, c26
dp4 r3.x, r0, c25
mad r1.w, r4.x, r4.x, -r1
mul r0.xyz, r1.w, c28
add r2.xyz, r2, r3
add r0.xyz, r2, r0
add oT2.xyz, r0, r1
mov r1.w, c32.x
mov r1.xyz, c12
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
mad r3.xyz, r0, c29.w, -v0
mov r1.xyz, v1
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r1.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c13, r0
mov r1, c9
mov r0, c8
dp4 r4.y, c13, r1
dp4 r4.x, c13, r0
dp3 oT1.y, r4, r2
dp3 oT3.y, r2, r3
dp3 oT1.z, v2, r4
dp3 oT1.x, r4, v1
dp3 oT3.z, v2, r3
dp3 oT3.x, v1, r3
mov oD0, v5
mad oT0.zw, v4.xyxy, c31.xyxy, c31
mad oT0.xy, v3, c30, c30.zwzw
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 144 // 144 used size, 13 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 66 instructions, 7 temp regs, 0 temp arrays:
// ALU 36 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmioplbhidjhfjgncpeahfaffjkjdmdfiabaaaaaahealaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefclmajaaaaeaaaabaagpacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacahaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaaiaaaaaa
kgiocaaaaaaaaaaaaiaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadgaaaaaf
icaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaaihcaabaaaacaaaaaaegbcbaaa
acaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaaklcaabaaaacaaaaaaegiicaaa
adaaaaaaamaaaaaaagaabaaaacaaaaaaegaibaaaadaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaaacaaaaaaegadbaaaacaaaaaa
bbaaaaaibcaabaaaacaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaabaaaaaa
bbaaaaaiccaabaaaacaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaabaaaaaa
bbaaaaaiecaabaaaacaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaadaaaaaajgacbaaaabaaaaaaegakbaaaabaaaaaabbaaaaai
bcaabaaaaeaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaadaaaaaabbaaaaai
ccaabaaaaeaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaadaaaaaabbaaaaai
ecaabaaaaeaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaadaaaaaaaaaaaaah
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaahicaabaaa
aaaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaacaaaaaabiaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaadaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaaadaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaaadaaaaaa
egiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaj
pcaabaaaaeaaaaaafgafbaiaebaaaaaaadaaaaaaegiocaaaacaaaaaaadaaaaaa
diaaaaahpcaabaaaafaaaaaafgafbaaaabaaaaaaegaobaaaaeaaaaaadiaaaaah
pcaabaaaaeaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaaaaaaaaajpcaabaaa
agaaaaaaagaabaiaebaaaaaaadaaaaaaegiocaaaacaaaaaaacaaaaaaaaaaaaaj
pcaabaaaadaaaaaakgakbaiaebaaaaaaadaaaaaaegiocaaaacaaaaaaaeaaaaaa
dcaaaaajpcaabaaaafaaaaaaegaobaaaagaaaaaaagaabaaaabaaaaaaegaobaaa
afaaaaaadcaaaaajpcaabaaaabaaaaaaegaobaaaadaaaaaakgakbaaaabaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaaeaaaaaaegaobaaaagaaaaaaegaobaaa
agaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaadaaaaaaegaobaaaaeaaaaaaeeaaaaafpcaabaaaaeaaaaaaegaobaaa
adaaaaaadcaaaaanpcaabaaaadaaaaaaegaobaaaadaaaaaaegiocaaaacaaaaaa
afaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaoaaaaakpcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpegaobaaaadaaaaaa
diaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaaeaaaaaadeaaaaak
pcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaadaaaaaaegaobaaaabaaaaaa
diaaaaaihcaabaaaadaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaahaaaaaa
dcaaaaakhcaabaaaadaaaaaaegiccaaaacaaaaaaagaaaaaaagaabaaaabaaaaaa
egacbaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaiaaaaaa
kgakbaaaabaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaajaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaahhccabaaa
aeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaa
abaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaah
cccabaaaafaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaa
afaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaafaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_8;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  highp float vC_17;
  mediump vec3 x3_18;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAr, normal_16);
  x1_20.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAg, normal_16);
  x1_20.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAb, normal_16);
  x1_20.z = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_16.xyzz * normal_16.yzzx);
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBr, tmpvar_24);
  x2_19.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBg, tmpvar_24);
  x2_19.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBb, tmpvar_24);
  x2_19.z = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y));
  vC_17 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = (unity_SHC.xyz * vC_17);
  x3_18 = tmpvar_29;
  tmpvar_15 = ((x1_20 + x2_19) + x3_18);
  shlight_3 = tmpvar_15;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_30.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_30.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_30.z);
  highp vec4 tmpvar_34;
  tmpvar_34 = (((tmpvar_31 * tmpvar_31) + (tmpvar_32 * tmpvar_32)) + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_35;
  tmpvar_35 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_31 * tmpvar_8.x) + (tmpvar_32 * tmpvar_8.y)) + (tmpvar_33 * tmpvar_8.z)) * inversesqrt(tmpvar_34))) * (1.0/((1.0 + (tmpvar_34 * unity_4LightAtten0)))));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_35.x) + (unity_LightColor[1].xyz * tmpvar_35.y)) + (unity_LightColor[2].xyz * tmpvar_35.z)) + (unity_LightColor[3].xyz * tmpvar_35.w)));
  tmpvar_6 = tmpvar_36;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_11 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_9 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BodyBumpTex, tmpvar_17).xyz * 2.0) - 1.0);
  bodyBump_7 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_6 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp vec4 c_27;
  lowp float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD1));
  highp vec3 tmpvar_29;
  tmpvar_29 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_28) * 2.0);
  c_27.xyz = tmpvar_29;
  c_27.w = 0.0;
  c_1.w = c_27.w;
  c_1.xyz = (c_27.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_8;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  highp float vC_17;
  mediump vec3 x3_18;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAr, normal_16);
  x1_20.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAg, normal_16);
  x1_20.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAb, normal_16);
  x1_20.z = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_16.xyzz * normal_16.yzzx);
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBr, tmpvar_24);
  x2_19.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBg, tmpvar_24);
  x2_19.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBb, tmpvar_24);
  x2_19.z = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y));
  vC_17 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = (unity_SHC.xyz * vC_17);
  x3_18 = tmpvar_29;
  tmpvar_15 = ((x1_20 + x2_19) + x3_18);
  shlight_3 = tmpvar_15;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_30.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_30.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_30.z);
  highp vec4 tmpvar_34;
  tmpvar_34 = (((tmpvar_31 * tmpvar_31) + (tmpvar_32 * tmpvar_32)) + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_35;
  tmpvar_35 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_31 * tmpvar_8.x) + (tmpvar_32 * tmpvar_8.y)) + (tmpvar_33 * tmpvar_8.z)) * inversesqrt(tmpvar_34))) * (1.0/((1.0 + (tmpvar_34 * unity_4LightAtten0)))));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_35.x) + (unity_LightColor[1].xyz * tmpvar_35.y)) + (unity_LightColor[2].xyz * tmpvar_35.z)) + (unity_LightColor[3].xyz * tmpvar_35.w)));
  tmpvar_6 = tmpvar_36;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_11 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 normal_14;
  normal_14.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_14.z = sqrt((1.0 - clamp (dot (normal_14.xy, normal_14.xy), 0.0, 1.0)));
  trimBumpTex_9 = normal_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 normal_19;
  normal_19.xy = ((texture2D (_BodyBumpTex, tmpvar_17).wy * 2.0) - 1.0);
  normal_19.z = sqrt((1.0 - clamp (dot (normal_19.xy, normal_19.xy), 0.0, 1.0)));
  bodyBump_7 = normal_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bumpMap_6 = normal_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp vec4 c_27;
  lowp float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD1));
  highp vec3 tmpvar_29;
  tmpvar_29 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_28) * 2.0);
  c_27.xyz = tmpvar_29;
  c_27.w = 0.0;
  c_1.w = c_27.w;
  c_1.xyz = (c_27.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [unity_4LightPosX0]
Vector 15 [unity_4LightPosY0]
Vector 16 [unity_4LightPosZ0]
Vector 17 [unity_4LightAtten0]
Vector 18 [unity_LightColor0]
Vector 19 [unity_LightColor1]
Vector 20 [unity_LightColor2]
Vector 21 [unity_LightColor3]
Vector 22 [unity_SHAr]
Vector 23 [unity_SHAg]
Vector 24 [unity_SHAb]
Vector 25 [unity_SHBr]
Vector 26 [unity_SHBg]
Vector 27 [unity_SHBb]
Vector 28 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_MainTex_ST]
Vector 31 [_BodyBumpTex_ST]
"agal_vs
c32 1.0 0.0 0.0 0.0
[bc]
adaaaaaaadaaahacabaaaaoeaaaaaaaabnaaaappabaaaaaa mul r3.xyz, a1, c29.w
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.x, a0, c5
bfaaaaaaabaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa neg r1.x, r0.x
abaaaaaaabaaapacabaaaaaaacaaaaaaapaaaaoeabaaaaaa add r1, r1.x, c15
bcaaaaaaadaaaiacadaaaakeacaaaaaaafaaaaoeabaaaaaa dp3 r3.w, r3.xyzz, c5
bcaaaaaaaeaaabacadaaaakeacaaaaaaaeaaaaoeabaaaaaa dp3 r4.x, r3.xyzz, c4
bcaaaaaaadaaabacadaaaakeacaaaaaaagaaaaoeabaaaaaa dp3 r3.x, r3.xyzz, c6
adaaaaaaacaaapacadaaaappacaaaaaaabaaaaoeacaaaaaa mul r2, r3.w, r1
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bfaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa neg r0.x, r0.x
abaaaaaaaaaaapacaaaaaaaaacaaaaaaaoaaaaoeabaaaaaa add r0, r0.x, c14
adaaaaaaabaaapacabaaaaoeacaaaaaaabaaaaoeacaaaaaa mul r1, r1, r1
aaaaaaaaaeaaaeacadaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r4.z, r3.x
adaaaaaaafaaapacaeaaaaaaacaaaaaaaaaaaaoeacaaaaaa mul r5, r4.x, r0
abaaaaaaacaaapacafaaaaoeacaaaaaaacaaaaoeacaaaaaa add r2, r5, r2
aaaaaaaaaeaaaiaccaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa mov r4.w, c32.x
bdaaaaaaaeaaacacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r4.y, a0, c6
adaaaaaaafaaapacaaaaaaoeacaaaaaaaaaaaaoeacaaaaaa mul r5, r0, r0
abaaaaaaabaaapacafaaaaoeacaaaaaaabaaaaoeacaaaaaa add r1, r5, r1
bfaaaaaaaaaaacacaeaaaaffacaaaaaaaaaaaaaaaaaaaaaa neg r0.y, r4.y
abaaaaaaaaaaapacaaaaaaffacaaaaaabaaaaaoeabaaaaaa add r0, r0.y, c16
adaaaaaaafaaapacaaaaaaoeacaaaaaaaaaaaaoeacaaaaaa mul r5, r0, r0
abaaaaaaabaaapacafaaaaoeacaaaaaaabaaaaoeacaaaaaa add r1, r5, r1
adaaaaaaaaaaapacadaaaaaaacaaaaaaaaaaaaoeacaaaaaa mul r0, r3.x, r0
abaaaaaaaaaaapacaaaaaaoeacaaaaaaacaaaaoeacaaaaaa add r0, r0, r2
adaaaaaaacaaapacabaaaaoeacaaaaaabbaaaaoeabaaaaaa mul r2, r1, c17
aaaaaaaaaeaaacacadaaaappacaaaaaaaaaaaaaaaaaaaaaa mov r4.y, r3.w
akaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r1.x
akaaaaaaabaaacacabaaaaffacaaaaaaaaaaaaaaaaaaaaaa rsq r1.y, r1.y
akaaaaaaabaaaiacabaaaappacaaaaaaaaaaaaaaaaaaaaaa rsq r1.w, r1.w
akaaaaaaabaaaeacabaaaakkacaaaaaaaaaaaaaaaaaaaaaa rsq r1.z, r1.z
adaaaaaaaaaaapacaaaaaaoeacaaaaaaabaaaaoeacaaaaaa mul r0, r0, r1
abaaaaaaabaaapacacaaaaoeacaaaaaacaaaaaaaabaaaaaa add r1, r2, c32.x
bdaaaaaaacaaaeacaeaaaaoeacaaaaaabiaaaaoeabaaaaaa dp4 r2.z, r4, c24
bdaaaaaaacaaacacaeaaaaoeacaaaaaabhaaaaoeabaaaaaa dp4 r2.y, r4, c23
bdaaaaaaacaaabacaeaaaaoeacaaaaaabgaaaaoeabaaaaaa dp4 r2.x, r4, c22
afaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rcp r1.x, r1.x
afaaaaaaabaaacacabaaaaffacaaaaaaaaaaaaaaaaaaaaaa rcp r1.y, r1.y
afaaaaaaabaaaiacabaaaappacaaaaaaaaaaaaaaaaaaaaaa rcp r1.w, r1.w
afaaaaaaabaaaeacabaaaakkacaaaaaaaaaaaaaaaaaaaaaa rcp r1.z, r1.z
ahaaaaaaaaaaapacaaaaaaoeacaaaaaacaaaaaffabaaaaaa max r0, r0, c32.y
adaaaaaaaaaaapacaaaaaaoeacaaaaaaabaaaaoeacaaaaaa mul r0, r0, r1
adaaaaaaabaaahacaaaaaaffacaaaaaabdaaaaoeabaaaaaa mul r1.xyz, r0.y, c19
adaaaaaaafaaahacaaaaaaaaacaaaaaabcaaaaoeabaaaaaa mul r5.xyz, r0.x, c18
abaaaaaaabaaahacafaaaakeacaaaaaaabaaaakeacaaaaaa add r1.xyz, r5.xyzz, r1.xyzz
adaaaaaaaaaaahacaaaaaakkacaaaaaabeaaaaoeabaaaaaa mul r0.xyz, r0.z, c20
abaaaaaaaaaaahacaaaaaakeacaaaaaaabaaaakeacaaaaaa add r0.xyz, r0.xyzz, r1.xyzz
adaaaaaaabaaahacaaaaaappacaaaaaabfaaaaoeabaaaaaa mul r1.xyz, r0.w, c21
abaaaaaaabaaahacabaaaakeacaaaaaaaaaaaakeacaaaaaa add r1.xyz, r1.xyzz, r0.xyzz
adaaaaaaaaaaapacaeaaaakeacaaaaaaaeaaaacjacaaaaaa mul r0, r4.xyzz, r4.yzzx
adaaaaaaabaaaiacadaaaappacaaaaaaadaaaappacaaaaaa mul r1.w, r3.w, r3.w
bdaaaaaaadaaaeacaaaaaaoeacaaaaaablaaaaoeabaaaaaa dp4 r3.z, r0, c27
bdaaaaaaadaaacacaaaaaaoeacaaaaaabkaaaaoeabaaaaaa dp4 r3.y, r0, c26
bdaaaaaaadaaabacaaaaaaoeacaaaaaabjaaaaoeabaaaaaa dp4 r3.x, r0, c25
adaaaaaaafaaaiacaeaaaaaaacaaaaaaaeaaaaaaacaaaaaa mul r5.w, r4.x, r4.x
acaaaaaaabaaaiacafaaaappacaaaaaaabaaaappacaaaaaa sub r1.w, r5.w, r1.w
adaaaaaaaaaaahacabaaaappacaaaaaabmaaaaoeabaaaaaa mul r0.xyz, r1.w, c28
abaaaaaaacaaahacacaaaakeacaaaaaaadaaaakeacaaaaaa add r2.xyz, r2.xyzz, r3.xyzz
abaaaaaaaaaaahacacaaaakeacaaaaaaaaaaaakeacaaaaaa add r0.xyz, r2.xyzz, r0.xyzz
abaaaaaaacaaahaeaaaaaakeacaaaaaaabaaaakeacaaaaaa add v2.xyz, r0.xyzz, r1.xyzz
aaaaaaaaabaaaiaccaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa mov r1.w, c32.x
aaaaaaaaabaaahacamaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1.xyz, c12
bdaaaaaaaaaaaeacabaaaaoeacaaaaaaakaaaaoeabaaaaaa dp4 r0.z, r1, c10
bdaaaaaaaaaaacacabaaaaoeacaaaaaaajaaaaoeabaaaaaa dp4 r0.y, r1, c9
bdaaaaaaaaaaabacabaaaaoeacaaaaaaaiaaaaoeabaaaaaa dp4 r0.x, r1, c8
adaaaaaaafaaahacaaaaaakeacaaaaaabnaaaappabaaaaaa mul r5.xyz, r0.xyzz, c29.w
acaaaaaaadaaahacafaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub r3.xyz, r5.xyzz, a0
aaaaaaaaabaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r1.xyz, a5
aaaaaaaaaaaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, a5
adaaaaaaabaaahacabaaaancaaaaaaaaabaaaaajacaaaaaa mul r1.xyz, a1.zxyw, r1.yzxx
adaaaaaaafaaahacabaaaamjaaaaaaaaaaaaaafcacaaaaaa mul r5.xyz, a1.yzxw, r0.zxyy
acaaaaaaabaaahacafaaaakeacaaaaaaabaaaakeacaaaaaa sub r1.xyz, r5.xyzz, r1.xyzz
adaaaaaaacaaahacabaaaakeacaaaaaaafaaaappaaaaaaaa mul r2.xyz, r1.xyzz, a5.w
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaaeaaaeacanaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r4.z, c13, r0
aaaaaaaaabaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c9
aaaaaaaaaaaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c8
bdaaaaaaaeaaacacanaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r4.y, c13, r1
bdaaaaaaaeaaabacanaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r4.x, c13, r0
bcaaaaaaabaaacaeaeaaaakeacaaaaaaacaaaakeacaaaaaa dp3 v1.y, r4.xyzz, r2.xyzz
bcaaaaaaadaaacaeacaaaakeacaaaaaaadaaaakeacaaaaaa dp3 v3.y, r2.xyzz, r3.xyzz
bcaaaaaaabaaaeaeabaaaaoeaaaaaaaaaeaaaakeacaaaaaa dp3 v1.z, a1, r4.xyzz
bcaaaaaaabaaabaeaeaaaakeacaaaaaaafaaaaoeaaaaaaaa dp3 v1.x, r4.xyzz, a5
bcaaaaaaadaaaeaeabaaaaoeaaaaaaaaadaaaakeacaaaaaa dp3 v3.z, a1, r3.xyzz
bcaaaaaaadaaabaeafaaaaoeaaaaaaaaadaaaakeacaaaaaa dp3 v3.x, a5, r3.xyzz
aaaaaaaaahaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v7, a2
adaaaaaaafaaamacaeaaaaeeaaaaaaaabpaaaaeeabaaaaaa mul r5.zw, a4.xyxy, c31.xyxy
abaaaaaaaaaaamaeafaaaaopacaaaaaabpaaaaoeabaaaaaa add v0.zw, r5.wwzw, c31
adaaaaaaafaaadacadaaaaoeaaaaaaaaboaaaaoeabaaaaaa mul r5.xy, a3, c30
abaaaaaaaaaaadaeafaaaafeacaaaaaaboaaaaooabaaaaaa add v0.xy, r5.xyyy, c30.zwzw
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 144 // 144 used size, 13 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 66 instructions, 7 temp regs, 0 temp arrays:
// ALU 36 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedpcbcknfpgphdmhnbgjkehomcfjgekjenabaaaaaagibbaaaaaeaaaaaa
daaaaaaacaagaaaaoeapaaaakmbaaaaaebgpgodjoiafaaaaoiafaaaaaaacpopp
gmafaaaahmaaaaaaahaaceaaaaaahiaaaaaahiaaaaaaceaaabaahiaaaaaaahaa
acaaabaaaaaaaaaaabaaaeaaabaaadaaaaaaaaaaacaaaaaaabaaaeaaaaaaaaaa
acaaacaaaiaaafaaaaaaaaaaacaabcaaahaaanaaaaaaaaaaadaaaaaaaeaabeaa
aaaaaaaaadaaamaaajaabiaaaaaaaaaaaaaaaaaaaaacpoppfbaaaaafcbaaapka
aaaaiadpaaaaaaaaaaaaaaaaaaaaaaaabpaaaaacafaaaaiaaaaaapjabpaaaaac
afaaabiaabaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapja
bpaaaaacafaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoa
adaaoejaabaaoekaabaaookaaeaaaaaeaaaaamoaaeaaeejaacaaeekaacaaoeka
abaaaaacaaaaapiaaeaaoekaafaaaaadabaaahiaaaaaffiabnaaoekaaeaaaaae
abaaahiabmaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaboaaoekaaaaakkia
abaaoeiaaeaaaaaeaaaaahiabpaaoekaaaaappiaaaaaoeiaaiaaaaadacaaaboa
abaaoejaaaaaoeiaabaaaaacabaaahiaacaaoejaafaaaaadacaaahiaabaancia
abaamjjaaeaaaaaeabaaahiaabaamjiaabaancjaacaaoeibafaaaaadabaaahia
abaaoeiaabaappjaaiaaaaadacaaacoaabaaoeiaaaaaoeiaaiaaaaadacaaaeoa
acaaoejaaaaaoeiaabaaaaacaaaaahiaadaaoekaafaaaaadacaaahiaaaaaffia
bnaaoekaaeaaaaaeaaaaaliabmaakekaaaaaaaiaacaakeiaaeaaaaaeaaaaahia
boaaoekaaaaakkiaaaaapeiaacaaaaadaaaaahiaaaaaoeiabpaaoekaaeaaaaae
aaaaahiaaaaaoeiacaaappkaaaaaoejbaiaaaaadaeaaaboaabaaoejaaaaaoeia
aiaaaaadaeaaacoaabaaoeiaaaaaoeiaaiaaaaadaeaaaeoaacaaoejaaaaaoeia
afaaaaadaaaaahiaaaaaffjabjaaoekaaeaaaaaeaaaaahiabiaaoekaaaaaaaja
aaaaoeiaaeaaaaaeaaaaahiabkaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaahia
blaaoekaaaaappjaaaaaoeiaacaaaaadabaaapiaaaaakkibahaaoekaacaaaaad
acaaapiaaaaaaaibafaaoekaacaaaaadaaaaapiaaaaaffibagaaoekaafaaaaad
adaaahiaacaaoejacaaappkaafaaaaadaeaaahiaadaaffiabjaaoekaaeaaaaae
adaaaliabiaakekaadaaaaiaaeaakeiaaeaaaaaeadaaahiabkaaoekaadaakkia
adaapeiaafaaaaadaeaaapiaaaaaoeiaadaaffiaafaaaaadaaaaapiaaaaaoeia
aaaaoeiaaeaaaaaeaaaaapiaacaaoeiaacaaoeiaaaaaoeiaaeaaaaaeacaaapia
acaaoeiaadaaaaiaaeaaoeiaaeaaaaaeacaaapiaabaaoeiaadaakkiaacaaoeia
aeaaaaaeaaaaapiaabaaoeiaabaaoeiaaaaaoeiaahaaaaacabaaabiaaaaaaaia
ahaaaaacabaaaciaaaaaffiaahaaaaacabaaaeiaaaaakkiaahaaaaacabaaaiia
aaaappiaabaaaaacaeaaabiacbaaaakaaeaaaaaeaaaaapiaaaaaoeiaaiaaoeka
aeaaaaiaafaaaaadabaaapiaabaaoeiaacaaoeiaalaaaaadabaaapiaabaaoeia
cbaaffkaagaaaaacacaaabiaaaaaaaiaagaaaaacacaaaciaaaaaffiaagaaaaac
acaaaeiaaaaakkiaagaaaaacacaaaiiaaaaappiaafaaaaadaaaaapiaabaaoeia
acaaoeiaafaaaaadabaaahiaaaaaffiaakaaoekaaeaaaaaeabaaahiaajaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiaalaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiaamaaoekaaaaappiaaaaaoeiaabaaaaacadaaaiiacbaaaakaajaaaaad
abaaabiaanaaoekaadaaoeiaajaaaaadabaaaciaaoaaoekaadaaoeiaajaaaaad
abaaaeiaapaaoekaadaaoeiaafaaaaadacaaapiaadaacjiaadaakeiaajaaaaad
aeaaabiabaaaoekaacaaoeiaajaaaaadaeaaaciabbaaoekaacaaoeiaajaaaaad
aeaaaeiabcaaoekaacaaoeiaacaaaaadabaaahiaabaaoeiaaeaaoeiaafaaaaad
aaaaaiiaadaaffiaadaaffiaaeaaaaaeaaaaaiiaadaaaaiaadaaaaiaaaaappib
aeaaaaaeabaaahiabdaaoekaaaaappiaabaaoeiaacaaaaadadaaahoaaaaaoeia
abaaoeiaafaaaaadaaaaapiaaaaaffjabfaaoekaaeaaaaaeaaaaapiabeaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiabgaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiabhaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoeka
aaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacabaaapoaafaaoejappppaaaa
fdeieefclmajaaaaeaaaabaagpacaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacahaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaa
ahaaaaaaogikcaaaaaaaaaaaahaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaa
aeaaaaaaagiecaaaaaaaaaaaaiaaaaaakgiocaaaaaaaaaaaaiaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaajgbebaaa
abaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaaacaaaaaa
cgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaadaaaaaa
egbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaabaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaaihcaabaaaacaaaaaaegbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaa
diaaaaaihcaabaaaadaaaaaafgafbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaaklcaabaaaacaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaacaaaaaa
egaibaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaacaaaaaaegadbaaaacaaaaaabbaaaaaibcaabaaaacaaaaaaegiocaaa
acaaaaaabcaaaaaaegaobaaaabaaaaaabbaaaaaiccaabaaaacaaaaaaegiocaaa
acaaaaaabdaaaaaaegaobaaaabaaaaaabbaaaaaiecaabaaaacaaaaaaegiocaaa
acaaaaaabeaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaadaaaaaajgacbaaa
abaaaaaaegakbaaaabaaaaaabbaaaaaibcaabaaaaeaaaaaaegiocaaaacaaaaaa
bfaaaaaaegaobaaaadaaaaaabbaaaaaiccaabaaaaeaaaaaaegiocaaaacaaaaaa
bgaaaaaaegaobaaaadaaaaaabbaaaaaiecaabaaaaeaaaaaaegiocaaaacaaaaaa
bhaaaaaaegaobaaaadaaaaaaaaaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaa
biaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaadaaaaaa
fgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaadaaaaaa
egiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaadaaaaaadcaaaaak
hcaabaaaadaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaajpcaabaaaaeaaaaaafgafbaiaebaaaaaa
adaaaaaaegiocaaaacaaaaaaadaaaaaadiaaaaahpcaabaaaafaaaaaafgafbaaa
abaaaaaaegaobaaaaeaaaaaadiaaaaahpcaabaaaaeaaaaaaegaobaaaaeaaaaaa
egaobaaaaeaaaaaaaaaaaaajpcaabaaaagaaaaaaagaabaiaebaaaaaaadaaaaaa
egiocaaaacaaaaaaacaaaaaaaaaaaaajpcaabaaaadaaaaaakgakbaiaebaaaaaa
adaaaaaaegiocaaaacaaaaaaaeaaaaaadcaaaaajpcaabaaaafaaaaaaegaobaaa
agaaaaaaagaabaaaabaaaaaaegaobaaaafaaaaaadcaaaaajpcaabaaaabaaaaaa
egaobaaaadaaaaaakgakbaaaabaaaaaaegaobaaaafaaaaaadcaaaaajpcaabaaa
aeaaaaaaegaobaaaagaaaaaaegaobaaaagaaaaaaegaobaaaaeaaaaaadcaaaaaj
pcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
eeaaaaafpcaabaaaaeaaaaaaegaobaaaadaaaaaadcaaaaanpcaabaaaadaaaaaa
egaobaaaadaaaaaaegiocaaaacaaaaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpaoaaaaakpcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpegaobaaaadaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaa
abaaaaaaegaobaaaaeaaaaaadeaaaaakpcaabaaaabaaaaaaegaobaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaahpcaabaaaabaaaaaa
egaobaaaadaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaa
abaaaaaaegiccaaaacaaaaaaahaaaaaadcaaaaakhcaabaaaadaaaaaaegiccaaa
acaaaaaaagaaaaaaagaabaaaabaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaaiaaaaaakgakbaaaabaaaaaaegacbaaaadaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaajaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaaaaaaaaahhccabaaaaeaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaaegacbaaa
abaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
doaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
apapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaaabaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfcenebemaafeeffied
epepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 95
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 99
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 103
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 107
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 111
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 115
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 476
v2f_surf vert_surf( in appdata_full v ) {
    #line 478
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 482
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 486
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 490
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    #line 495
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 497
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 499
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 503
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 507
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    #line 511
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_4LightPosX0]
Vector 17 [unity_4LightPosY0]
Vector 18 [unity_4LightPosZ0]
Vector 19 [unity_4LightAtten0]
Vector 20 [unity_LightColor0]
Vector 21 [unity_LightColor1]
Vector 22 [unity_LightColor2]
Vector 23 [unity_LightColor3]
Vector 24 [unity_SHAr]
Vector 25 [unity_SHAg]
Vector 26 [unity_SHAb]
Vector 27 [unity_SHBr]
Vector 28 [unity_SHBg]
Vector 29 [unity_SHBb]
Vector 30 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 31 [unity_Scale]
Vector 32 [_MainTex_ST]
Vector 33 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 81 ALU
PARAM c[34] = { { 1, 0, 0.5 },
		state.matrix.mvp,
		program.local[5..33] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
MUL R3.xyz, vertex.normal, c[31].w;
DP4 R0.x, vertex.position, c[6];
ADD R1, -R0.x, c[17];
DP3 R3.w, R3, c[6];
DP3 R4.x, R3, c[5];
DP3 R3.x, R3, c[7];
MUL R2, R3.w, R1;
DP4 R0.x, vertex.position, c[5];
ADD R0, -R0.x, c[16];
MUL R1, R1, R1;
MOV R4.z, R3.x;
MAD R2, R4.x, R0, R2;
MOV R4.w, c[0].x;
DP4 R4.y, vertex.position, c[7];
MAD R1, R0, R0, R1;
ADD R0, -R4.y, c[18];
MAD R1, R0, R0, R1;
MAD R0, R3.x, R0, R2;
MUL R2, R1, c[19];
MOV R4.y, R3.w;
RSQ R1.x, R1.x;
RSQ R1.y, R1.y;
RSQ R1.w, R1.w;
RSQ R1.z, R1.z;
MUL R0, R0, R1;
ADD R1, R2, c[0].x;
RCP R1.x, R1.x;
RCP R1.y, R1.y;
RCP R1.w, R1.w;
RCP R1.z, R1.z;
MAX R0, R0, c[0].y;
MUL R0, R0, R1;
MUL R1.xyz, R0.y, c[21];
MAD R1.xyz, R0.x, c[20], R1;
MAD R0.xyz, R0.z, c[22], R1;
MAD R1.xyz, R0.w, c[23], R0;
MUL R0, R4.xyzz, R4.yzzx;
MUL R1.w, R3, R3;
DP4 R3.z, R0, c[29];
DP4 R3.y, R0, c[28];
DP4 R3.x, R0, c[27];
MAD R1.w, R4.x, R4.x, -R1;
MUL R0.xyz, R1.w, c[30];
MOV R1.w, c[0].x;
DP4 R0.w, vertex.position, c[4];
DP4 R2.z, R4, c[26];
DP4 R2.y, R4, c[25];
DP4 R2.x, R4, c[24];
ADD R2.xyz, R2, R3;
ADD R0.xyz, R2, R0;
ADD result.texcoord[2].xyz, R0, R1;
MOV R1.xyz, c[13];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[31].w, -vertex.position;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R1, c[15];
MUL R0.xyz, R0, vertex.attrib[14].w;
DP4 R3.z, R1, c[11];
DP4 R3.y, R1, c[10];
DP4 R3.x, R1, c[9];
DP3 result.texcoord[1].y, R3, R0;
DP3 result.texcoord[3].y, R0, R2;
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R1.xyz, R0.xyww, c[0].z;
MUL R1.y, R1, c[14].x;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[3].z, vertex.normal, R2;
DP3 result.texcoord[3].x, vertex.attrib[14], R2;
ADD result.texcoord[4].xy, R1, R1.z;
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[4].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[33].xyxy, c[33];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[32], c[32].zwzw;
END
# 81 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_4LightPosX0]
Vector 17 [unity_4LightPosY0]
Vector 18 [unity_4LightPosZ0]
Vector 19 [unity_4LightAtten0]
Vector 20 [unity_LightColor0]
Vector 21 [unity_LightColor1]
Vector 22 [unity_LightColor2]
Vector 23 [unity_LightColor3]
Vector 24 [unity_SHAr]
Vector 25 [unity_SHAg]
Vector 26 [unity_SHAb]
Vector 27 [unity_SHBr]
Vector 28 [unity_SHBg]
Vector 29 [unity_SHBb]
Vector 30 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 31 [unity_Scale]
Vector 32 [_MainTex_ST]
Vector 33 [_BodyBumpTex_ST]
"vs_2_0
; 84 ALU
def c34, 1.00000000, 0.00000000, 0.50000000, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r3.xyz, v2, c31.w
dp4 r0.x, v0, c5
add r1, -r0.x, c17
dp3 r3.w, r3, c5
dp3 r4.x, r3, c4
dp3 r3.x, r3, c6
mul r2, r3.w, r1
dp4 r0.x, v0, c4
add r0, -r0.x, c16
mul r1, r1, r1
mov r4.z, r3.x
mad r2, r4.x, r0, r2
mov r4.w, c34.x
dp4 r4.y, v0, c6
mad r1, r0, r0, r1
add r0, -r4.y, c18
mad r1, r0, r0, r1
mad r0, r3.x, r0, r2
mul r2, r1, c19
mov r4.y, r3.w
rsq r1.x, r1.x
rsq r1.y, r1.y
rsq r1.w, r1.w
rsq r1.z, r1.z
mul r0, r0, r1
add r1, r2, c34.x
dp4 r2.z, r4, c26
dp4 r2.y, r4, c25
dp4 r2.x, r4, c24
rcp r1.x, r1.x
rcp r1.y, r1.y
rcp r1.w, r1.w
rcp r1.z, r1.z
max r0, r0, c34.y
mul r0, r0, r1
mul r1.xyz, r0.y, c21
mad r1.xyz, r0.x, c20, r1
mad r0.xyz, r0.z, c22, r1
mad r1.xyz, r0.w, c23, r0
mul r0, r4.xyzz, r4.yzzx
mul r1.w, r3, r3
dp4 r3.z, r0, c29
dp4 r3.y, r0, c28
dp4 r3.x, r0, c27
mad r1.w, r4.x, r4.x, -r1
mul r0.xyz, r1.w, c30
add r2.xyz, r2, r3
add r0.xyz, r2, r0
add oT2.xyz, r0, r1
mov r1.w, c34.x
mov r1.xyz, c12
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
mad r3.xyz, r0, c31.w, -v0
mov r1.xyz, v1
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r1.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c15, r0
mov r0, c8
dp4 r4.x, c15, r0
mov r1, c9
dp4 r4.y, c15, r1
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c34.z
mul r1.y, r1, c13.x
dp3 oT1.y, r4, r2
dp3 oT3.y, r2, r3
dp3 oT1.z, v2, r4
dp3 oT1.x, r4, v1
dp3 oT3.z, v2, r3
dp3 oT3.x, v1, r3
mad oT4.xy, r1.z, c14.zwzw, r1
mov oPos, r0
mov oD0, v5
mov oT4.zw, r0
mad oT0.zw, v4.xyxy, c33.xyxy, c33
mad oT0.xy, v3, c32, c32.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 71 instructions, 8 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedilebkcjoagdhehllflpoajhhifdknfdjabaaaaaaceamaaaaadaaaaaa
cmaaaaaapeaaaaaamiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheommaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaamfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklfdeieefcfeakaaaaeaaaabaajfacaaaafjaaaaaeegiocaaa
aaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagiaaaaacaiaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaa
egiacaaaaaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaadcaaaaalmccabaaa
abaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaakgiocaaaaaaaaaaa
amaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaahhcaabaaa
abaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
jgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaa
acaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaacaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahcccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaah
bccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaaheccabaaa
adaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaaaaaaiadpdiaaaaaihcaabaaaadaaaaaaegbcbaaaacaaaaaapgipcaaa
adaaaaaabeaaaaaadiaaaaaihcaabaaaaeaaaaaafgafbaaaadaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaaklcaabaaaadaaaaaaegiicaaaadaaaaaaamaaaaaa
agaabaaaadaaaaaaegaibaaaaeaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
adaaaaaaaoaaaaaakgakbaaaadaaaaaaegadbaaaadaaaaaabbaaaaaibcaabaaa
adaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaacaaaaaabbaaaaaiccaabaaa
adaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaacaaaaaabbaaaaaiecaabaaa
adaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaacaaaaaadiaaaaahpcaabaaa
aeaaaaaajgacbaaaacaaaaaaegakbaaaacaaaaaabbaaaaaibcaabaaaafaaaaaa
egiocaaaacaaaaaabfaaaaaaegaobaaaaeaaaaaabbaaaaaiccaabaaaafaaaaaa
egiocaaaacaaaaaabgaaaaaaegaobaaaaeaaaaaabbaaaaaiecaabaaaafaaaaaa
egiocaaaacaaaaaabhaaaaaaegaobaaaaeaaaaaaaaaaaaahhcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaafaaaaaadiaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaadaaaaaa
egiccaaaacaaaaaabiaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaadiaaaaai
hcaabaaaaeaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
hcaabaaaaeaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aeaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaeaaaaaaaaaaaaajpcaabaaaafaaaaaa
fgafbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaadaaaaaadiaaaaahpcaabaaa
agaaaaaafgafbaaaacaaaaaaegaobaaaafaaaaaadiaaaaahpcaabaaaafaaaaaa
egaobaaaafaaaaaaegaobaaaafaaaaaaaaaaaaajpcaabaaaahaaaaaaagaabaia
ebaaaaaaaeaaaaaaegiocaaaacaaaaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaa
kgakbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaaeaaaaaadcaaaaajpcaabaaa
agaaaaaaegaobaaaahaaaaaaagaabaaaacaaaaaaegaobaaaagaaaaaadcaaaaaj
pcaabaaaacaaaaaaegaobaaaaeaaaaaakgakbaaaacaaaaaaegaobaaaagaaaaaa
dcaaaaajpcaabaaaafaaaaaaegaobaaaahaaaaaaegaobaaaahaaaaaaegaobaaa
afaaaaaadcaaaaajpcaabaaaaeaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaa
egaobaaaafaaaaaaeeaaaaafpcaabaaaafaaaaaaegaobaaaaeaaaaaadcaaaaan
pcaabaaaaeaaaaaaegaobaaaaeaaaaaaegiocaaaacaaaaaaafaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaoaaaaakpcaabaaaaeaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpegaobaaaaeaaaaaadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaafaaaaaadeaaaaakpcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaah
pcaabaaaacaaaaaaegaobaaaaeaaaaaaegaobaaaacaaaaaadiaaaaaihcaabaaa
aeaaaaaafgafbaaaacaaaaaaegiccaaaacaaaaaaahaaaaaadcaaaaakhcaabaaa
aeaaaaaaegiccaaaacaaaaaaagaaaaaaagaabaaaacaaaaaaegacbaaaaeaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaakgakbaaaacaaaaaa
egacbaaaaeaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaajaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaahhccabaaaaeaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaaabaaaaaa
aeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaacaaaaaadcaaaaal
hcaabaaaacaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
adaaaaaabdaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaapgipcaaa
adaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaagaaaaaakgaobaaa
aaaaaaaaaaaaaaahdccabaaaagaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_8;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  highp float vC_17;
  mediump vec3 x3_18;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAr, normal_16);
  x1_20.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAg, normal_16);
  x1_20.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAb, normal_16);
  x1_20.z = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_16.xyzz * normal_16.yzzx);
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBr, tmpvar_24);
  x2_19.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBg, tmpvar_24);
  x2_19.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBb, tmpvar_24);
  x2_19.z = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y));
  vC_17 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = (unity_SHC.xyz * vC_17);
  x3_18 = tmpvar_29;
  tmpvar_15 = ((x1_20 + x2_19) + x3_18);
  shlight_3 = tmpvar_15;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_30.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_30.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_30.z);
  highp vec4 tmpvar_34;
  tmpvar_34 = (((tmpvar_31 * tmpvar_31) + (tmpvar_32 * tmpvar_32)) + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_35;
  tmpvar_35 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_31 * tmpvar_8.x) + (tmpvar_32 * tmpvar_8.y)) + (tmpvar_33 * tmpvar_8.z)) * inversesqrt(tmpvar_34))) * (1.0/((1.0 + (tmpvar_34 * unity_4LightAtten0)))));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_35.x) + (unity_LightColor[1].xyz * tmpvar_35.y)) + (unity_LightColor[2].xyz * tmpvar_35.z)) + (unity_LightColor[3].xyz * tmpvar_35.w)));
  tmpvar_6 = tmpvar_36;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_11 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_9 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BodyBumpTex, tmpvar_17).xyz * 2.0) - 1.0);
  bodyBump_7 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_6 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp float tmpvar_27;
  mediump float lightShadowDataX_28;
  highp float dist_29;
  lowp float tmpvar_30;
  tmpvar_30 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = max (float((dist_29 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_28);
  tmpvar_27 = tmpvar_32;
  lowp vec4 c_33;
  lowp float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD1));
  highp vec3 tmpvar_35;
  tmpvar_35 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_34) * (tmpvar_27 * 2.0));
  c_33.xyz = tmpvar_35;
  c_33.w = 0.0;
  c_1.w = c_33.w;
  c_1.xyz = (c_33.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_8;
  tmpvar_8[0] = _Object2World[0].xyz;
  tmpvar_8[1] = _Object2World[1].xyz;
  tmpvar_8[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1.xyz;
  tmpvar_11 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_2.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_2.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_2.z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_9;
  mediump vec3 tmpvar_16;
  mediump vec4 normal_17;
  normal_17 = tmpvar_15;
  highp float vC_18;
  mediump vec3 x3_19;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAr, normal_17);
  x1_21.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAg, normal_17);
  x1_21.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHAb, normal_17);
  x1_21.z = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_17.xyzz * normal_17.yzzx);
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBr, tmpvar_25);
  x2_20.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBg, tmpvar_25);
  x2_20.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHBb, tmpvar_25);
  x2_20.z = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = ((normal_17.x * normal_17.x) - (normal_17.y * normal_17.y));
  vC_18 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (unity_SHC.xyz * vC_18);
  x3_19 = tmpvar_30;
  tmpvar_16 = ((x1_21 + x2_20) + x3_19);
  shlight_3 = tmpvar_16;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_31.z);
  highp vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_32 * tmpvar_9.x) + (tmpvar_33 * tmpvar_9.y)) + (tmpvar_34 * tmpvar_9.z)) * inversesqrt(tmpvar_35))) * (1.0/((1.0 + (tmpvar_35 * unity_4LightAtten0)))));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y)) + (unity_LightColor[2].xyz * tmpvar_36.z)) + (unity_LightColor[3].xyz * tmpvar_36.w)));
  tmpvar_6 = tmpvar_37;
  highp vec4 o_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_40;
  tmpvar_40.x = tmpvar_39.x;
  tmpvar_40.y = (tmpvar_39.y * _ProjectionParams.x);
  o_38.xy = (tmpvar_40 + tmpvar_39.w);
  o_38.zw = tmpvar_7.zw;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_12 * (((_World2Object * tmpvar_14).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = o_38;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 normal_14;
  normal_14.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_14.z = sqrt((1.0 - clamp (dot (normal_14.xy, normal_14.xy), 0.0, 1.0)));
  trimBumpTex_9 = normal_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 normal_19;
  normal_19.xy = ((texture2D (_BodyBumpTex, tmpvar_17).wy * 2.0) - 1.0);
  normal_19.z = sqrt((1.0 - clamp (dot (normal_19.xy, normal_19.xy), 0.0, 1.0)));
  bodyBump_7 = normal_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bumpMap_6 = normal_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  lowp vec4 c_28;
  lowp float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD1));
  highp vec3 tmpvar_30;
  tmpvar_30 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_29) * (tmpvar_27.x * 2.0));
  c_28.xyz = tmpvar_30;
  c_28.w = 0.0;
  c_1.w = c_28.w;
  c_1.xyz = (c_28.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_WorldSpaceLightPos0]
Vector 15 [unity_4LightPosX0]
Vector 16 [unity_4LightPosY0]
Vector 17 [unity_4LightPosZ0]
Vector 18 [unity_4LightAtten0]
Vector 19 [unity_LightColor0]
Vector 20 [unity_LightColor1]
Vector 21 [unity_LightColor2]
Vector 22 [unity_LightColor3]
Vector 23 [unity_SHAr]
Vector 24 [unity_SHAg]
Vector 25 [unity_SHAb]
Vector 26 [unity_SHBr]
Vector 27 [unity_SHBg]
Vector 28 [unity_SHBb]
Vector 29 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 30 [unity_Scale]
Vector 31 [unity_NPOTScale]
Vector 32 [_MainTex_ST]
Vector 33 [_BodyBumpTex_ST]
"agal_vs
c34 1.0 0.0 0.5 0.0
[bc]
adaaaaaaadaaahacabaaaaoeaaaaaaaaboaaaappabaaaaaa mul r3.xyz, a1, c30.w
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.x, a0, c5
bfaaaaaaabaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa neg r1.x, r0.x
abaaaaaaabaaapacabaaaaaaacaaaaaabaaaaaoeabaaaaaa add r1, r1.x, c16
bcaaaaaaadaaaiacadaaaakeacaaaaaaafaaaaoeabaaaaaa dp3 r3.w, r3.xyzz, c5
bcaaaaaaaeaaabacadaaaakeacaaaaaaaeaaaaoeabaaaaaa dp3 r4.x, r3.xyzz, c4
bcaaaaaaadaaabacadaaaakeacaaaaaaagaaaaoeabaaaaaa dp3 r3.x, r3.xyzz, c6
adaaaaaaacaaapacadaaaappacaaaaaaabaaaaoeacaaaaaa mul r2, r3.w, r1
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bfaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa neg r0.x, r0.x
abaaaaaaaaaaapacaaaaaaaaacaaaaaaapaaaaoeabaaaaaa add r0, r0.x, c15
adaaaaaaabaaapacabaaaaoeacaaaaaaabaaaaoeacaaaaaa mul r1, r1, r1
aaaaaaaaaeaaaeacadaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r4.z, r3.x
adaaaaaaafaaapacaeaaaaaaacaaaaaaaaaaaaoeacaaaaaa mul r5, r4.x, r0
abaaaaaaacaaapacafaaaaoeacaaaaaaacaaaaoeacaaaaaa add r2, r5, r2
aaaaaaaaaeaaaiacccaaaaaaabaaaaaaaaaaaaaaaaaaaaaa mov r4.w, c34.x
bdaaaaaaaeaaacacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r4.y, a0, c6
adaaaaaaafaaapacaaaaaaoeacaaaaaaaaaaaaoeacaaaaaa mul r5, r0, r0
abaaaaaaabaaapacafaaaaoeacaaaaaaabaaaaoeacaaaaaa add r1, r5, r1
bfaaaaaaaaaaacacaeaaaaffacaaaaaaaaaaaaaaaaaaaaaa neg r0.y, r4.y
abaaaaaaaaaaapacaaaaaaffacaaaaaabbaaaaoeabaaaaaa add r0, r0.y, c17
adaaaaaaafaaapacaaaaaaoeacaaaaaaaaaaaaoeacaaaaaa mul r5, r0, r0
abaaaaaaabaaapacafaaaaoeacaaaaaaabaaaaoeacaaaaaa add r1, r5, r1
adaaaaaaaaaaapacadaaaaaaacaaaaaaaaaaaaoeacaaaaaa mul r0, r3.x, r0
abaaaaaaaaaaapacaaaaaaoeacaaaaaaacaaaaoeacaaaaaa add r0, r0, r2
adaaaaaaacaaapacabaaaaoeacaaaaaabcaaaaoeabaaaaaa mul r2, r1, c18
aaaaaaaaaeaaacacadaaaappacaaaaaaaaaaaaaaaaaaaaaa mov r4.y, r3.w
akaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r1.x
akaaaaaaabaaacacabaaaaffacaaaaaaaaaaaaaaaaaaaaaa rsq r1.y, r1.y
akaaaaaaabaaaiacabaaaappacaaaaaaaaaaaaaaaaaaaaaa rsq r1.w, r1.w
akaaaaaaabaaaeacabaaaakkacaaaaaaaaaaaaaaaaaaaaaa rsq r1.z, r1.z
adaaaaaaaaaaapacaaaaaaoeacaaaaaaabaaaaoeacaaaaaa mul r0, r0, r1
abaaaaaaabaaapacacaaaaoeacaaaaaaccaaaaaaabaaaaaa add r1, r2, c34.x
bdaaaaaaacaaaeacaeaaaaoeacaaaaaabjaaaaoeabaaaaaa dp4 r2.z, r4, c25
bdaaaaaaacaaacacaeaaaaoeacaaaaaabiaaaaoeabaaaaaa dp4 r2.y, r4, c24
bdaaaaaaacaaabacaeaaaaoeacaaaaaabhaaaaoeabaaaaaa dp4 r2.x, r4, c23
afaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rcp r1.x, r1.x
afaaaaaaabaaacacabaaaaffacaaaaaaaaaaaaaaaaaaaaaa rcp r1.y, r1.y
afaaaaaaabaaaiacabaaaappacaaaaaaaaaaaaaaaaaaaaaa rcp r1.w, r1.w
afaaaaaaabaaaeacabaaaakkacaaaaaaaaaaaaaaaaaaaaaa rcp r1.z, r1.z
ahaaaaaaaaaaapacaaaaaaoeacaaaaaaccaaaaffabaaaaaa max r0, r0, c34.y
adaaaaaaaaaaapacaaaaaaoeacaaaaaaabaaaaoeacaaaaaa mul r0, r0, r1
adaaaaaaabaaahacaaaaaaffacaaaaaabeaaaaoeabaaaaaa mul r1.xyz, r0.y, c20
adaaaaaaafaaahacaaaaaaaaacaaaaaabdaaaaoeabaaaaaa mul r5.xyz, r0.x, c19
abaaaaaaabaaahacafaaaakeacaaaaaaabaaaakeacaaaaaa add r1.xyz, r5.xyzz, r1.xyzz
adaaaaaaaaaaahacaaaaaakkacaaaaaabfaaaaoeabaaaaaa mul r0.xyz, r0.z, c21
abaaaaaaaaaaahacaaaaaakeacaaaaaaabaaaakeacaaaaaa add r0.xyz, r0.xyzz, r1.xyzz
adaaaaaaabaaahacaaaaaappacaaaaaabgaaaaoeabaaaaaa mul r1.xyz, r0.w, c22
abaaaaaaabaaahacabaaaakeacaaaaaaaaaaaakeacaaaaaa add r1.xyz, r1.xyzz, r0.xyzz
adaaaaaaaaaaapacaeaaaakeacaaaaaaaeaaaacjacaaaaaa mul r0, r4.xyzz, r4.yzzx
adaaaaaaabaaaiacadaaaappacaaaaaaadaaaappacaaaaaa mul r1.w, r3.w, r3.w
bdaaaaaaadaaaeacaaaaaaoeacaaaaaabmaaaaoeabaaaaaa dp4 r3.z, r0, c28
bdaaaaaaadaaacacaaaaaaoeacaaaaaablaaaaoeabaaaaaa dp4 r3.y, r0, c27
bdaaaaaaadaaabacaaaaaaoeacaaaaaabkaaaaoeabaaaaaa dp4 r3.x, r0, c26
adaaaaaaafaaaiacaeaaaaaaacaaaaaaaeaaaaaaacaaaaaa mul r5.w, r4.x, r4.x
acaaaaaaabaaaiacafaaaappacaaaaaaabaaaappacaaaaaa sub r1.w, r5.w, r1.w
adaaaaaaaaaaahacabaaaappacaaaaaabnaaaaoeabaaaaaa mul r0.xyz, r1.w, c29
abaaaaaaacaaahacacaaaakeacaaaaaaadaaaakeacaaaaaa add r2.xyz, r2.xyzz, r3.xyzz
abaaaaaaaaaaahacacaaaakeacaaaaaaaaaaaakeacaaaaaa add r0.xyz, r2.xyzz, r0.xyzz
abaaaaaaacaaahaeaaaaaakeacaaaaaaabaaaakeacaaaaaa add v2.xyz, r0.xyzz, r1.xyzz
aaaaaaaaabaaaiacccaaaaaaabaaaaaaaaaaaaaaaaaaaaaa mov r1.w, c34.x
aaaaaaaaabaaahacamaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1.xyz, c12
bdaaaaaaaaaaaeacabaaaaoeacaaaaaaakaaaaoeabaaaaaa dp4 r0.z, r1, c10
bdaaaaaaaaaaacacabaaaaoeacaaaaaaajaaaaoeabaaaaaa dp4 r0.y, r1, c9
bdaaaaaaaaaaabacabaaaaoeacaaaaaaaiaaaaoeabaaaaaa dp4 r0.x, r1, c8
adaaaaaaafaaahacaaaaaakeacaaaaaaboaaaappabaaaaaa mul r5.xyz, r0.xyzz, c30.w
acaaaaaaadaaahacafaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub r3.xyz, r5.xyzz, a0
aaaaaaaaabaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r1.xyz, a5
aaaaaaaaaaaaahacafaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov r0.xyz, a5
adaaaaaaabaaahacabaaaancaaaaaaaaabaaaaajacaaaaaa mul r1.xyz, a1.zxyw, r1.yzxx
adaaaaaaafaaahacabaaaamjaaaaaaaaaaaaaafcacaaaaaa mul r5.xyz, a1.yzxw, r0.zxyy
acaaaaaaabaaahacafaaaakeacaaaaaaabaaaakeacaaaaaa sub r1.xyz, r5.xyzz, r1.xyzz
adaaaaaaacaaahacabaaaakeacaaaaaaafaaaappaaaaaaaa mul r2.xyz, r1.xyzz, a5.w
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaaeaaaeacaoaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r4.z, c14, r0
aaaaaaaaaaaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c8
bdaaaaaaaeaaabacaoaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r4.x, c14, r0
aaaaaaaaabaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c9
bdaaaaaaaeaaacacaoaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r4.y, c14, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 r0.w, a0, c3
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 r0.z, a0, c2
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 r0.x, a0, c0
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 r0.y, a0, c1
adaaaaaaabaaahacaaaaaapeacaaaaaaccaaaakkabaaaaaa mul r1.xyz, r0.xyww, c34.z
adaaaaaaabaaacacabaaaaffacaaaaaaanaaaaaaabaaaaaa mul r1.y, r1.y, c13.x
abaaaaaaabaaadacabaaaafeacaaaaaaabaaaakkacaaaaaa add r1.xy, r1.xyyy, r1.z
bcaaaaaaabaaacaeaeaaaakeacaaaaaaacaaaakeacaaaaaa dp3 v1.y, r4.xyzz, r2.xyzz
bcaaaaaaadaaacaeacaaaakeacaaaaaaadaaaakeacaaaaaa dp3 v3.y, r2.xyzz, r3.xyzz
bcaaaaaaabaaaeaeabaaaaoeaaaaaaaaaeaaaakeacaaaaaa dp3 v1.z, a1, r4.xyzz
bcaaaaaaabaaabaeaeaaaakeacaaaaaaafaaaaoeaaaaaaaa dp3 v1.x, r4.xyzz, a5
bcaaaaaaadaaaeaeabaaaaoeaaaaaaaaadaaaakeacaaaaaa dp3 v3.z, a1, r3.xyzz
bcaaaaaaadaaabaeafaaaaoeaaaaaaaaadaaaakeacaaaaaa dp3 v3.x, a5, r3.xyzz
adaaaaaaaeaaadaeabaaaafeacaaaaaabpaaaaoeabaaaaaa mul v4.xy, r1.xyyy, c31
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
aaaaaaaaahaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v7, a2
aaaaaaaaaeaaamaeaaaaaaopacaaaaaaaaaaaaaaaaaaaaaa mov v4.zw, r0.wwzw
adaaaaaaafaaamacaeaaaaeeaaaaaaaacbaaaaeeabaaaaaa mul r5.zw, a4.xyxy, c33.xyxy
abaaaaaaaaaaamaeafaaaaopacaaaaaacbaaaaoeabaaaaaa add v0.zw, r5.wwzw, c33
adaaaaaaafaaadacadaaaaoeaaaaaaaacaaaaaoeabaaaaaa mul r5.xy, a3, c32
abaaaaaaaaaaadaeafaaaafeacaaaaaacaaaaaooabaaaaaa add v0.xy, r5.xyyy, c32.zwzw
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 71 instructions, 8 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedemdjhfkpoeocigedlhiifedanoimlnncabaaaaaagebcaaaaaeaaaaaa
daaaaaaagmagaaaamibaaaaajabbaaaaebgpgodjdeagaaaadeagaaaaaaacpopp
liafaaaahmaaaaaaahaaceaaaaaahiaaaaaahiaaaaaaceaaabaahiaaaaaaalaa
acaaabaaaaaaaaaaabaaaeaaacaaadaaaaaaaaaaacaaaaaaabaaafaaaaaaaaaa
acaaacaaaiaaagaaaaaaaaaaacaabcaaahaaaoaaaaaaaaaaadaaaaaaaeaabfaa
aaaaaaaaadaaamaaajaabjaaaaaaaaaaaaaaaaaaaaacpoppfbaaaaafccaaapka
aaaaiadpaaaaaaaaaaaaaadpaaaaaaaabpaaaaacafaaaaiaaaaaapjabpaaaaac
afaaabiaabaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapja
bpaaaaacafaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoa
adaaoejaabaaoekaabaaookaaeaaaaaeaaaaamoaaeaaeejaacaaeekaacaaoeka
abaaaaacaaaaapiaafaaoekaafaaaaadabaaahiaaaaaffiaboaaoekaaeaaaaae
abaaahiabnaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiabpaaoekaaaaakkia
abaaoeiaaeaaaaaeaaaaahiacaaaoekaaaaappiaaaaaoeiaaiaaaaadacaaaboa
abaaoejaaaaaoeiaabaaaaacabaaahiaacaaoejaafaaaaadacaaahiaabaancia
abaamjjaaeaaaaaeabaaahiaabaamjiaabaancjaacaaoeibafaaaaadabaaahia
abaaoeiaabaappjaaiaaaaadacaaacoaabaaoeiaaaaaoeiaaiaaaaadacaaaeoa
acaaoejaaaaaoeiaabaaaaacaaaaahiaadaaoekaafaaaaadacaaahiaaaaaffia
boaaoekaaeaaaaaeaaaaaliabnaakekaaaaaaaiaacaakeiaaeaaaaaeaaaaahia
bpaaoekaaaaakkiaaaaapeiaacaaaaadaaaaahiaaaaaoeiacaaaoekaaeaaaaae
aaaaahiaaaaaoeiacbaappkaaaaaoejbaiaaaaadaeaaaboaabaaoejaaaaaoeia
aiaaaaadaeaaacoaabaaoeiaaaaaoeiaaiaaaaadaeaaaeoaacaaoejaaaaaoeia
afaaaaadaaaaahiaaaaaffjabkaaoekaaeaaaaaeaaaaahiabjaaoekaaaaaaaja
aaaaoeiaaeaaaaaeaaaaahiablaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaahia
bmaaoekaaaaappjaaaaaoeiaacaaaaadabaaapiaaaaakkibaiaaoekaacaaaaad
acaaapiaaaaaaaibagaaoekaacaaaaadaaaaapiaaaaaffibahaaoekaafaaaaad
adaaahiaacaaoejacbaappkaafaaaaadaeaaahiaadaaffiabkaaoekaaeaaaaae
adaaaliabjaakekaadaaaaiaaeaakeiaaeaaaaaeadaaahiablaaoekaadaakkia
adaapeiaafaaaaadaeaaapiaaaaaoeiaadaaffiaafaaaaadaaaaapiaaaaaoeia
aaaaoeiaaeaaaaaeaaaaapiaacaaoeiaacaaoeiaaaaaoeiaaeaaaaaeacaaapia
acaaoeiaadaaaaiaaeaaoeiaaeaaaaaeacaaapiaabaaoeiaadaakkiaacaaoeia
aeaaaaaeaaaaapiaabaaoeiaabaaoeiaaaaaoeiaahaaaaacabaaabiaaaaaaaia
ahaaaaacabaaaciaaaaaffiaahaaaaacabaaaeiaaaaakkiaahaaaaacabaaaiia
aaaappiaabaaaaacaeaaabiaccaaaakaaeaaaaaeaaaaapiaaaaaoeiaajaaoeka
aeaaaaiaafaaaaadabaaapiaabaaoeiaacaaoeiaalaaaaadabaaapiaabaaoeia
ccaaffkaagaaaaacacaaabiaaaaaaaiaagaaaaacacaaaciaaaaaffiaagaaaaac
acaaaeiaaaaakkiaagaaaaacacaaaiiaaaaappiaafaaaaadaaaaapiaabaaoeia
acaaoeiaafaaaaadabaaahiaaaaaffiaalaaoekaaeaaaaaeabaaahiaakaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiaamaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiaanaaoekaaaaappiaaaaaoeiaabaaaaacadaaaiiaccaaaakaajaaaaad
abaaabiaaoaaoekaadaaoeiaajaaaaadabaaaciaapaaoekaadaaoeiaajaaaaad
abaaaeiabaaaoekaadaaoeiaafaaaaadacaaapiaadaacjiaadaakeiaajaaaaad
aeaaabiabbaaoekaacaaoeiaajaaaaadaeaaaciabcaaoekaacaaoeiaajaaaaad
aeaaaeiabdaaoekaacaaoeiaacaaaaadabaaahiaabaaoeiaaeaaoeiaafaaaaad
aaaaaiiaadaaffiaadaaffiaaeaaaaaeaaaaaiiaadaaaaiaadaaaaiaaaaappib
aeaaaaaeabaaahiabeaaoekaaaaappiaabaaoeiaacaaaaadadaaahoaaaaaoeia
abaaoeiaafaaaaadaaaaapiaaaaaffjabgaaoekaaeaaaaaeaaaaapiabfaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiabhaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiabiaaoekaaaaappjaaaaaoeiaafaaaaadabaaabiaaaaaffiaaeaaaaka
afaaaaadabaaaiiaabaaaaiaccaakkkaafaaaaadabaaafiaaaaapeiaccaakkka
acaaaaadafaaadoaabaakkiaabaaomiaaeaaaaaeaaaaadmaaaaappiaaaaaoeka
aaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacafaaamoaaaaaoeiaabaaaaac
abaaapoaafaaoejappppaaaafdeieefcfeakaaaaeaaaabaajfacaaaafjaaaaae
egiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaa
gfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagiaaaaac
aiaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaadcaaaaal
mccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaakgiocaaa
aaaaaaaaamaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaah
hcaabaaaabaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaaabaaaaaadiaaaaaj
hcaabaaaacaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaa
aaaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaa
acaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
baaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaah
eccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaa
acaaaaaaabeaaaaaaaaaiadpdiaaaaaihcaabaaaadaaaaaaegbcbaaaacaaaaaa
pgipcaaaadaaaaaabeaaaaaadiaaaaaihcaabaaaaeaaaaaafgafbaaaadaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaaklcaabaaaadaaaaaaegiicaaaadaaaaaa
amaaaaaaagaabaaaadaaaaaaegaibaaaaeaaaaaadcaaaaakhcaabaaaacaaaaaa
egiccaaaadaaaaaaaoaaaaaakgakbaaaadaaaaaaegadbaaaadaaaaaabbaaaaai
bcaabaaaadaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaacaaaaaabbaaaaai
ccaabaaaadaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaacaaaaaabbaaaaai
ecaabaaaadaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaacaaaaaadiaaaaah
pcaabaaaaeaaaaaajgacbaaaacaaaaaaegakbaaaacaaaaaabbaaaaaibcaabaaa
afaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaaeaaaaaabbaaaaaiccaabaaa
afaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaaeaaaaaabbaaaaaiecaabaaa
afaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaaeaaaaaaaaaaaaahhcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaadiaaaaahicaabaaaabaaaaaa
bkaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaa
acaaaaaaakaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadcaaaaakhcaabaaa
adaaaaaaegiccaaaacaaaaaabiaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaihcaabaaaaeaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaeaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaeaaaaaaaaaaaaajpcaabaaa
afaaaaaafgafbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaadaaaaaadiaaaaah
pcaabaaaagaaaaaafgafbaaaacaaaaaaegaobaaaafaaaaaadiaaaaahpcaabaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaafaaaaaaaaaaaaajpcaabaaaahaaaaaa
agaabaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaacaaaaaaaaaaaaajpcaabaaa
aeaaaaaakgakbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaaeaaaaaadcaaaaaj
pcaabaaaagaaaaaaegaobaaaahaaaaaaagaabaaaacaaaaaaegaobaaaagaaaaaa
dcaaaaajpcaabaaaacaaaaaaegaobaaaaeaaaaaakgakbaaaacaaaaaaegaobaaa
agaaaaaadcaaaaajpcaabaaaafaaaaaaegaobaaaahaaaaaaegaobaaaahaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaaeaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaegaobaaaafaaaaaaeeaaaaafpcaabaaaafaaaaaaegaobaaaaeaaaaaa
dcaaaaanpcaabaaaaeaaaaaaegaobaaaaeaaaaaaegiocaaaacaaaaaaafaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaoaaaaakpcaabaaaaeaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpegaobaaaaeaaaaaadiaaaaah
pcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaafaaaaaadeaaaaakpcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
diaaaaahpcaabaaaacaaaaaaegaobaaaaeaaaaaaegaobaaaacaaaaaadiaaaaai
hcaabaaaaeaaaaaafgafbaaaacaaaaaaegiccaaaacaaaaaaahaaaaaadcaaaaak
hcaabaaaaeaaaaaaegiccaaaacaaaaaaagaaaaaaagaabaaaacaaaaaaegacbaaa
aeaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaakgakbaaa
acaaaaaaegacbaaaaeaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaa
ajaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaahhccabaaaaeaaaaaa
egacbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaa
abaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaacaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaa
aeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaa
pgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaa
afaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbccabaaaafaaaaaa
egbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaa
acaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaa
akiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaagaaaaaa
kgaobaaaaaaaaaaaaaaaaaahdccabaaaagaaaaaakgakbaaaabaaaaaamgaabaaa
abaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
laaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaaabaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfcenebemaa
feeffiedepepfceeaaedepemepfcaaklepfdeheommaaaaaaahaaaaaaaiaaaaaa
laaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaabaaaaaaapaaaaaamfaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
acaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaa
lmaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaaadaaaaaa
aaaaaaaaadaaaaaaafaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaa
agaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepem
epfcaakl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 483
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 507
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 95
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 99
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 103
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 107
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 111
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 115
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 485
v2f_surf vert_surf( in appdata_full v ) {
    #line 487
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 491
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 495
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 499
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    #line 503
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 483
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 507
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 458
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 462
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 466
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 470
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 388
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 507
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 511
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 515
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 519
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 523
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_12).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_9 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BodyBumpTex, tmpvar_17).xyz * 2.0) - 1.0);
  bodyBump_7 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_6 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp float shadow_27;
  lowp float tmpvar_28;
  tmpvar_28 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  highp float tmpvar_29;
  tmpvar_29 = (_LightShadowData.x + (tmpvar_28 * (1.0 - _LightShadowData.x)));
  shadow_27 = tmpvar_29;
  lowp vec4 c_30;
  lowp float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD1));
  highp vec3 tmpvar_32;
  tmpvar_32 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_31) * (shadow_27 * 2.0));
  c_30.xyz = tmpvar_32;
  c_30.w = 0.0;
  c_1.w = c_30.w;
  c_1.xyz = (c_30.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 483
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 485
v2f_surf vert_surf( in appdata_full v ) {
    #line 487
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 491
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 495
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 499
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 503
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 483
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 458
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 462
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 466
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 470
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 505
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 507
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 511
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 515
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 519
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_Lightmap;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _MainTex;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  mediump float trimMask_4;
  highp float bodyOcc_5;
  highp vec3 trimDifTex_6;
  highp vec3 mainTex_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_6 = tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10.x = _AtlasScaleX;
  tmpvar_10.y = _AtlasScaleY;
  highp vec2 tmpvar_11;
  tmpvar_11.x = _AtlasOffsetX;
  tmpvar_11.y = _AtlasOffsetY;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.zw * tmpvar_10) + tmpvar_11);
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_BodyOcclusionTex, tmpvar_12).x;
  bodyOcc_5 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = tmpvar_2.x;
  trimMask_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (mainTex_7 * _Color);
  mainTex_7 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (trimDifTex_6 * _TrimColor);
  trimDifTex_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (mix (tmpvar_15, tmpvar_16, vec3(trimMask_4)) * bodyOcc_5);
  tmpvar_3 = tmpvar_17;
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  c_1.xyz = (tmpvar_3 * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_18 * 2.0))));
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 481
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 484
v2f_surf vert_surf( in appdata_full v ) {
    #line 486
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 490
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 494
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 498
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 481
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D unity_Lightmap;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 458
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 462
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 466
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 470
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 501
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 503
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 507
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 511
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 515
    lowp vec4 c = vec4( 0.0);
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    #line 519
    c.w = o.Alpha;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_6 * (((_World2Object * tmpvar_7).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_9 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BodyBumpTex, tmpvar_17).xyz * 2.0) - 1.0);
  bodyBump_7 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_6 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp float shadow_27;
  lowp float tmpvar_28;
  tmpvar_28 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_29;
  tmpvar_29 = (_LightShadowData.x + (tmpvar_28 * (1.0 - _LightShadowData.x)));
  shadow_27 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_31;
  mediump vec3 viewDir_32;
  viewDir_32 = tmpvar_30;
  highp float nh_33;
  mat3 tmpvar_34;
  tmpvar_34[0].x = 0.816497;
  tmpvar_34[0].y = -0.408248;
  tmpvar_34[0].z = -0.408248;
  tmpvar_34[1].x = 0.0;
  tmpvar_34[1].y = 0.707107;
  tmpvar_34[1].z = -0.707107;
  tmpvar_34[2].x = 0.57735;
  tmpvar_34[2].y = 0.57735;
  tmpvar_34[2].z = 0.57735;
  mediump vec3 normal_35;
  normal_35 = tmpvar_4;
  mediump vec3 scalePerBasisVector_36;
  mediump vec3 lm_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_37 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_36 = tmpvar_39;
  lm_37 = (lm_37 * dot (clamp ((tmpvar_34 * normal_35), 0.0, 1.0), scalePerBasisVector_36));
  vec3 v_40;
  v_40.x = tmpvar_34[0].x;
  v_40.y = tmpvar_34[1].x;
  v_40.z = tmpvar_34[2].x;
  vec3 v_41;
  v_41.x = tmpvar_34[0].y;
  v_41.y = tmpvar_34[1].y;
  v_41.z = tmpvar_34[2].y;
  vec3 v_42;
  v_42.x = tmpvar_34[0].z;
  v_42.y = tmpvar_34[1].z;
  v_42.z = tmpvar_34[2].z;
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_4, normalize((normalize((((scalePerBasisVector_36.x * v_40) + (scalePerBasisVector_36.y * v_41)) + (scalePerBasisVector_36.z * v_42))) + viewDir_32))));
  nh_33 = tmpvar_43;
  highp vec4 tmpvar_44;
  tmpvar_44.xyz = lm_37;
  tmpvar_44.w = pow (nh_33, 0.0);
  tmpvar_31 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45 = vec3((shadow_27 * 2.0));
  mediump vec3 tmpvar_46;
  tmpvar_46 = (tmpvar_3 * min (tmpvar_31.xyz, tmpvar_45));
  c_1.xyz = tmpvar_46;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 482
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 503
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 485
v2f_surf vert_surf( in appdata_full v ) {
    #line 487
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 491
    o.color = v.color;
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 495
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 499
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec2(xl_retval.lmap);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 482
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 503
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * _SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 458
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 462
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 466
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 470
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 505
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 507
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 511
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 515
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 519
    lowp vec4 c = vec4( 0.0);
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    #line 523
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    c.xyz += specColor;
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    c.w = o.Alpha;
    #line 527
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lmap = vec2(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_8;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  highp float vC_17;
  mediump vec3 x3_18;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAr, normal_16);
  x1_20.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAg, normal_16);
  x1_20.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHAb, normal_16);
  x1_20.z = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_16.xyzz * normal_16.yzzx);
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBr, tmpvar_24);
  x2_19.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBg, tmpvar_24);
  x2_19.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHBb, tmpvar_24);
  x2_19.z = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y));
  vC_17 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = (unity_SHC.xyz * vC_17);
  x3_18 = tmpvar_29;
  tmpvar_15 = ((x1_20 + x2_19) + x3_18);
  shlight_3 = tmpvar_15;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_30.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_30.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_30.z);
  highp vec4 tmpvar_34;
  tmpvar_34 = (((tmpvar_31 * tmpvar_31) + (tmpvar_32 * tmpvar_32)) + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_35;
  tmpvar_35 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_31 * tmpvar_8.x) + (tmpvar_32 * tmpvar_8.y)) + (tmpvar_33 * tmpvar_8.z)) * inversesqrt(tmpvar_34))) * (1.0/((1.0 + (tmpvar_34 * unity_4LightAtten0)))));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_35.x) + (unity_LightColor[1].xyz * tmpvar_35.y)) + (unity_LightColor[2].xyz * tmpvar_35.z)) + (unity_LightColor[3].xyz * tmpvar_35.w)));
  tmpvar_6 = tmpvar_36;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (tmpvar_11 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp float bodyOcc_8;
  highp vec3 trimBumpTex_9;
  highp vec3 trimDifTex_10;
  highp vec3 mainTex_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_10 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_9 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BodyBumpTex, tmpvar_17).xyz * 2.0) - 1.0);
  bodyBump_7 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_6 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = tmpvar_2.x;
  trimMask_5 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mainTex_11 * _Color);
  mainTex_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (trimDifTex_10 * _TrimColor);
  trimDifTex_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mix (tmpvar_22, tmpvar_23, vec3(trimMask_5)) * bodyOcc_8);
  tmpvar_3 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.z = 0.0;
  tmpvar_25.x = _BumpPower;
  tmpvar_25.y = _BumpPower;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_9, vec3(trimMask_5)) * tmpvar_25)));
  tmpvar_4 = tmpvar_26;
  lowp float shadow_27;
  lowp float tmpvar_28;
  tmpvar_28 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  highp float tmpvar_29;
  tmpvar_29 = (_LightShadowData.x + (tmpvar_28 * (1.0 - _LightShadowData.x)));
  shadow_27 = tmpvar_29;
  lowp vec4 c_30;
  lowp float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD1));
  highp vec3 tmpvar_32;
  tmpvar_32 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_31) * (shadow_27 * 2.0));
  c_30.xyz = tmpvar_32;
  c_30.w = 0.0;
  c_1.w = c_30.w;
  c_1.xyz = (c_30.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 483
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 507
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 95
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 99
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 103
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 107
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 111
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 115
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 485
v2f_surf vert_surf( in appdata_full v ) {
    #line 487
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 491
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 495
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 499
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    #line 503
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 472
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 384
#line 397
#line 417
#line 433
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 437
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 441
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 445
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 454
#line 483
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 507
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 390
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 392
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 458
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 462
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 466
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 470
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 384
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 388
    return shadow;
}
#line 507
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 511
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 515
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 519
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 523
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 6
//   opengl - ALU: 17 to 60, TEX: 4 to 9
//   d3d9 - ALU: 16 to 58, TEX: 4 to 9
//   d3d11 - ALU: 8 to 37, TEX: 4 to 9, FLOW: 1 to 1
//   d3d11_9x - ALU: 8 to 37, TEX: 4 to 9, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 48 ALU, 6 TEX
PARAM c[9] = { program.local[0..7],
		{ 2, 1, 0 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R4.yw, fragment.texcoord[0], texture[2], 2D;
TEX R3.yw, fragment.texcoord[0], texture[5], 2D;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MAD R3.xy, R3.wyzw, c[8].x, -c[8].y;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD_SAT R1.w, R3.z, R3;
ADD R1.w, -R1, c[8].y;
RSQ R1.w, R1.w;
MAD R4.yz, R4.xwyw, c[8].x, -c[8].y;
MUL R1.xyz, R1, c[6];
MOV R0.w, c[3].x;
MOV R0.z, c[2].x;
RCP R3.z, R1.w;
MOV R0.x, c[4];
MOV R0.y, c[5].x;
MAD R0.xy, fragment.texcoord[0].zwzw, R0, R0.zwzw;
MOV result.color.w, c[8].z;
TEX R2.yw, R0, texture[4], 2D;
TEX R4.x, R0, texture[3], 2D;
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R2.xy, R2.wyzw, c[8].x, -c[8].y;
MUL R2.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.w, R2.z, R2;
MAD R0.xyz, R0, c[7], -R1;
MAD R0.xyz, fragment.color.primary.x, R0, R1;
MUL R2.zw, R4.xyyz, R4.xyyz;
MUL R0.xyz, R0, R4.x;
ADD R0.w, -R0, c[8].y;
ADD_SAT R2.z, R2, R2.w;
ADD R2.z, -R2, c[8].y;
RSQ R2.z, R2.z;
RCP R4.w, R2.z;
ADD R4.yzw, R4, -R3.xxyz;
MAD R3.xyz, fragment.color.primary.x, R4.yzww, R3;
RSQ R0.w, R0.w;
RCP R2.z, R0.w;
MOV R4.yz, c[1].x;
MOV R4.w, c[8].z;
MAD R2.xyz, R3, R4.yzww, R2;
DP3 R0.w, R2, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R2;
DP3 R0.w, R2, fragment.texcoord[1];
MAX R0.w, R0, c[8].z;
MUL R1.xyz, R0, c[0];
MUL R1.xyz, R1, R0.w;
MUL R1.xyz, R1, c[8].x;
MAD result.color.xyz, R0, fragment.texcoord[2], R1;
END
# 48 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
"ps_2_0
; 49 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c8, 2.00000000, -1.00000000, 1.00000000, 0.00000000
dcl t0
dcl v0.x
dcl t1.xyz
dcl t2.xyz
texld r4, t0, s1
texld r3, t0, s0
mov r2.x, c4
mov r2.y, c5.x
mov r1.y, c3.x
mov r1.x, c2
mov r0.x, t0.z
mov r0.y, t0.w
mad r0.xy, r0, r2, r1
texld r2, r0, s4
texld r8, r0, s3
texld r1, t0, s5
texld r0, t0, s2
mov r2.x, r2.w
mad_pp r7.xy, r2, c8.x, c8.y
mul_pp r2.xy, r7, r7
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c8.z
mov r1.x, r1.w
mad_pp r5.xy, r1, c8.x, c8.y
mov r1.x, r0.w
mov r1.y, r0
mad_pp r6.xy, r1, c8.x, c8.y
mul_pp r1.xy, r5, r5
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r6, r6
add_pp_sat r2.x, r2, r2.y
rsq_pp r0.x, r0.x
rcp_pp r7.z, r0.x
add_pp r1.x, -r1, c8.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c8.z
rsq_pp r2.x, r2.x
rcp_pp r5.z, r1.x
rcp_pp r6.z, r2.x
add r1.xyz, r6, -r5
mov r0.xy, c1.x
mov r0.z, c8.w
mad r1.xyz, v0.x, r1, r5
mad r1.xyz, r1, r0, r7
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul r0.xyz, r0.x, r1
dp3_pp r0.x, r0, t1
mul r1.xyz, r3, c6
mad r2.xyz, r4, c7, -r1
mad r1.xyz, v0.x, r2, r1
mul r1.xyz, r1, r8.x
max_pp r0.x, r0, c8.w
mul_pp r2.xyz, r1, c0
mul_pp r0.xyz, r2, r0.x
mul r0.xyz, r0, c8.x
mov_pp r0.w, c8
mad_pp r0.xyz, r1, t2, r0
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
ConstBuffer "$Globals" 144 // 92 used size, 13 vars
Vector 16 [_LightColor0] 4
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 5
SetTexture 2 [_BumpTrimTex] 2D 4
SetTexture 3 [_BodyOcclusionTex] 2D 3
SetTexture 4 [_BodyBumpTex] 2D 2
SetTexture 5 [_BumpMap] 2D 1
// 44 instructions, 4 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediflahlbiamaipbdknnpnegolbknooipbabaaaaaajaahaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
gmagaaaaeaaaaaaajlabaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaa
abaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaa
aeaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaa
adaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaacaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaa
akiacaaaaaaaaaaaadaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaadaaaaaadeaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaaagajbaaa
adaaaaaafgiocaaaaaaaaaaaaeaaaaaadcaaaaalocaabaaaabaaaaaaagajbaaa
acaaaaaaagijcaaaaaaaaaaaafaaaaaafgaobaiaebaaaaaaaaaaaaaadcaaaaaj
ocaabaaaaaaaaaaaagbabaaaacaaaaaafgaobaaaabaaaaaafgaobaaaaaaaaaaa
diaaaaahocaabaaaaaaaaaaaagaabaaaabaaaaaafgaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaajgahbaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaadcaaaaajhccabaaaaaaaaaaa
jgahbaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
ConstBuffer "$Globals" 144 // 92 used size, 13 vars
Vector 16 [_LightColor0] 4
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 5
SetTexture 2 [_BumpTrimTex] 2D 4
SetTexture 3 [_BodyOcclusionTex] 2D 3
SetTexture 4 [_BodyBumpTex] 2D 2
SetTexture 5 [_BumpMap] 2D 1
// 44 instructions, 4 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedmbdpcnkcennaodgimfpkijcoedafjnfcabaaaaaaoaakaaaaaeaaaaaa
daaaaaaahmadaaaapaajaaaakmakaaaaebgpgodjeeadaaaaeeadaaaaaaacpppp
paacaaaafeaaaaaaacaadmaaaaaafeaaaaaafeaaagaaceaaaaaafeaaaaaaaaaa
afababaaaeacacaaadadadaaacaeaeaaabafafaaaaaaabaaabaaaaaaaaaaaaaa
aaaaadaaadaaabaaaaaaaaaaaaacppppfbaaaaafaeaaapkaaaaaaaeaaaaaialp
aaaaaaaaaaaaiadpbpaaaaacaaaaaaiaaaaaaplabpaaaaacaaaaaaiaabaaapla
bpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaachlabpaaaaacaaaaaaja
aaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaacaaaaaajaacaiapkabpaaaaac
aaaaaajaadaiapkabpaaaaacaaaaaajaaeaiapkabpaaaaacaaaaaajaafaiapka
ecaaaaadaaaacpiaaaaaoelaaeaioekaecaaaaadabaacpiaaaaaoelaabaioeka
ecaaaaadacaaapiaaaaaoelaafaioekaecaaaaadadaaapiaaaaaoelaaaaioeka
aeaaaaaeaeaacbiaaaaappiaaeaaaakaaeaaffkaaeaaaaaeaeaacciaaaaaffia
aeaaaakaaeaaffkaaeaaaaaeaaaacbiaabaappiaaeaaaakaaeaaffkaaeaaaaae
aaaacciaabaaffiaaeaaaakaaeaaffkabcaaaaaeabaaadiaabaaaalaaeaaoeia
aaaaoeiaafaaaaadaaaaadiaabaaoeiaabaaaakaafaaaaadabaaabiaaaaakkla
abaappkaafaaaaadabaaaciaaaaapplaacaaaakaacaaaaadabaaadiaabaaoeia
abaamjkaecaaaaadaeaacpiaabaaoeiaacaioekaecaaaaadabaaapiaabaaoeia
adaioekaaeaaaaaeafaacbiaaeaappiaaeaaaakaaeaaffkaaeaaaaaeafaaccia
aeaaffiaaeaaaakaaeaaffkafkaaaaaeaaaadiiaafaaoeiaafaaoeiaaeaakkka
acaaaaadaaaaciiaaaaappibaeaappkaahaaaaacaaaaciiaaaaappiaagaaaaac
afaaceiaaaaappiaabaaaaacaaaaamiaaeaakkkaacaaaaadaaaaahiaaaaaoeia
afaaoeiaceaaaaacaeaachiaaaaaoeiaaiaaaaadacaaciiaaeaaoeiaacaaoela
alaaaaadadaaciiaacaappiaaeaakkkaafaaaaadaaaaadiaadaaoeiaacaamjka
afaaaaadaaaaaeiaadaakkiaacaappkaaeaaaaaeabaaaoiaacaabliaadaablka
aaaablibaeaaaaaeaaaaahiaabaaaalaabaabliaaaaaoeiaafaaaaadaaaachia
abaaaaiaaaaaoeiaafaaaaadabaachiaaaaaoeiaaaaaoekaafaaaaadabaaahia
adaappiaabaaoeiaacaaaaadabaachiaabaaoeiaabaaoeiaaeaaaaaeaaaachia
aaaaoeiaadaaoelaabaaoeiaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefc
gmagaaaaeaaaaaaajlabaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaa
abaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaa
aeaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaa
adaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaacaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaa
akiacaaaaaaaaaaaadaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaadaaaaaadeaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaaagajbaaa
adaaaaaafgiocaaaaaaaaaaaaeaaaaaadcaaaaalocaabaaaabaaaaaaagajbaaa
acaaaaaaagijcaaaaaaaaaaaafaaaaaafgaobaiaebaaaaaaaaaaaaaadcaaaaaj
ocaabaaaaaaaaaaaagbabaaaacaaaaaafgaobaaaabaaaaaafgaobaaaaaaaaaaa
diaaaaahocaabaaaaaaaaaaaagaabaaaabaaaaaafgaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaajgahbaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaadcaaaaajhccabaaaaaaaaaaa
jgahbaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaaaaadoaaaaabejfdeheoleaaaaaaagaaaaaaaiaaaaaa
jiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
acaaaaaaapabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaafaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [unity_Lightmap] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 17 ALU, 4 TEX
PARAM c[8] = { program.local[0..6],
		{ 0, 8 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R2.xyz, fragment.texcoord[0], texture[1], 2D;
MOV R0.z, c[3].x;
MOV R0.w, c[4].x;
MOV R0.y, c[2].x;
MOV R0.x, c[1];
MAD R1.xy, fragment.texcoord[0].zwzw, R0.zwzw, R0;
MOV result.color.w, c[7].x;
TEX R3.x, R1, texture[3], 2D;
TEX R0, fragment.texcoord[1], texture[6], 2D;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R1.xyz, R1, c[5];
MAD R2.xyz, R2, c[6], -R1;
MAD R1.xyz, fragment.color.primary.x, R2, R1;
MUL R1.xyz, R1, R3.x;
MUL R0.xyz, R0.w, R0;
MUL R0.xyz, R0, R1;
MUL result.color.xyz, R0, c[7].y;
END
# 17 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Float 0 [_AtlasOffsetX]
Float 1 [_AtlasOffsetY]
Float 2 [_AtlasScaleX]
Float 3 [_AtlasScaleY]
Vector 4 [_Color]
Vector 5 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [unity_Lightmap] 2D
"ps_2_0
; 16 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
def c6, 8.00000000, 0.00000000, 0, 0
dcl t0
dcl v0.x
dcl t1.xy
mov r2.x, c2
mov r2.y, c3.x
mov r1.y, c1.x
mov r1.x, c0
mov r0.x, t0.z
mov r0.y, t0.w
mad r0.xy, r0, r2, r1
texld r3, r0, s3
texld r0, t1, s6
texld r2, t0, s0
texld r1, t0, s1
mul_pp r0.xyz, r0.w, r0
mul r2.xyz, r2, c4
mad r1.xyz, r1, c5, -r2
mad r1.xyz, v0.x, r1, r2
mul r1.xyz, r1, r3.x
mul_pp r0.xyz, r0, r1
mul_pp r0.xyz, r0, c6.x
mov_pp r0.w, c6.y
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 92 used size, 14 vars
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 2
SetTexture 2 [_BodyOcclusionTex] 2D 1
SetTexture 3 [unity_Lightmap] 2D 3
// 16 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmadaedlnaghbpnaeklfggcpcjnmokhagabaaaaaajmadaaaaadaaaaaa
cmaaaaaaliaaaaaaomaaaaaaejfdeheoieaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahnaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaa
abaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaa
fdfgfpfegbhcghgfheaaklklfdeieefckiacaaaaeaaaaaaakkaaaaaafjaaaaae
egiocaaaaaaaaaaaagaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaajgihcaaaaaaaaaaaaeaaaaaadcaaaaal
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaa
dkiacaaaaaaaaaaaadaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaa
akiacaaaaaaaaaaaaeaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
jgifcaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaagaabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaaaebdiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 92 used size, 14 vars
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 2
SetTexture 2 [_BodyOcclusionTex] 2D 1
SetTexture 3 [unity_Lightmap] 2D 3
// 16 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedmlmmhiobpneiifhmkkclmpfakdagbkniabaaaaaagmafaaaaaeaaaaaa
daaaaaaapmabaaaakmaeaaaadiafaaaaebgpgodjmeabaaaameabaaaaaaacpppp
ieabaaaaeaaaaaaaabaadeaaaaaaeaaaaaaaeaaaaeaaceaaaaaaeaaaaaaaaaaa
acababaaabacacaaadadadaaaaaaadaaadaaaaaaaaaaaaaaaaacppppfbaaaaaf
adaaapkaaaaaaaebaaaaaaaaaaaaaaaaaaaaaaaabpaaaaacaaaaaaiaaaaaapla
bpaaaaacaaaaaaiaabaaaplabpaaaaacaaaaaaiaacaaadlabpaaaaacaaaaaaja
aaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaacaaaaaajaacaiapkabpaaaaac
aaaaaajaadaiapkaafaaaaadaaaaabiaaaaakklaaaaappkaafaaaaadaaaaacia
aaaapplaabaaaakaacaaaaadaaaaadiaaaaaoeiaaaaamjkaecaaaaadabaaapia
aaaaoelaacaioekaecaaaaadacaaapiaaaaaoelaaaaioekaecaaaaadaaaaapia
aaaaoeiaabaioekaecaaaaadadaacpiaacaaoelaadaioekaafaaaaadaeaaadia
acaaoeiaabaamjkaafaaaaadaeaaaeiaacaakkiaabaappkaaeaaaaaeaaaaaoia
abaabliaacaablkaaeaablibaeaaaaaeaaaaaoiaabaaaalaaaaaoeiaaeaablia
afaaaaadaaaachiaaaaaaaiaaaaabliaafaaaaadaaaaciiaadaappiaadaaaaka
afaaaaadabaachiaadaaoeiaaaaappiaafaaaaadaaaachiaaaaaoeiaabaaoeia
abaaaaacaaaaciiaadaaffkaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefc
kiacaaaaeaaaaaaakkaaaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaa
acaaaaaagcbaaaaddcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
acaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
jgihcaaaaaaaaaaaaeaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaafaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagaabaaaabaaaaaaefaaaaaj
pcaabaaaabaaaaaaegbabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaebdiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaaaaadoaaaaabejfdeheoieaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahnaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaa
abaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaa
fdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Float 0 [_BumpPower]
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [unity_Lightmap] 2D
SetTexture 7 [unity_LightmapInd] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 54 ALU, 8 TEX
PARAM c[11] = { program.local[0..6],
		{ 0, 2, 1, 8 },
		{ -0.40824828, -0.70710677, 0.57735026 },
		{ -0.40824831, 0.70710677, 0.57735026 },
		{ 0.81649655, 0, 0.57735026 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEX R6.yw, fragment.texcoord[0], texture[2], 2D;
TEX R5.yw, fragment.texcoord[0], texture[5], 2D;
TEX R1, fragment.texcoord[1], texture[7], 2D;
TEX R3.xyz, fragment.texcoord[0], texture[0], 2D;
MAD R5.xy, R5.wyzw, c[7].y, -c[7].z;
MUL R5.zw, R5.xyxy, R5.xyxy;
ADD_SAT R3.w, R5.z, R5;
ADD R3.w, -R3, c[7].z;
RSQ R3.w, R3.w;
MAD R6.yz, R6.xwyw, c[7].y, -c[7].z;
MOV R0.x, c[3];
MOV R0.y, c[4].x;
MOV R0.w, c[2].x;
MOV R0.z, c[1].x;
MAD R2.xy, fragment.texcoord[0].zwzw, R0, R0.zwzw;
RCP R5.z, R3.w;
MOV result.color.w, c[7].x;
TEX R4.yw, R2, texture[4], 2D;
TEX R6.x, R2, texture[3], 2D;
TEX R0, fragment.texcoord[1], texture[6], 2D;
TEX R2.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R4.xy, R4.wyzw, c[7].y, -c[7].z;
MUL R4.zw, R4.xyxy, R4.xyxy;
ADD_SAT R2.w, R4.z, R4;
MUL R4.zw, R6.xyyz, R6.xyyz;
ADD R2.w, -R2, c[7].z;
ADD_SAT R4.z, R4, R4.w;
ADD R4.z, -R4, c[7];
RSQ R4.z, R4.z;
RCP R6.w, R4.z;
ADD R6.yzw, R6, -R5.xxyz;
MAD R5.xyz, fragment.color.primary.x, R6.yzww, R5;
RSQ R2.w, R2.w;
RCP R4.z, R2.w;
MOV R6.yz, c[0].x;
MOV R6.w, c[7].x;
MAD R4.xyz, R5, R6.yzww, R4;
DP3 R2.w, R4, R4;
RSQ R2.w, R2.w;
MUL R5.xyz, R2.w, R4;
DP3_SAT R4.z, R5, c[8];
DP3_SAT R4.y, R5, c[9];
DP3_SAT R4.x, R5, c[10];
MUL R5.xyz, R1.w, R1;
MUL R1.xyz, R3, c[5];
MUL R3.xyz, R5, R4;
MAD R2.xyz, R2, c[6], -R1;
MAD R1.xyz, fragment.color.primary.x, R2, R1;
DP3 R1.w, R3, c[7].w;
MUL R0.xyz, R0.w, R0;
MUL R1.xyz, R1, R6.x;
MUL R0.xyz, R0, R1.w;
MUL R0.xyz, R0, R1;
MUL result.color.xyz, R0, c[7].w;
END
# 54 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Float 0 [_BumpPower]
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [unity_Lightmap] 2D
SetTexture 7 [unity_LightmapInd] 2D
"ps_2_0
; 53 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c7, 2.00000000, -1.00000000, 1.00000000, 0.00000000
def c8, -0.40824828, -0.70710677, 0.57735026, 8.00000000
def c9, -0.40824831, 0.70710677, 0.57735026, 0
def c10, 0.81649655, 0.00000000, 0.57735026, 0
dcl t0
dcl v0.x
dcl t1.xy
texld r4, t1, s6
texld r6, t0, s1
texld r5, t0, s0
texld r3, t1, s7
mov r1.x, t0.z
mov r1.y, t0.w
mov r2.x, c3
mov r2.y, c4.x
mov r0.y, c2.x
mov r0.x, c1
mad r0.xy, r1, r2, r0
texld r2, r0, s4
texld r10, r0, s3
texld r1, t0, s2
texld r0, t0, s5
mov r2.x, r2.w
mad_pp r7.xy, r2, c7.x, c7.y
mul_pp r2.xy, r7, r7
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c7.z
mov r2.x, r0.w
mov r2.y, r0
mov r1.x, r1.w
rsq_pp r0.x, r0.x
rcp_pp r7.z, r0.x
mad_pp r8.xy, r2, c7.x, c7.y
mad_pp r9.xy, r1, c7.x, c7.y
mul_pp r1.xy, r8, r8
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r9, r9
add_pp_sat r2.x, r2, r2.y
add_pp r1.x, -r1, c7.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c7.z
rsq_pp r2.x, r2.x
rcp_pp r8.z, r1.x
rcp_pp r9.z, r2.x
add r1.xyz, r9, -r8
mov r0.xy, c0.x
mov r0.z, c7.w
mad r1.xyz, v0.x, r1, r8
mad r1.xyz, r1, r0, r7
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul r1.xyz, r0.x, r1
dp3_pp_sat r0.z, r1, c8
dp3_pp_sat r0.y, r1, c9
dp3_pp_sat r0.x, r1, c10
mul_pp r1.xyz, r3.w, r3
mul_pp r0.xyz, r1, r0
mul r1.xyz, r5, c5
mad r2.xyz, r6, c6, -r1
mad r1.xyz, v0.x, r2, r1
dp3_pp r0.x, r0, c8.w
mul_pp r2.xyz, r4.w, r4
mul r1.xyz, r1, r10.x
mul_pp r0.xyz, r2, r0.x
mul_pp r0.xyz, r0, r1
mul_pp r0.xyz, r0, c8.w
mov_pp r0.w, c7
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 92 used size, 14 vars
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 5
SetTexture 2 [_BumpTrimTex] 2D 4
SetTexture 3 [_BodyOcclusionTex] 2D 3
SetTexture 4 [_BodyBumpTex] 2D 2
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [unity_Lightmap] 2D 6
SetTexture 7 [unity_LightmapInd] 2D 7
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 31 float, 0 int, 0 uint
// TEX 8 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmjhaoiocldaagbjnicoohfkpcjlkdcjoabaaaaaaheaiaaaaadaaaaaa
cmaaaaaanaaaaaaaaeabaaaaejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefcgiahaaaaeaaaaaaankabaaaafjaaaaaeegiocaaaaaaaaaaa
agaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaa
ahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaa
ffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
dcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
dcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaadaaaaaadiaaaaaiccaabaaa
abaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaaaaaaaaaidcaabaaa
abaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaaaaaaaaaaadaaaaaa
dgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaapcaaaakbcaabaaaacaaaaaaaceaaaaaolaffbdpdkmnbddpaaaaaaaa
aaaaaaaaigaabaaaaaaaaaaabacaaaakccaabaaaacaaaaaaaceaaaaaomafnblo
pdaedfdpdkmnbddpaaaaaaaaegacbaaaaaaaaaaabacaaaakecaabaaaacaaaaaa
aceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaaegacbaaaaaaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegbabaaaadaaaaaaeghobaaaahaaaaaaaagabaaaahaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaebdiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaadiaaaaahccaabaaa
aaaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaaebdiaaaaahocaabaaaaaaaaaaa
agajbaaaacaaaaaafgafbaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaajgahbaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaiocaabaaaabaaaaaa
agajbaaaadaaaaaafgiocaaaaaaaaaaaaeaaaaaadcaaaaalhcaabaaaacaaaaaa
egacbaaaacaaaaaaegiccaaaaaaaaaaaafaaaaaajgahbaiaebaaaaaaabaaaaaa
dcaaaaajocaabaaaabaaaaaaagbabaaaacaaaaaaagajbaaaacaaaaaafgaobaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaajgahbaaaabaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 92 used size, 14 vars
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 5
SetTexture 2 [_BumpTrimTex] 2D 4
SetTexture 3 [_BodyOcclusionTex] 2D 3
SetTexture 4 [_BodyBumpTex] 2D 2
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [unity_Lightmap] 2D 6
SetTexture 7 [unity_LightmapInd] 2D 7
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 31 float, 0 int, 0 uint
// TEX 8 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedcmdcdjphimphifankajemdcfcconnlieabaaaaaahmamaaaaaeaaaaaa
daaaaaaadeaeaaaakealaaaaeiamaaaaebgpgodjpmadaaaapmadaaaaaaacpppp
kmadaaaafaaaaaaaabaaeeaaaaaafaaaaaaafaaaaiaaceaaaaaafaaaaaaaaaaa
afababaaaeacacaaadadadaaacaeaeaaabafafaaagagagaaahahahaaaaaaadaa
adaaaaaaaaaaaaaaaaacppppfbaaaaafadaaapkaaaaaaaeaaaaaialpaaaaaaaa
aaaaiadpfbaaaaafaeaaapkaaaaaaaebdkmnbddpaaaaaaaaolaffbdpfbaaaaaf
afaaapkaomafnblopdaedfdpdkmnbddpaaaaaaaafbaaaaafagaaapkaolafnblo
pdaedflpdkmnbddpaaaaaaaabpaaaaacaaaaaaiaaaaaaplabpaaaaacaaaaaaia
abaaaplabpaaaaacaaaaaaiaacaaadlabpaaaaacaaaaaajaaaaiapkabpaaaaac
aaaaaajaabaiapkabpaaaaacaaaaaajaacaiapkabpaaaaacaaaaaajaadaiapka
bpaaaaacaaaaaajaaeaiapkabpaaaaacaaaaaajaafaiapkabpaaaaacaaaaaaja
agaiapkabpaaaaacaaaaaajaahaiapkaecaaaaadaaaacpiaaaaaoelaaeaioeka
ecaaaaadabaacpiaaaaaoelaabaioekaecaaaaadacaacpiaacaaoelaahaioeka
ecaaaaadadaacpiaacaaoelaagaioekaecaaaaadaeaaapiaaaaaoelaafaioeka
ecaaaaadafaaapiaaaaaoelaaaaioekaaeaaaaaeagaacbiaaaaappiaadaaaaka
adaaffkaaeaaaaaeagaacciaaaaaffiaadaaaakaadaaffkaaeaaaaaeaaaacbia
abaappiaadaaaakaadaaffkaaeaaaaaeaaaacciaabaaffiaadaaaakaadaaffka
bcaaaaaeabaaadiaabaaaalaagaaoeiaaaaaoeiaafaaaaadaaaaadiaabaaoeia
aaaaaakaafaaaaadabaaabiaaaaakklaaaaappkaafaaaaadabaaaciaaaaappla
abaaaakaacaaaaadabaaadiaabaaoeiaaaaamjkaecaaaaadagaacpiaabaaoeia
acaioekaecaaaaadabaaapiaabaaoeiaadaioekaaeaaaaaeahaacbiaagaappia
adaaaakaadaaffkaaeaaaaaeahaacciaagaaffiaadaaaakaadaaffkafkaaaaae
aaaadiiaahaaoeiaahaaoeiaadaakkkaacaaaaadaaaaciiaaaaappibadaappka
ahaaaaacaaaaciiaaaaappiaagaaaaacahaaceiaaaaappiaabaaaaacaaaaaeia
adaakkkaacaaaaadaaaaahiaaaaaoeiaahaaoeiaceaaaaacagaaahiaaaaaoeia
aiaaaaadaaaadbiaaeaablkaagaaoeiaaiaaaaadaaaadciaafaaoekaagaaoeia
aiaaaaadaaaadeiaagaaoekaagaaoeiaafaaaaadaaaaciiaacaappiaaeaaaaka
afaaaaadacaachiaacaaoeiaaaaappiaaiaaaaadaeaaciiaaaaaoeiaacaaoeia
afaaaaadadaaciiaadaappiaaeaaaakaafaaaaadaaaachiaadaaoeiaadaappia
afaaaaadaaaachiaaeaappiaaaaaoeiaafaaaaadacaaadiaafaaoeiaabaamjka
afaaaaadacaaaeiaafaakkiaabaappkaaeaaaaaeabaaaoiaaeaabliaacaablka
acaablibaeaaaaaeabaaaoiaabaaaalaabaaoeiaacaabliaafaaaaadabaachia
abaaaaiaabaabliaafaaaaadaaaachiaaaaaoeiaabaaoeiaabaaaaacaaaaciia
adaakkkaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefcgiahaaaaeaaaaaaa
nkabaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafkaaaaadaagabaaaaaaaaaaa
fkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaa
adaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaad
aagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacaeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaadcaaaaap
dcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaa
aaaaaaaaadaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaa
aaaaaaaaaeaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaa
aaaaaaaaadaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaa
adaaaaaaakiacaaaaaaaaaaaadaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaapcaaaakbcaabaaaacaaaaaa
aceaaaaaolaffbdpdkmnbddpaaaaaaaaaaaaaaaaigaabaaaaaaaaaaabacaaaak
ccaabaaaacaaaaaaaceaaaaaomafnblopdaedfdpdkmnbddpaaaaaaaaegacbaaa
aaaaaaaabacaaaakecaabaaaacaaaaaaaceaaaaaolafnblopdaedflpdkmnbddp
aaaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaadaaaaaa
eghobaaaahaaaaaaaagabaaaahaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaebdiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgapbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaaagaaaaaa
aagabaaaagaaaaaadiaaaaahccaabaaaaaaaaaaadkaabaaaacaaaaaaabeaaaaa
aaaaaaebdiaaaaahocaabaaaaaaaaaaaagajbaaaacaaaaaafgafbaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
efaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaadiaaaaaiocaabaaaabaaaaaaagajbaaaadaaaaaafgiocaaaaaaaaaaa
aeaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
afaaaaaajgahbaiaebaaaaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbabaaa
acaaaaaaagajbaaaacaaaaaafgaobaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
agaabaaaabaaaaaajgahbaaaabaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaa
doaaaaabejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
apapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapabaaaaimaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaimaaaaaaacaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 50 ALU, 7 TEX
PARAM c[9] = { program.local[0..7],
		{ 2, 1, 0 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R1.yw, fragment.texcoord[0], texture[2], 2D;
TEX R3.xyz, fragment.texcoord[0], texture[0], 2D;
TEX R2.xyz, fragment.texcoord[0], texture[1], 2D;
MUL R3.xyz, R3, c[6];
MAD R2.xyz, R2, c[7], -R3;
MAD R1.yz, R1.xwyw, c[8].x, -c[8].y;
MOV R0.z, c[4].x;
MOV R0.w, c[5].x;
MAD R2.xyz, fragment.color.primary.x, R2, R3;
MOV R0.y, c[3].x;
MOV R0.x, c[2];
MAD R0.xy, fragment.texcoord[0].zwzw, R0.zwzw, R0;
MOV result.color.w, c[8].z;
TEX R4.yw, R0, texture[4], 2D;
TEX R1.x, R0, texture[3], 2D;
TEX R0.yw, fragment.texcoord[0], texture[5], 2D;
TXP R0.x, fragment.texcoord[4], texture[6], 2D;
MAD R4.xy, R4.wyzw, c[8].x, -c[8].y;
MUL R4.zw, R4.xyxy, R4.xyxy;
ADD_SAT R0.z, R4, R4.w;
ADD R2.w, -R0.z, c[8].y;
MAD R0.yz, R0.xwyw, c[8].x, -c[8].y;
MUL R4.zw, R1.xyyz, R1.xyyz;
MUL R5.xy, R0.yzzw, R0.yzzw;
ADD_SAT R0.w, R4.z, R4;
ADD_SAT R1.w, R5.x, R5.y;
ADD R1.w, -R1, c[8].y;
RSQ R2.w, R2.w;
ADD R0.w, -R0, c[8].y;
RSQ R3.w, R1.w;
RSQ R1.w, R0.w;
RCP R0.w, R3.w;
RCP R1.w, R1.w;
ADD R1.yzw, R1, -R0;
MAD R1.yzw, fragment.color.primary.x, R1, R0;
MOV R0.yz, c[1].x;
MOV R0.w, c[8].z;
RCP R4.z, R2.w;
MAD R4.xyz, R1.yzww, R0.yzww, R4;
MUL R1.xyz, R2, R1.x;
DP3 R0.y, R4, R4;
RSQ R0.y, R0.y;
MUL R4.xyz, R0.y, R4;
DP3 R0.y, R4, fragment.texcoord[1];
MUL R0.w, R0.x, c[8].x;
MAX R0.y, R0, c[8].z;
MUL R2.xyz, R1, c[0];
MUL R0.xyz, R2, R0.y;
MUL R0.xyz, R0, R0.w;
MAD result.color.xyz, R1, fragment.texcoord[2], R0;
END
# 50 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_2_0
; 50 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c8, 2.00000000, -1.00000000, 1.00000000, 0.00000000
dcl t0
dcl v0.x
dcl t1.xyz
dcl t2.xyz
dcl t4
texldp r8, t4, s6
texld r4, t0, s1
texld r3, t0, s0
mov r1.x, t0.z
mov r1.y, t0.w
mov r2.x, c4
mov r2.y, c5.x
mov r0.y, c3.x
mov r0.x, c2
mad r0.xy, r1, r2, r0
texld r2, r0, s4
texld r9, r0, s3
texld r1, t0, s5
texld r0, t0, s2
mov r2.x, r2.w
mad_pp r7.xy, r2, c8.x, c8.y
mul_pp r2.xy, r7, r7
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c8.z
mov r1.x, r1.w
mad_pp r5.xy, r1, c8.x, c8.y
mov r1.x, r0.w
mov r1.y, r0
mad_pp r6.xy, r1, c8.x, c8.y
mul_pp r1.xy, r5, r5
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r6, r6
add_pp_sat r2.x, r2, r2.y
rsq_pp r0.x, r0.x
rcp_pp r7.z, r0.x
add_pp r1.x, -r1, c8.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c8.z
rsq_pp r2.x, r2.x
rcp_pp r5.z, r1.x
rcp_pp r6.z, r2.x
add r1.xyz, r6, -r5
mov r0.xy, c1.x
mov r0.z, c8.w
mad r1.xyz, v0.x, r1, r5
mad r1.xyz, r1, r0, r7
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul r0.xyz, r0.x, r1
dp3_pp r0.x, r0, t1
mul r1.xyz, r3, c6
mad r2.xyz, r4, c7, -r1
mad r1.xyz, v0.x, r2, r1
mul r2.xyz, r1, r9.x
max_pp r0.x, r0, c8.w
mul_pp r3.xyz, r2, c0
mul_pp r1.x, r8, c8
mul_pp r0.xyz, r3, r0.x
mul r0.xyz, r0, r1.x
mov_pp r0.w, c8
mad_pp r0.xyz, r2, t2, r0
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 208 // 156 used size, 14 vars
Vector 16 [_LightColor0] 4
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_ShadowMapTexture] 2D 0
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 28 float, 0 int, 0 uint
// TEX 7 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbjbchnbgehbbjpfaongplaiojdemhmmjabaaaaaacmaiaaaaadaaaaaa
cmaaaaaaaaabaaaadeabaaaaejfdeheommaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaamfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaagaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpaagaaaaeaaaaaaa
lmabaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaadaagabaaaaaaaaaaa
fkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaa
adaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaad
aagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaagcbaaaadpcbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadlcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaafaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaa
abaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaa
ahaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaa
aiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaa
ahaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaaeaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaa
akiacaaaaaaaaaaaahaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaadaaaaaadeaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaabaaaaaadiaaaaaiocaabaaaaaaaaaaaagajbaaa
adaaaaaafgiocaaaaaaaaaaaaiaaaaaadcaaaaalocaabaaaabaaaaaaagajbaaa
acaaaaaaagijcaaaaaaaaaaaajaaaaaafgaobaiaebaaaaaaaaaaaaaadcaaaaaj
ocaabaaaaaaaaaaaagbabaaaacaaaaaafgaobaaaabaaaaaafgaobaaaaaaaaaaa
diaaaaahocaabaaaaaaaaaaaagaabaaaabaaaaaafgaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaajgahbaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaadiaaaaah
ocaabaaaaaaaaaaafgaobaaaaaaaaaaaagbjbaaaaeaaaaaadiaaaaahhcaabaaa
abaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaahdcaabaaaacaaaaaa
egbabaaaagaaaaaapgbpbaaaagaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaaaaaaaaahbcaabaaaaaaaaaaa
akaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaa
abaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 208 // 156 used size, 14 vars
Vector 16 [_LightColor0] 4
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_ShadowMapTexture] 2D 0
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 28 float, 0 int, 0 uint
// TEX 7 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedagpejhldgklllpjofddeeldjbgjjccdaabaaaaaaoaalaaaaaeaaaaaa
daaaaaaaoaadaaaaniakaaaakmalaaaaebgpgodjkiadaaaakiadaaaaaaacpppp
faadaaaafiaaaaaaacaaeaaaaaaafiaaaaaafiaaahaaceaaaaaafiaaagaaaaaa
aaababaaafacacaaaeadadaaadaeaeaaacafafaaabagagaaaaaaabaaabaaaaaa
aaaaaaaaaaaaahaaadaaabaaaaaaaaaaaaacppppfbaaaaafaeaaapkaaaaaaaea
aaaaialpaaaaaaaaaaaaiadpbpaaaaacaaaaaaiaaaaaaplabpaaaaacaaaaaaia
abaaaplabpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaachlabpaaaaac
aaaaaaiaafaaaplabpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapka
bpaaaaacaaaaaajaacaiapkabpaaaaacaaaaaajaadaiapkabpaaaaacaaaaaaja
aeaiapkabpaaaaacaaaaaajaafaiapkabpaaaaacaaaaaajaagaiapkaecaaaaad
aaaacpiaaaaaoelaafaioekaecaaaaadabaacpiaaaaaoelaacaioekaecaaaaad
acaaapiaaaaaoelaagaioekaecaaaaadadaaapiaaaaaoelaabaioekaaeaaaaae
aeaacbiaaaaappiaaeaaaakaaeaaffkaaeaaaaaeaeaacciaaaaaffiaaeaaaaka
aeaaffkaaeaaaaaeaaaacbiaabaappiaaeaaaakaaeaaffkaaeaaaaaeaaaaccia
abaaffiaaeaaaakaaeaaffkabcaaaaaeabaaadiaabaaaalaaeaaoeiaaaaaoeia
afaaaaadaaaaadiaabaaoeiaabaaaakaafaaaaadabaaabiaaaaakklaabaappka
afaaaaadabaaaciaaaaapplaacaaaakaacaaaaadabaaadiaabaaoeiaabaamjka
agaaaaacaaaaaiiaafaapplaafaaaaadaeaaadiaaaaappiaafaaoelaecaaaaad
afaacpiaabaaoeiaadaioekaecaaaaadabaaapiaabaaoeiaaeaioekaecaaaaad
aeaacpiaaeaaoeiaaaaioekaaeaaaaaeagaacbiaafaappiaaeaaaakaaeaaffka
aeaaaaaeagaacciaafaaffiaaeaaaakaaeaaffkafkaaaaaeaaaadiiaagaaoeia
agaaoeiaaeaakkkaacaaaaadaaaaciiaaaaappibaeaappkaahaaaaacaaaaciia
aaaappiaagaaaaacagaaceiaaaaappiaabaaaaacaaaaaeiaaeaakkkaacaaaaad
aaaaahiaaaaaoeiaagaaoeiaceaaaaacafaachiaaaaaoeiaaiaaaaadacaaciia
afaaoeiaacaaoelaalaaaaadadaaciiaacaappiaaeaakkkaafaaaaadaaaaadia
adaaoeiaacaamjkaafaaaaadaaaaaeiaadaakkiaacaappkaaeaaaaaeabaaaoia
acaabliaadaablkaaaaablibaeaaaaaeaaaaahiaabaaaalaabaabliaaaaaoeia
afaaaaadaaaachiaabaaaaiaaaaaoeiaafaaaaadabaachiaaaaaoeiaaaaaoeka
afaaaaadaaaachiaaaaaoeiaadaaoelaafaaaaadabaaahiaadaappiaabaaoeia
acaaaaadaaaaaiiaaeaaaaiaaeaaaaiaaeaaaaaeaaaachiaabaaoeiaaaaappia
aaaaoeiaabaaaaacaaaaaiiaaeaakkkaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcpaagaaaaeaaaaaaalmabaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadlcbabaaaagaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaafaaaaaadcaaaaapdcaabaaa
aaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaa
acaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
abaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaa
abaaaaaadkiacaaaaaaaaaaaahaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaa
abaaaaaaakiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaajgifcaaaaaaaaaaaahaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaaeaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaaeaaaaaadcaaaaapdcaabaaa
acaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaa
dgaaaaagbcaabaaaadaaaaaaakiacaaaaaaaaaaaahaaaaaadgaaaaafecaabaaa
adaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
agacbaaaadaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaadaaaaaadeaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaa
adaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaadiaaaaai
ocaabaaaaaaaaaaaagajbaaaadaaaaaafgiocaaaaaaaaaaaaiaaaaaadcaaaaal
ocaabaaaabaaaaaaagajbaaaacaaaaaaagijcaaaaaaaaaaaajaaaaaafgaobaia
ebaaaaaaaaaaaaaadcaaaaajocaabaaaaaaaaaaaagbabaaaacaaaaaafgaobaaa
abaaaaaafgaobaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaabaaaaaa
fgaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaajgahbaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaadiaaaaahocaabaaaaaaaaaaafgaobaaaaaaaaaaaagbjbaaa
aeaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
aoaaaaahdcaabaaaacaaaaaaegbabaaaagaaaaaapgbpbaaaagaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaa
aaaaaaahbcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
hccabaaaaaaaaaaaegacbaaaabaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaabejfdeheommaaaaaa
ahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
lmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaamfaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaapabaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahahaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaa
lmaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaaaaaalmaaaaaaaeaaaaaa
aaaaaaaaadaaaaaaagaaaaaaapalaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [unity_Lightmap] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 23 ALU, 5 TEX
PARAM c[8] = { program.local[0..6],
		{ 0, 8, 2 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R3.xyz, fragment.texcoord[0], texture[0], 2D;
TEX R2, fragment.texcoord[1], texture[7], 2D;
TXP R1.x, fragment.texcoord[2], texture[6], 2D;
TEX R4.xyz, fragment.texcoord[0], texture[1], 2D;
MOV R0.z, c[3].x;
MOV R0.w, c[4].x;
MUL R3.xyz, R3, c[5];
MOV R0.y, c[2].x;
MOV R0.x, c[1];
MAD R0.xy, fragment.texcoord[0].zwzw, R0.zwzw, R0;
MOV result.color.w, c[7].x;
TEX R0.x, R0, texture[3], 2D;
MUL R0.yzw, R2.xxyz, R1.x;
MUL R2.xyz, R2.w, R2;
MUL R2.xyz, R2, c[7].y;
MUL R0.yzw, R0, c[7].z;
MIN R0.yzw, R2.xxyz, R0;
MUL R1.xyz, R2, R1.x;
MAD R2.xyz, R4, c[6], -R3;
MAX R1.xyz, R0.yzww, R1;
MAD R2.xyz, fragment.color.primary.x, R2, R3;
MUL R0.xyz, R2, R0.x;
MUL result.color.xyz, R0, R1;
END
# 23 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Float 0 [_AtlasOffsetX]
Float 1 [_AtlasOffsetY]
Float 2 [_AtlasScaleX]
Float 3 [_AtlasScaleY]
Vector 4 [_Color]
Vector 5 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [unity_Lightmap] 2D
"ps_2_0
; 21 ALU, 5 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
dcl_2d s7
def c6, 8.00000000, 2.00000000, 0.00000000, 0
dcl t0
dcl v0.x
dcl t1.xy
dcl t2
texldp r4, t2, s6
mov r2.x, c2
mov r2.y, c3.x
mov r1.y, c1.x
mov r1.x, c0
mov r0.x, t0.z
mov r0.y, t0.w
mad r0.xy, r0, r2, r1
texld r5, r0, s3
texld r1, t0, s1
texld r2, t0, s0
texld r0, t1, s7
mul_pp r3.xyz, r0, r4.x
mul_pp r0.xyz, r0.w, r0
mul_pp r0.xyz, r0, c6.x
mul_pp r3.xyz, r3, c6.y
min_pp r3.xyz, r0, r3
mul_pp r0.xyz, r0, r4.x
mul r2.xyz, r2, c4
mad r1.xyz, r1, c5, -r2
max_pp r0.xyz, r3, r0
mad r1.xyz, v0.x, r1, r2
mul r1.xyz, r1, r5.x
mul_pp r0.xyz, r1, r0
mov_pp r0.w, c6.z
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 156 used size, 15 vars
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 3
SetTexture 2 [_BodyOcclusionTex] 2D 2
SetTexture 3 [_ShadowMapTexture] 2D 0
SetTexture 4 [unity_Lightmap] 2D 4
// 23 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednpceciihkafcfmipcfahiggakjioeegpabaaaaaakiaeaaaaadaaaaaa
cmaaaaaanaaaaaaaaeabaaaaejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapalaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefcjmadaaaaeaaaaaaaohaaaaaafjaaaaaeegiocaaaaaaaaaaa
akaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaad
bcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadlcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaajgihcaaaaaaaaaaaaiaaaaaadcaaaaal
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaajaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaa
dkiacaaaaaaaaaaaahaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaa
akiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
jgifcaaaaaaaaaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaagaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaeaaaaaa
pgbpbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaaakaabaaaabaaaaaa
akaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaadiaaaaahocaabaaaabaaaaaapgapbaaaaaaaaaaa
agajbaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaacaaaaaaabeaaaaa
aaaaaaebdiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaapgapbaaaaaaaaaaa
ddaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagajbaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadeaaaaahhcaabaaa
abaaaaaajgahbaaaabaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 156 used size, 15 vars
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 3
SetTexture 2 [_BodyOcclusionTex] 2D 2
SetTexture 3 [_ShadowMapTexture] 2D 0
SetTexture 4 [unity_Lightmap] 2D 4
// 23 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedjglcfilepbcelmeefhhbmcejhmcjamcaabaaaaaabaahaaaaaeaaaaaa
daaaaaaajeacaaaadiagaaaanmagaaaaebgpgodjfmacaaaafmacaaaaaaacpppp
biacaaaaeeaaaaaaabaadiaaaaaaeeaaaaaaeeaaafaaceaaaaaaeeaaadaaaaaa
aaababaaacacacaaabadadaaaeaeaeaaaaaaahaaadaaaaaaaaaaaaaaaaacpppp
fbaaaaafadaaapkaaaaaaaebaaaaaaaaaaaaaaaaaaaaaaaabpaaaaacaaaaaaia
aaaaaplabpaaaaacaaaaaaiaabaaaplabpaaaaacaaaaaaiaacaaadlabpaaaaac
aaaaaaiaadaaaplabpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapka
bpaaaaacaaaaaajaacaiapkabpaaaaacaaaaaajaadaiapkabpaaaaacaaaaaaja
aeaiapkaagaaaaacaaaaaiiaadaapplaafaaaaadaaaaadiaaaaappiaadaaoela
afaaaaadabaaabiaaaaakklaaaaappkaafaaaaadabaaaciaaaaapplaabaaaaka
acaaaaadabaaadiaabaaoeiaaaaamjkaecaaaaadaaaacpiaaaaaoeiaaaaioeka
ecaaaaadacaacpiaacaaoelaaeaioekaecaaaaadadaaapiaaaaaoelaadaioeka
ecaaaaadaeaaapiaaaaaoelaabaioekaecaaaaadabaaapiaabaaoeiaacaioeka
acaaaaadadaaciiaaaaaaaiaaaaaaaiaafaaaaadaaaacoiaacaabliaadaappia
afaaaaadacaaciiaacaappiaadaaaakaafaaaaadabaacoiaacaabliaacaappia
akaaaaadacaachiaaaaabliaabaabliaafaaaaadaaaachiaaaaaaaiaabaablia
alaaaaadabaacoiaacaabliaaaaabliaafaaaaadaaaaadiaaeaaoeiaabaamjka
afaaaaadaaaaaeiaaeaakkiaabaappkaaeaaaaaeacaaahiaadaaoeiaacaaoeka
aaaaoeibaeaaaaaeaaaaahiaabaaaalaacaaoeiaaaaaoeiaafaaaaadaaaachia
abaaaaiaaaaaoeiaafaaaaadaaaachiaabaabliaaaaaoeiaabaaaaacaaaaciia
adaaffkaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefcjmadaaaaeaaaaaaa
ohaaaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaadaagabaaaaaaaaaaa
fkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaa
adaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
gcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaaddcbabaaa
adaaaaaagcbaaaadlcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
adaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
jgihcaaaaaaaaaaaaiaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaajaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaahaaaaaadiaaaaai
ccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaahaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaaeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaaefaaaaajpcaabaaa
acaaaaaaegbabaaaadaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaadiaaaaah
ocaabaaaabaaaaaapgapbaaaaaaaaaaaagajbaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaaebdiaaaaahhcaabaaaacaaaaaa
egacbaaaacaaaaaapgapbaaaaaaaaaaaddaaaaahocaabaaaabaaaaaafgaobaaa
abaaaaaaagajbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadeaaaaahhcaabaaaabaaaaaajgahbaaaabaaaaaaegacbaaa
acaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaabejfdeheojmaaaaaa
afaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
imaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaapabaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaadadaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapalaaaa
fdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Float 0 [_BumpPower]
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 60 ALU, 9 TEX
PARAM c[11] = { program.local[0..6],
		{ 0, 2, 1, 8 },
		{ -0.40824828, -0.70710677, 0.57735026 },
		{ -0.40824831, 0.70710677, 0.57735026 },
		{ 0.81649655, 0, 0.57735026 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEMP R7;
TEX R1.yw, fragment.texcoord[0], texture[2], 2D;
TEX R3, fragment.texcoord[1], texture[8], 2D;
TEX R5.xyz, fragment.texcoord[0], texture[0], 2D;
TEX R2, fragment.texcoord[1], texture[7], 2D;
TXP R1.x, fragment.texcoord[3], texture[6], 2D;
TEX R4.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R1.yz, R1.xwyw, c[7].y, -c[7].z;
MOV R0.y, c[2].x;
MOV R0.x, c[1];
MUL R5.xyz, R5, c[5];
MOV R0.z, c[3].x;
MOV R0.w, c[4].x;
MAD R0.zw, fragment.texcoord[0], R0, R0.xyxy;
MUL R3.xyz, R3.w, R3;
MOV result.color.w, c[7].x;
TEX R6.yw, R0.zwzw, texture[4], 2D;
TEX R0.x, R0.zwzw, texture[3], 2D;
TEX R0.yw, fragment.texcoord[0], texture[5], 2D;
MAD R6.xy, R6.wyzw, c[7].y, -c[7].z;
MUL R6.zw, R6.xyxy, R6.xyxy;
ADD_SAT R0.z, R6, R6.w;
ADD R4.w, -R0.z, c[7].z;
MAD R0.yz, R0.xwyw, c[7].y, -c[7].z;
MUL R6.zw, R1.xyyz, R1.xyyz;
MUL R7.xy, R0.yzzw, R0.yzzw;
ADD_SAT R0.w, R6.z, R6;
ADD_SAT R1.w, R7.x, R7.y;
ADD R1.w, -R1, c[7].z;
RSQ R4.w, R4.w;
ADD R0.w, -R0, c[7].z;
RSQ R5.w, R1.w;
RSQ R1.w, R0.w;
RCP R0.w, R5.w;
RCP R1.w, R1.w;
ADD R1.yzw, R1, -R0;
MAD R1.yzw, fragment.color.primary.x, R1, R0;
MOV R0.yz, c[0].x;
MOV R0.w, c[7].x;
RCP R6.z, R4.w;
MAD R6.xyz, R1.yzww, R0.yzww, R6;
DP3 R0.y, R6, R6;
RSQ R0.y, R0.y;
MUL R0.yzw, R0.y, R6.xxyz;
DP3_SAT R6.z, R0.yzww, c[8];
DP3_SAT R6.y, R0.yzww, c[9];
DP3_SAT R6.x, R0.yzww, c[10];
MUL R3.xyz, R3, R6;
DP3 R0.y, R3, c[7].w;
MUL R3.xyz, R2, R1.x;
MUL R2.xyz, R2.w, R2;
MUL R2.xyz, R2, R0.y;
MUL R2.xyz, R2, c[7].w;
MUL R3.xyz, R3, c[7].y;
MIN R3.xyz, R2, R3;
MUL R1.xyz, R2, R1.x;
MAD R2.xyz, R4, c[6], -R5;
MAD R2.xyz, fragment.color.primary.x, R2, R5;
MAX R1.xyz, R3, R1;
MUL R0.xyz, R2, R0.x;
MUL result.color.xyz, R0, R1;
END
# 60 instructions, 8 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Float 0 [_BumpPower]
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"ps_2_0
; 58 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c7, 2.00000000, -1.00000000, 1.00000000, 0.00000000
def c8, -0.40824828, -0.70710677, 0.57735026, 8.00000000
def c9, -0.40824831, 0.70710677, 0.57735026, 0
def c10, 0.81649655, 0.00000000, 0.57735026, 0
dcl t0
dcl v0.x
dcl t1.xy
dcl t3
texld r6, t0, s1
texld r5, t0, s0
texld r4, t1, s7
texldp r10, t3, s6
texld r3, t1, s8
mov r1.x, t0.z
mov r1.y, t0.w
mov r2.x, c3
mov r2.y, c4.x
mov r0.y, c2.x
mov r0.x, c1
mad r0.xy, r1, r2, r0
texld r2, r0, s4
texld r11, r0, s3
texld r1, t0, s2
texld r0, t0, s5
mov r2.x, r2.w
mad_pp r7.xy, r2, c7.x, c7.y
mul_pp r2.xy, r7, r7
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c7.z
mov r2.x, r0.w
mov r2.y, r0
mov r1.x, r1.w
rsq_pp r0.x, r0.x
rcp_pp r7.z, r0.x
mad_pp r8.xy, r2, c7.x, c7.y
mad_pp r9.xy, r1, c7.x, c7.y
mul_pp r1.xy, r8, r8
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r9, r9
add_pp_sat r2.x, r2, r2.y
add_pp r1.x, -r1, c7.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c7.z
rsq_pp r2.x, r2.x
rcp_pp r9.z, r2.x
rcp_pp r8.z, r1.x
add r1.xyz, r9, -r8
mov r0.xy, c0.x
mov r0.z, c7.w
mad r1.xyz, v0.x, r1, r8
mad r1.xyz, r1, r0, r7
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul r1.xyz, r0.x, r1
dp3_pp_sat r0.z, r1, c8
dp3_pp_sat r0.y, r1, c9
dp3_pp_sat r0.x, r1, c10
mul_pp r1.xyz, r3.w, r3
mul_pp r0.xyz, r1, r0
mul_pp r1.xyz, r4, r10.x
mul_pp r2.xyz, r4.w, r4
dp3_pp r0.x, r0, c8.w
mul_pp r0.xyz, r2, r0.x
mul_pp r0.xyz, r0, c8.w
mul_pp r1.xyz, r1, c7.x
min_pp r1.xyz, r0, r1
mul_pp r0.xyz, r0, r10.x
max_pp r0.xyz, r1, r0
mul r1.xyz, r5, c5
mad r2.xyz, r6, c6, -r1
mad r1.xyz, v0.x, r2, r1
mul r1.xyz, r1, r11.x
mul_pp r0.xyz, r1, r0
mov_pp r0.w, c7
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 156 used size, 15 vars
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_ShadowMapTexture] 2D 0
SetTexture 7 [unity_Lightmap] 2D 7
SetTexture 8 [unity_LightmapInd] 2D 8
// 57 instructions, 4 temp regs, 0 temp arrays:
// ALU 37 float, 0 int, 0 uint
// TEX 9 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcekfcjjhhedeilajfkglamgkpigngmocabaaaaaaiaajaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
fmaiaaaaeaaaaaaabhacaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaad
aagabaaaaiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaa
ahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadpcbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaad
lcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaafaaaaaa
dcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaahaaaaaadiaaaaaiccaabaaa
abaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaa
abaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaahaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaaeaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaaaaaaaaaaahaaaaaa
dgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaapcaaaakbcaabaaaacaaaaaaaceaaaaaolaffbdpdkmnbddpaaaaaaaa
aaaaaaaaigaabaaaaaaaaaaabacaaaakccaabaaaacaaaaaaaceaaaaaomafnblo
pdaedfdpdkmnbddpaaaaaaaaegacbaaaaaaaaaaabacaaaakecaabaaaacaaaaaa
aceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaaegacbaaaaaaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegbabaaaadaaaaaaeghobaaaaiaaaaaaaagabaaaaiaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaebdiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaahaaaaaaaagabaaaahaaaaaadiaaaaahccaabaaa
aaaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaaebdiaaaaahocaabaaaaaaaaaaa
agajbaaaacaaaaaafgafbaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaajgahbaaaaaaaaaaaaoaaaaahgcaabaaaabaaaaaaagbbbaaaafaaaaaa
pgbpbaaaafaaaaaaefaaaaajpcaabaaaadaaaaaajgafbaaaabaaaaaaeghobaaa
agaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaa
akaabaaaadaaaaaadiaaaaahocaabaaaabaaaaaaagajbaaaaaaaaaaaagaabaaa
adaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaapgapbaaaaaaaaaaa
ddaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaadeaaaaah
hcaabaaaaaaaaaaajgahbaaaabaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaa
acaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaagaaaaaaefaaaaaj
pcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
diaaaaaiocaabaaaabaaaaaaagajbaaaadaaaaaafgiocaaaaaaaaaaaaiaaaaaa
dcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaajaaaaaa
jgahbaiaebaaaaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbabaaaacaaaaaa
agajbaaaacaaaaaafgaobaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaa
abaaaaaajgahbaaaabaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 156 used size, 15 vars
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_ShadowMapTexture] 2D 0
SetTexture 7 [unity_Lightmap] 2D 7
SetTexture 8 [unity_LightmapInd] 2D 8
// 57 instructions, 4 temp regs, 0 temp arrays:
// ALU 37 float, 0 int, 0 uint
// TEX 9 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedddmikclnhkafmfepobmfgjdboekfhlmiabaaaaaacaaoaaaaaeaaaaaa
daaaaaaammaeaaaadaanaaaaomanaaaaebgpgodjjeaeaaaajeaeaaaaaaacpppp
eaaeaaaafeaaaaaaabaaeiaaaaaafeaaaaaafeaaajaaceaaaaaafeaaagaaaaaa
aaababaaafacacaaaeadadaaadaeaeaaacafafaaabagagaaahahahaaaiaiaiaa
aaaaahaaadaaaaaaaaaaaaaaaaacppppfbaaaaafadaaapkaaaaaaaeaaaaaialp
aaaaaaaaaaaaiadpfbaaaaafaeaaapkaaaaaaaebdkmnbddpaaaaaaaaolaffbdp
fbaaaaafafaaapkaomafnblopdaedfdpdkmnbddpaaaaaaaafbaaaaafagaaapka
olafnblopdaedflpdkmnbddpaaaaaaaabpaaaaacaaaaaaiaaaaaaplabpaaaaac
aaaaaaiaabaaaplabpaaaaacaaaaaaiaacaaadlabpaaaaacaaaaaaiaaeaaapla
bpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaacaaaaaaja
acaiapkabpaaaaacaaaaaajaadaiapkabpaaaaacaaaaaajaaeaiapkabpaaaaac
aaaaaajaafaiapkabpaaaaacaaaaaajaagaiapkabpaaaaacaaaaaajaahaiapka
bpaaaaacaaaaaajaaiaiapkaecaaaaadaaaacpiaaaaaoelaafaioekaecaaaaad
abaacpiaaaaaoelaacaioekaecaaaaadacaacpiaacaaoelaaiaioekaecaaaaad
adaacpiaacaaoelaahaioekaecaaaaadaeaaapiaaaaaoelaagaioekaecaaaaad
afaaapiaaaaaoelaabaioekaaeaaaaaeagaacbiaaaaappiaadaaaakaadaaffka
aeaaaaaeagaacciaaaaaffiaadaaaakaadaaffkaaeaaaaaeaaaacbiaabaappia
adaaaakaadaaffkaaeaaaaaeaaaacciaabaaffiaadaaaakaadaaffkabcaaaaae
abaaadiaabaaaalaagaaoeiaaaaaoeiaafaaaaadaaaaadiaabaaoeiaaaaaaaka
afaaaaadabaaabiaaaaakklaaaaappkaafaaaaadabaaaciaaaaapplaabaaaaka
acaaaaadabaaadiaabaaoeiaaaaamjkaagaaaaacaaaaaiiaaeaapplaafaaaaad
agaaadiaaaaappiaaeaaoelaecaaaaadahaacpiaabaaoeiaadaioekaecaaaaad
abaaapiaabaaoeiaaeaioekaecaaaaadagaacpiaagaaoeiaaaaioekaaeaaaaae
aiaacbiaahaappiaadaaaakaadaaffkaaeaaaaaeaiaacciaahaaffiaadaaaaka
adaaffkafkaaaaaeaaaadiiaaiaaoeiaaiaaoeiaadaakkkaacaaaaadaaaaciia
aaaappibadaappkaahaaaaacaaaaciiaaaaappiaagaaaaacaiaaceiaaaaappia
abaaaaacaaaaaeiaadaakkkaacaaaaadaaaaahiaaaaaoeiaaiaaoeiaceaaaaac
ahaaahiaaaaaoeiaaiaaaaadaaaadbiaaeaablkaahaaoeiaaiaaaaadaaaadcia
afaaoekaahaaoeiaaiaaaaadaaaadeiaagaaoekaahaaoeiaafaaaaadaaaaciia
acaappiaaeaaaakaafaaaaadacaachiaacaaoeiaaaaappiaaiaaaaadaeaaciia
aaaaoeiaacaaoeiaafaaaaadadaaciiaadaappiaaeaaaakaafaaaaadaaaachia
adaaoeiaadaappiaafaaaaadaaaachiaaeaappiaaaaaoeiaacaaaaadaaaaciia
agaaaaiaagaaaaiaafaaaaadabaacoiaagaaaaiaaaaabliaafaaaaadacaachia
adaaoeiaaaaappiaakaaaaadadaachiaacaaoeiaaaaaoeiaalaaaaadaaaachia
adaaoeiaabaabliaafaaaaadacaaadiaafaaoeiaabaamjkaafaaaaadacaaaeia
afaakkiaabaappkaaeaaaaaeabaaaoiaaeaabliaacaablkaacaablibaeaaaaae
abaaaoiaabaaaalaabaaoeiaacaabliaafaaaaadabaachiaabaaaaiaabaablia
afaaaaadaaaachiaaaaaoeiaabaaoeiaabaaaaacaaaaciiaadaakkkaabaaaaac
aaaicpiaaaaaoeiappppaaaafdeieefcfmaiaaaaeaaaaaaabhacaaaafjaaaaae
egiocaaaaaaaaaaaakaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaad
aagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaa
fkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaa
agaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaaeaahabaaa
aiaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaa
gcbaaaaddcbabaaaadaaaaaagcbaaaadlcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacaeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaafaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaadcaaaaap
dcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaa
aaaaaaaaahaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaa
aaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaa
aaaaaaaaahaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaa
adaaaaaaakiacaaaaaaaaaaaahaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaapcaaaakbcaabaaaacaaaaaa
aceaaaaaolaffbdpdkmnbddpaaaaaaaaaaaaaaaaigaabaaaaaaaaaaabacaaaak
ccaabaaaacaaaaaaaceaaaaaomafnblopdaedfdpdkmnbddpaaaaaaaaegacbaaa
aaaaaaaabacaaaakecaabaaaacaaaaaaaceaaaaaolafnblopdaedflpdkmnbddp
aaaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaadaaaaaa
eghobaaaaiaaaaaaaagabaaaaiaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaebdiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgapbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaaahaaaaaa
aagabaaaahaaaaaadiaaaaahccaabaaaaaaaaaaadkaabaaaacaaaaaaabeaaaaa
aaaaaaebdiaaaaahocaabaaaaaaaaaaaagajbaaaacaaaaaafgafbaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaoaaaaah
gcaabaaaabaaaaaaagbbbaaaafaaaaaapgbpbaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaajgafbaaaabaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaaakaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaahocaabaaa
abaaaaaaagajbaaaaaaaaaaaagaabaaaadaaaaaadiaaaaahhcaabaaaacaaaaaa
egacbaaaacaaaaaapgapbaaaaaaaaaaaddaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaacaaaaaadeaaaaahhcaabaaaaaaaaaaajgahbaaaabaaaaaa
egacbaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaabaaaaaadiaaaaaiocaabaaaabaaaaaaagajbaaa
adaaaaaafgiocaaaaaaaaaaaaiaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaajgahbaiaebaaaaaaabaaaaaadcaaaaaj
ocaabaaaabaaaaaaagbabaaaacaaaaaaagajbaaaacaaaaaafgaobaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaajgahbaaaabaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaaaaadoaaaaabejfdeheoleaaaaaaagaaaaaaaiaaaaaa
jiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
acaaaaaaapabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaafaaaaaaapalaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES3"
}

}
	}
	Pass {
		Name "FORWARD"
		Tags { "LightMode" = "ForwardAdd" }
		ZWrite Off Blend One One Fog { Color (0,0,0,0) }
Program "vp" {
// Vertex combos: 5
//   opengl - ALU: 27 to 36
//   d3d9 - ALU: 30 to 39
//   d3d11 - ALU: 12 to 14, TEX: 0 to 0, FLOW: 1 to 1
//   d3d11_9x - ALU: 12 to 14, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_MainTex_ST]
Vector 21 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 35 ALU
PARAM c[22] = { { 1 },
		state.matrix.mvp,
		program.local[5..21] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R1.xyz, c[17];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[19].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[18];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.x, R0, c[9];
DP4 R3.y, R0, c[10];
MAD R0.xyz, R3, c[19].w, -vertex.position;
DP3 result.texcoord[1].y, R0, R1;
DP3 result.texcoord[1].z, vertex.normal, R0;
DP3 result.texcoord[1].x, R0, vertex.attrib[14];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP3 result.texcoord[2].y, R1, R2;
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 35 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_MainTex_ST]
Vector 20 [_BodyBumpTex_ST]
"vs_2_0
; 38 ALU
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.w, c21.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c18.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
mov r1, c8
dp4 r4.x, c17, r1
mad r0.xyz, r4, c18.w, -v0
dp3 oT1.y, r0, r2
dp3 oT1.z, v2, r0
dp3 oT1.x, r0, v1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp3 oT2.y, r2, r3
dp3 oT2.z, v2, r3
dp3 oT2.x, v1, r3
mov oD0, v5
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mad oT0.zw, v4.xyxy, c20.xyxy, c20
mad oT0.xy, v3, c19, c19.zwzw
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Matrix 48 [_LightMatrix0] 4
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcmpbglomdoemhepgfadmlajgodhkgofjabaaaaaahiahaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcmaafaaaaeaaaabaahaabaaaa
fjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaa
kgiocaaaaaaaaaaaamaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaa
adaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaadaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaaeaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp vec3 bumpMap_7;
  highp vec3 bodyBump_8;
  highp float bodyOcc_9;
  highp vec3 trimBumpTex_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_10 = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_9 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BodyBumpTex, tmpvar_18).xyz * 2.0) - 1.0);
  bodyBump_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_7 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_3.x;
  trimMask_6 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_6)) * bodyOcc_9);
  tmpvar_4 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.z = 0.0;
  tmpvar_26.x = _BumpPower;
  tmpvar_26.y = _BumpPower;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((bodyBump_8 + (mix (bumpMap_7, trimBumpTex_10, vec3(trimMask_6)) * tmpvar_26)));
  tmpvar_5 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float atten_30;
  atten_30 = texture2D (_LightTexture0, vec2(tmpvar_29)).w;
  lowp vec4 c_31;
  lowp float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_33;
  tmpvar_33 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_32) * (atten_30 * 2.0));
  c_31.xyz = tmpvar_33;
  c_31.w = 0.0;
  c_1.xyz = c_31.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp vec3 bumpMap_7;
  highp vec3 bodyBump_8;
  highp float bodyOcc_9;
  highp vec3 trimBumpTex_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 normal_15;
  normal_15.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_15.z = sqrt((1.0 - clamp (dot (normal_15.xy, normal_15.xy), 0.0, 1.0)));
  trimBumpTex_10 = normal_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_9 = tmpvar_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BodyBumpTex, tmpvar_18).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bodyBump_8 = normal_20;
  lowp vec3 normal_21;
  normal_21.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_21.z = sqrt((1.0 - clamp (dot (normal_21.xy, normal_21.xy), 0.0, 1.0)));
  bumpMap_7 = normal_21;
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_3.x;
  trimMask_6 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_6)) * bodyOcc_9);
  tmpvar_4 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.z = 0.0;
  tmpvar_26.x = _BumpPower;
  tmpvar_26.y = _BumpPower;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((bodyBump_8 + (mix (bumpMap_7, trimBumpTex_10, vec3(trimMask_6)) * tmpvar_26)));
  tmpvar_5 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float atten_30;
  atten_30 = texture2D (_LightTexture0, vec2(tmpvar_29)).w;
  lowp vec4 c_31;
  lowp float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_33;
  tmpvar_33 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_32) * (atten_30 * 2.0));
  c_31.xyz = tmpvar_33;
  c_31.w = 0.0;
  c_1.xyz = c_31.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Matrix 48 [_LightMatrix0] 4
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedpoipahihaokhbahhaoknphhabmogcljiabaaaaaapaakaaaaaeaaaaaa
daaaaaaakeadaaaagmajaaaadeakaaaaebgpgodjgmadaaaagmadaaaaaaacpopp
pmacaaaahaaaaaaaagaaceaaaaaagmaaaaaagmaaaaaaceaaabaagmaaaaaaadaa
aeaaabaaaaaaaaaaaaaaalaaacaaafaaaaaaaaaaabaaaeaaabaaahaaaaaaaaaa
acaaaaaaabaaaiaaaaaaaaaaadaaaaaaaeaaajaaaaaaaaaaadaaamaaajaaanaa
aaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabia
abaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapjabpaaaaac
afaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoeja
afaaoekaafaaookaaeaaaaaeaaaaamoaaeaaeejaagaaeekaagaaoekaabaaaaac
aaaaapiaaiaaoekaafaaaaadabaaahiaaaaaffiabcaaoekaaeaaaaaeabaaahia
bbaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiabdaaoekaaaaakkiaabaaoeia
aeaaaaaeaaaaahiabeaaoekaaaaappiaaaaaoeiaaeaaaaaeaaaaahiaaaaaoeia
bfaappkaaaaaoejbaiaaaaadacaaaboaabaaoejaaaaaoeiaabaaaaacabaaahia
abaaoejaafaaaaadacaaahiaabaamjiaacaancjaaeaaaaaeabaaahiaacaamjja
abaanciaacaaoeibafaaaaadabaaahiaabaaoeiaabaappjaaiaaaaadacaaacoa
abaaoeiaaaaaoeiaaiaaaaadacaaaeoaacaaoejaaaaaoeiaabaaaaacaaaaahia
ahaaoekaafaaaaadacaaahiaaaaaffiabcaaoekaaeaaaaaeaaaaaliabbaakeka
aaaaaaiaacaakeiaaeaaaaaeaaaaahiabdaaoekaaaaakkiaaaaapeiaacaaaaad
aaaaahiaaaaaoeiabeaaoekaaeaaaaaeaaaaahiaaaaaoeiabfaappkaaaaaoejb
aiaaaaadadaaaboaabaaoejaaaaaoeiaaiaaaaadadaaacoaabaaoeiaaaaaoeia
aiaaaaadadaaaeoaacaaoejaaaaaoeiaafaaaaadaaaaapiaaaaaffjaaoaaoeka
aeaaaaaeaaaaapiaanaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaapaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiabaaaoekaaaaappjaaaaaoeiaafaaaaad
abaaahiaaaaaffiaacaaoekaaeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeia
aeaaaaaeaaaaahiaadaaoekaaaaakkiaabaaoeiaaeaaaaaeaeaaahoaaeaaoeka
aaaappiaaaaaoeiaafaaaaadaaaaapiaaaaaffjaakaaoekaaeaaaaaeaaaaapia
ajaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaalaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaamaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacabaaapoaafaaoeja
ppppaaaafdeieefcmaafaaaaeaaaabaahaabaaaafjaaaaaeegiocaaaaaaaaaaa
anaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaadcaaaaalmccabaaaabaaaaaa
agbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaakgiocaaaaaaaaaaaamaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaa
jgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaa
acaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaa
fgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaia
ebaaaaaaaaaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
eccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 466
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
#line 433
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
#line 437
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 448
#line 476
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 478
v2f_surf vert_surf( in appdata_full v ) {
    #line 480
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 484
    o.color = v.color;
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 488
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 493
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 466
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
#line 433
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
#line 437
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 448
#line 476
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 384
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 388
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 448
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 452
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 456
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 460
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 464
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 495
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 497
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 501
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 505
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 509
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0));
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 9 [_WorldSpaceCameraPos]
Vector 10 [_WorldSpaceLightPos0]
Matrix 5 [_World2Object]
Vector 11 [unity_Scale]
Vector 12 [_MainTex_ST]
Vector 13 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 27 ALU
PARAM c[14] = { { 1 },
		state.matrix.mvp,
		program.local[5..13] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R1.xyz, c[9];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[7];
DP4 R2.y, R1, c[6];
DP4 R2.x, R1, c[5];
MAD R2.xyz, R2, c[11].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[10];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[7];
DP4 R3.y, R0, c[6];
DP4 R3.x, R0, c[5];
DP3 result.texcoord[1].y, R3, R1;
DP3 result.texcoord[2].y, R1, R2;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[13].xyxy, c[13];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[12], c[12].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 27 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
Vector 10 [unity_Scale]
Vector 11 [_MainTex_ST]
Vector 12 [_BodyBumpTex_ST]
"vs_2_0
; 30 ALU
def c13, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.w, c13.x
mov r0.xyz, c8
dp4 r1.z, r0, c6
dp4 r1.y, r0, c5
dp4 r1.x, r0, c4
mad r3.xyz, r1, c10.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c6
dp4 r4.z, c9, r0
mov r0, c5
mov r1, c4
dp4 r4.y, c9, r0
dp4 r4.x, c9, r1
dp3 oT1.y, r4, r2
dp3 oT2.y, r2, r3
dp3 oT1.z, v2, r4
dp3 oT1.x, r4, v1
dp3 oT2.z, v2, r3
dp3 oT2.x, v1, r3
mov oD0, v5
mad oT0.zw, v4.xyxy, c12.xyxy, c12
mad oT0.xy, v3, c11, c11.zwzw
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 144 // 144 used size, 13 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 26 instructions, 2 temp regs, 0 temp arrays:
// ALU 12 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedompemdgbohbhkjmmgfnafhkhgjgjoicaabaaaaaapiafaaaaadaaaaaa
cmaaaaaapeaaaaaajiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefcfiaeaaaa
eaaaabaabgabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaa
fpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaa
aeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaadcaaaaal
mccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaaiaaaaaakgiocaaa
aaaaaaaaaiaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaah
hcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
eccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaa
abaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaa
baaaaaahcccabaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bccabaaaaeaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaa
aeaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp vec3 bumpMap_7;
  highp vec3 bodyBump_8;
  highp float bodyOcc_9;
  highp vec3 trimBumpTex_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_10 = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_9 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BodyBumpTex, tmpvar_18).xyz * 2.0) - 1.0);
  bodyBump_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_7 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_3.x;
  trimMask_6 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_6)) * bodyOcc_9);
  tmpvar_4 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.z = 0.0;
  tmpvar_26.x = _BumpPower;
  tmpvar_26.y = _BumpPower;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((bodyBump_8 + (mix (bumpMap_7, trimBumpTex_10, vec3(trimMask_6)) * tmpvar_26)));
  tmpvar_5 = tmpvar_27;
  lightDir_2 = xlv_TEXCOORD1;
  lowp vec4 c_28;
  lowp float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_30;
  tmpvar_30 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_29) * 2.0);
  c_28.xyz = tmpvar_30;
  c_28.w = 0.0;
  c_1.xyz = c_28.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp vec3 bumpMap_7;
  highp vec3 bodyBump_8;
  highp float bodyOcc_9;
  highp vec3 trimBumpTex_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 normal_15;
  normal_15.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_15.z = sqrt((1.0 - clamp (dot (normal_15.xy, normal_15.xy), 0.0, 1.0)));
  trimBumpTex_10 = normal_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_9 = tmpvar_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BodyBumpTex, tmpvar_18).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bodyBump_8 = normal_20;
  lowp vec3 normal_21;
  normal_21.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_21.z = sqrt((1.0 - clamp (dot (normal_21.xy, normal_21.xy), 0.0, 1.0)));
  bumpMap_7 = normal_21;
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_3.x;
  trimMask_6 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_6)) * bodyOcc_9);
  tmpvar_4 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.z = 0.0;
  tmpvar_26.x = _BumpPower;
  tmpvar_26.y = _BumpPower;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((bodyBump_8 + (mix (bumpMap_7, trimBumpTex_10, vec3(trimMask_6)) * tmpvar_26)));
  tmpvar_5 = tmpvar_27;
  lightDir_2 = xlv_TEXCOORD1;
  lowp vec4 c_28;
  lowp float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_30;
  tmpvar_30 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_29) * 2.0);
  c_28.xyz = tmpvar_30;
  c_28.w = 0.0;
  c_1.xyz = c_28.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 144 // 144 used size, 13 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 26 instructions, 2 temp regs, 0 temp arrays:
// ALU 12 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedgmhchodjppgijonjkkgpjkjijeeomhmoabaaaaaaliaiaaaaaeaaaaaa
daaaaaaaomacaaaaemahaaaabeaiaaaaebgpgodjleacaaaaleacaaaaaaacpopp
faacaaaageaaaaaaafaaceaaaaaagaaaaaaagaaaaaaaceaaabaagaaaaaaaahaa
acaaabaaaaaaaaaaabaaaeaaabaaadaaaaaaaaaaacaaaaaaabaaaeaaaaaaaaaa
adaaaaaaaeaaafaaaaaaaaaaadaabaaaafaaajaaaaaaaaaaaaaaaaaaaaacpopp
bpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabiaabaaapjabpaaaaacafaaacia
acaaapjabpaaaaacafaaadiaadaaapjabpaaaaacafaaaeiaaeaaapjabpaaaaac
afaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoejaabaaoekaabaaookaaeaaaaae
aaaaamoaaeaaeejaacaaeekaacaaoekaabaaaaacaaaaapiaaeaaoekaafaaaaad
abaaahiaaaaaffiaakaaoekaaeaaaaaeabaaahiaajaaoekaaaaaaaiaabaaoeia
aeaaaaaeaaaaahiaalaaoekaaaaakkiaabaaoeiaaeaaaaaeaaaaahiaamaaoeka
aaaappiaaaaaoeiaaiaaaaadacaaaboaabaaoejaaaaaoeiaabaaaaacabaaahia
abaaoejaafaaaaadacaaahiaabaamjiaacaancjaaeaaaaaeabaaahiaacaamjja
abaanciaacaaoeibafaaaaadabaaahiaabaaoeiaabaappjaaiaaaaadacaaacoa
abaaoeiaaaaaoeiaaiaaaaadacaaaeoaacaaoejaaaaaoeiaabaaaaacaaaaahia
adaaoekaafaaaaadacaaahiaaaaaffiaakaaoekaaeaaaaaeaaaaaliaajaakeka
aaaaaaiaacaakeiaaeaaaaaeaaaaahiaalaaoekaaaaakkiaaaaapeiaacaaaaad
aaaaahiaaaaaoeiaamaaoekaaeaaaaaeaaaaahiaaaaaoeiaanaappkaaaaaoejb
aiaaaaadadaaaboaabaaoejaaaaaoeiaaiaaaaadadaaacoaabaaoeiaaaaaoeia
aiaaaaadadaaaeoaacaaoejaaaaaoeiaafaaaaadaaaaapiaaaaaffjaagaaoeka
aeaaaaaeaaaaapiaafaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaahaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiaaiaaoekaaaaappjaaaaaoeiaaeaaaaae
aaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaac
abaaapoaafaaoejappppaaaafdeieefcfiaeaaaaeaaaabaabgabaaaafjaaaaae
egiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaa
gfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaa
ahaaaaaaogikcaaaaaaaaaaaahaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaa
aeaaaaaaagiecaaaaaaaaaaaaiaaaaaakgiocaaaaaaaaaaaaiaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaajgbebaaa
abaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaaacaaaaaa
cgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaadaaaaaa
egbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaa
aeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
adaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaa
adaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaaeaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 473
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 475
v2f_surf vert_surf( in appdata_full v ) {
    #line 477
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 481
    o.color = v.color;
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 485
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 489
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 473
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 491
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 493
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 497
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 501
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = IN.lightDir;
    #line 505
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), 1.0);
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_MainTex_ST]
Vector 21 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 36 ALU
PARAM c[22] = { { 1 },
		state.matrix.mvp,
		program.local[5..21] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R1.xyz, c[17];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[19].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[18];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.x, R0, c[9];
DP4 R3.y, R0, c[10];
MAD R0.xyz, R3, c[19].w, -vertex.position;
DP4 R0.w, vertex.position, c[8];
DP3 result.texcoord[1].y, R0, R1;
DP3 result.texcoord[1].z, vertex.normal, R0;
DP3 result.texcoord[1].x, R0, vertex.attrib[14];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP3 result.texcoord[2].y, R1, R2;
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
DP4 result.texcoord[3].w, R0, c[16];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 36 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_MainTex_ST]
Vector 20 [_BodyBumpTex_ST]
"vs_2_0
; 39 ALU
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.w, c21.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c18.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
mov r1, c8
dp4 r4.x, c17, r1
mad r0.xyz, r4, c18.w, -v0
dp4 r0.w, v0, c7
dp3 oT1.y, r0, r2
dp3 oT1.z, v2, r0
dp3 oT1.x, r0, v1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp3 oT2.y, r2, r3
dp3 oT2.z, v2, r3
dp3 oT2.x, v1, r3
mov oD0, v5
dp4 oT3.w, r0, c15
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mad oT0.zw, v4.xyxy, c20.xyxy, c20
mad oT0.xy, v3, c19, c19.zwzw
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Matrix 48 [_LightMatrix0] 4
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmnigehceaaljddfjdlhhmohahnllcchpabaaaaaahiahaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcmaafaaaaeaaaabaahaabaaaa
fjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaa
kgiocaaaaaaaaaaaamaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaa
adaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaadaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaafaaaaaaegiocaaaaaaaaaaa
agaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp vec3 bumpMap_7;
  highp vec3 bodyBump_8;
  highp float bodyOcc_9;
  highp vec3 trimBumpTex_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_10 = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_9 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BodyBumpTex, tmpvar_18).xyz * 2.0) - 1.0);
  bodyBump_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_7 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_3.x;
  trimMask_6 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_6)) * bodyOcc_9);
  tmpvar_4 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.z = 0.0;
  tmpvar_26.x = _BumpPower;
  tmpvar_26.y = _BumpPower;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((bodyBump_8 + (mix (bumpMap_7, trimBumpTex_10, vec3(trimMask_6)) * tmpvar_26)));
  tmpvar_5 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_28;
  highp vec2 P_29;
  P_29 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_31;
  atten_31 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, P_29).w) * texture2D (_LightTextureB0, vec2(tmpvar_30)).w);
  lowp vec4 c_32;
  lowp float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_34;
  tmpvar_34 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_33) * (atten_31 * 2.0));
  c_32.xyz = tmpvar_34;
  c_32.w = 0.0;
  c_1.xyz = c_32.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp vec3 bumpMap_7;
  highp vec3 bodyBump_8;
  highp float bodyOcc_9;
  highp vec3 trimBumpTex_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 normal_15;
  normal_15.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_15.z = sqrt((1.0 - clamp (dot (normal_15.xy, normal_15.xy), 0.0, 1.0)));
  trimBumpTex_10 = normal_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_9 = tmpvar_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BodyBumpTex, tmpvar_18).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bodyBump_8 = normal_20;
  lowp vec3 normal_21;
  normal_21.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_21.z = sqrt((1.0 - clamp (dot (normal_21.xy, normal_21.xy), 0.0, 1.0)));
  bumpMap_7 = normal_21;
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_3.x;
  trimMask_6 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_6)) * bodyOcc_9);
  tmpvar_4 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.z = 0.0;
  tmpvar_26.x = _BumpPower;
  tmpvar_26.y = _BumpPower;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((bodyBump_8 + (mix (bumpMap_7, trimBumpTex_10, vec3(trimMask_6)) * tmpvar_26)));
  tmpvar_5 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_28;
  highp vec2 P_29;
  P_29 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_31;
  atten_31 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, P_29).w) * texture2D (_LightTextureB0, vec2(tmpvar_30)).w);
  lowp vec4 c_32;
  lowp float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_34;
  tmpvar_34 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_33) * (atten_31 * 2.0));
  c_32.xyz = tmpvar_34;
  c_32.w = 0.0;
  c_1.xyz = c_32.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Matrix 48 [_LightMatrix0] 4
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedocdhnchpebgelekddiebneoidocjghikabaaaaaapaakaaaaaeaaaaaa
daaaaaaakeadaaaagmajaaaadeakaaaaebgpgodjgmadaaaagmadaaaaaaacpopp
pmacaaaahaaaaaaaagaaceaaaaaagmaaaaaagmaaaaaaceaaabaagmaaaaaaadaa
aeaaabaaaaaaaaaaaaaaalaaacaaafaaaaaaaaaaabaaaeaaabaaahaaaaaaaaaa
acaaaaaaabaaaiaaaaaaaaaaadaaaaaaaeaaajaaaaaaaaaaadaaamaaajaaanaa
aaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabia
abaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapjabpaaaaac
afaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoeja
afaaoekaafaaookaaeaaaaaeaaaaamoaaeaaeejaagaaeekaagaaoekaabaaaaac
aaaaapiaaiaaoekaafaaaaadabaaahiaaaaaffiabcaaoekaaeaaaaaeabaaahia
bbaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiabdaaoekaaaaakkiaabaaoeia
aeaaaaaeaaaaahiabeaaoekaaaaappiaaaaaoeiaaeaaaaaeaaaaahiaaaaaoeia
bfaappkaaaaaoejbaiaaaaadacaaaboaabaaoejaaaaaoeiaabaaaaacabaaahia
abaaoejaafaaaaadacaaahiaabaamjiaacaancjaaeaaaaaeabaaahiaacaamjja
abaanciaacaaoeibafaaaaadabaaahiaabaaoeiaabaappjaaiaaaaadacaaacoa
abaaoeiaaaaaoeiaaiaaaaadacaaaeoaacaaoejaaaaaoeiaabaaaaacaaaaahia
ahaaoekaafaaaaadacaaahiaaaaaffiabcaaoekaaeaaaaaeaaaaaliabbaakeka
aaaaaaiaacaakeiaaeaaaaaeaaaaahiabdaaoekaaaaakkiaaaaapeiaacaaaaad
aaaaahiaaaaaoeiabeaaoekaaeaaaaaeaaaaahiaaaaaoeiabfaappkaaaaaoejb
aiaaaaadadaaaboaabaaoejaaaaaoeiaaiaaaaadadaaacoaabaaoeiaaaaaoeia
aiaaaaadadaaaeoaacaaoejaaaaaoeiaafaaaaadaaaaapiaaaaaffjaaoaaoeka
aeaaaaaeaaaaapiaanaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaapaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiabaaaoekaaaaappjaaaaaoeiaafaaaaad
abaaapiaaaaaffiaacaaoekaaeaaaaaeabaaapiaabaaoekaaaaaaaiaabaaoeia
aeaaaaaeabaaapiaadaaoekaaaaakkiaabaaoeiaaeaaaaaeaeaaapoaaeaaoeka
aaaappiaabaaoeiaafaaaaadaaaaapiaaaaaffjaakaaoekaaeaaaaaeaaaaapia
ajaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaalaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaamaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacabaaapoaafaaoeja
ppppaaaafdeieefcmaafaaaaeaaaabaahaabaaaafjaaaaaeegiocaaaaaaaaaaa
anaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaadcaaaaalmccabaaaabaaaaaa
agbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaakgiocaaaaaaaaaaaamaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaa
jgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaa
acaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaa
fgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaia
ebaaaaaaaaaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
eccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaaaaaaaaaafaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpccabaaaafaaaaaaegiocaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaa
egaobaaaabaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 475
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 389
#line 393
#line 406
#line 414
#line 426
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 438
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
#line 442
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
#line 446
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 457
#line 485
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 487
v2f_surf vert_surf( in appdata_full v ) {
    #line 489
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 493
    o.color = v.color;
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 497
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 502
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 475
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 389
#line 393
#line 406
#line 414
#line 426
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 438
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
#line 442
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
#line 446
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 457
#line 485
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 389
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 385
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 393
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 397
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 457
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 461
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 465
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 469
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 473
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 504
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 506
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 510
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 514
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 518
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0));
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_MainTex_ST]
Vector 21 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 35 ALU
PARAM c[22] = { { 1 },
		state.matrix.mvp,
		program.local[5..21] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R1.xyz, c[17];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[19].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[18];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.x, R0, c[9];
DP4 R3.y, R0, c[10];
MAD R0.xyz, R3, c[19].w, -vertex.position;
DP3 result.texcoord[1].y, R0, R1;
DP3 result.texcoord[1].z, vertex.normal, R0;
DP3 result.texcoord[1].x, R0, vertex.attrib[14];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP3 result.texcoord[2].y, R1, R2;
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 35 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_MainTex_ST]
Vector 20 [_BodyBumpTex_ST]
"vs_2_0
; 38 ALU
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.w, c21.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c18.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
mov r1, c8
dp4 r4.x, c17, r1
mad r0.xyz, r4, c18.w, -v0
dp3 oT1.y, r0, r2
dp3 oT1.z, v2, r0
dp3 oT1.x, r0, v1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp3 oT2.y, r2, r3
dp3 oT2.z, v2, r3
dp3 oT2.x, v1, r3
mov oD0, v5
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mad oT0.zw, v4.xyxy, c20.xyxy, c20
mad oT0.xy, v3, c19, c19.zwzw
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Matrix 48 [_LightMatrix0] 4
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcmpbglomdoemhepgfadmlajgodhkgofjabaaaaaahiahaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcmaafaaaaeaaaabaahaabaaaa
fjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaa
kgiocaaaaaaaaaaaamaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaa
adaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaadaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaaeaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp vec3 bumpMap_7;
  highp vec3 bodyBump_8;
  highp float bodyOcc_9;
  highp vec3 trimBumpTex_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_10 = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_9 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BodyBumpTex, tmpvar_18).xyz * 2.0) - 1.0);
  bodyBump_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_7 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_3.x;
  trimMask_6 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_6)) * bodyOcc_9);
  tmpvar_4 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.z = 0.0;
  tmpvar_26.x = _BumpPower;
  tmpvar_26.y = _BumpPower;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((bodyBump_8 + (mix (bumpMap_7, trimBumpTex_10, vec3(trimMask_6)) * tmpvar_26)));
  tmpvar_5 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float atten_30;
  atten_30 = (texture2D (_LightTextureB0, vec2(tmpvar_29)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  lowp vec4 c_31;
  lowp float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_33;
  tmpvar_33 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_32) * (atten_30 * 2.0));
  c_31.xyz = tmpvar_33;
  c_31.w = 0.0;
  c_1.xyz = c_31.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp vec3 bumpMap_7;
  highp vec3 bodyBump_8;
  highp float bodyOcc_9;
  highp vec3 trimBumpTex_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 normal_15;
  normal_15.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_15.z = sqrt((1.0 - clamp (dot (normal_15.xy, normal_15.xy), 0.0, 1.0)));
  trimBumpTex_10 = normal_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_9 = tmpvar_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BodyBumpTex, tmpvar_18).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bodyBump_8 = normal_20;
  lowp vec3 normal_21;
  normal_21.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_21.z = sqrt((1.0 - clamp (dot (normal_21.xy, normal_21.xy), 0.0, 1.0)));
  bumpMap_7 = normal_21;
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_3.x;
  trimMask_6 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_6)) * bodyOcc_9);
  tmpvar_4 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.z = 0.0;
  tmpvar_26.x = _BumpPower;
  tmpvar_26.y = _BumpPower;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((bodyBump_8 + (mix (bumpMap_7, trimBumpTex_10, vec3(trimMask_6)) * tmpvar_26)));
  tmpvar_5 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float atten_30;
  atten_30 = (texture2D (_LightTextureB0, vec2(tmpvar_29)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  lowp vec4 c_31;
  lowp float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_33;
  tmpvar_33 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_32) * (atten_30 * 2.0));
  c_31.xyz = tmpvar_33;
  c_31.w = 0.0;
  c_1.xyz = c_31.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Matrix 48 [_LightMatrix0] 4
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedpoipahihaokhbahhaoknphhabmogcljiabaaaaaapaakaaaaaeaaaaaa
daaaaaaakeadaaaagmajaaaadeakaaaaebgpgodjgmadaaaagmadaaaaaaacpopp
pmacaaaahaaaaaaaagaaceaaaaaagmaaaaaagmaaaaaaceaaabaagmaaaaaaadaa
aeaaabaaaaaaaaaaaaaaalaaacaaafaaaaaaaaaaabaaaeaaabaaahaaaaaaaaaa
acaaaaaaabaaaiaaaaaaaaaaadaaaaaaaeaaajaaaaaaaaaaadaaamaaajaaanaa
aaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabia
abaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapjabpaaaaac
afaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoeja
afaaoekaafaaookaaeaaaaaeaaaaamoaaeaaeejaagaaeekaagaaoekaabaaaaac
aaaaapiaaiaaoekaafaaaaadabaaahiaaaaaffiabcaaoekaaeaaaaaeabaaahia
bbaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiabdaaoekaaaaakkiaabaaoeia
aeaaaaaeaaaaahiabeaaoekaaaaappiaaaaaoeiaaeaaaaaeaaaaahiaaaaaoeia
bfaappkaaaaaoejbaiaaaaadacaaaboaabaaoejaaaaaoeiaabaaaaacabaaahia
abaaoejaafaaaaadacaaahiaabaamjiaacaancjaaeaaaaaeabaaahiaacaamjja
abaanciaacaaoeibafaaaaadabaaahiaabaaoeiaabaappjaaiaaaaadacaaacoa
abaaoeiaaaaaoeiaaiaaaaadacaaaeoaacaaoejaaaaaoeiaabaaaaacaaaaahia
ahaaoekaafaaaaadacaaahiaaaaaffiabcaaoekaaeaaaaaeaaaaaliabbaakeka
aaaaaaiaacaakeiaaeaaaaaeaaaaahiabdaaoekaaaaakkiaaaaapeiaacaaaaad
aaaaahiaaaaaoeiabeaaoekaaeaaaaaeaaaaahiaaaaaoeiabfaappkaaaaaoejb
aiaaaaadadaaaboaabaaoejaaaaaoeiaaiaaaaadadaaacoaabaaoeiaaaaaoeia
aiaaaaadadaaaeoaacaaoejaaaaaoeiaafaaaaadaaaaapiaaaaaffjaaoaaoeka
aeaaaaaeaaaaapiaanaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaapaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiabaaaoekaaaaappjaaaaaoeiaafaaaaad
abaaahiaaaaaffiaacaaoekaaeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeia
aeaaaaaeaaaaahiaadaaoekaaaaakkiaabaaoeiaaeaaaaaeaeaaahoaaeaaoeka
aaaappiaaaaaoeiaafaaaaadaaaaapiaaaaaffjaakaaoekaaeaaaaaeaaaaapia
ajaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaalaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaamaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacabaaapoaafaaoeja
ppppaaaafdeieefcmaafaaaaeaaaabaahaabaaaafjaaaaaeegiocaaaaaaaaaaa
anaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaadcaaaaalmccabaaaabaaaaaa
agbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaakgiocaaaaaaaaaaaamaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaa
jgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaa
acaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaa
fgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaia
ebaaaaaaaaaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
eccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 467
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 392
#line 412
#line 428
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 432
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 436
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 440
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 449
#line 477
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 479
v2f_surf vert_surf( in appdata_full v ) {
    #line 481
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 485
    o.color = v.color;
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 489
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 494
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 467
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
uniform sampler2D _LightTextureB0;
#line 392
#line 412
#line 428
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 432
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 436
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 440
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 449
#line 477
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 385
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    #line 388
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 449
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 453
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 457
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 461
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 465
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 496
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 498
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 502
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 506
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    #line 510
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0));
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_MainTex_ST]
Vector 21 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 33 ALU
PARAM c[22] = { { 1 },
		state.matrix.mvp,
		program.local[5..21] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R1.xyz, c[17];
MOV R1.w, c[0].x;
MOV R0.xyz, vertex.attrib[14];
DP4 R2.z, R1, c[11];
DP4 R2.y, R1, c[10];
DP4 R2.x, R1, c[9];
MAD R2.xyz, R2, c[19].w, -vertex.position;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MOV R0, c[18];
MUL R1.xyz, R1, vertex.attrib[14].w;
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP3 result.texcoord[1].y, R3, R1;
DP3 result.texcoord[2].y, R1, R2;
DP3 result.texcoord[1].z, vertex.normal, R3;
DP3 result.texcoord[1].x, R3, vertex.attrib[14];
DP3 result.texcoord[2].z, vertex.normal, R2;
DP3 result.texcoord[2].x, vertex.attrib[14], R2;
MOV result.color, vertex.color;
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 33 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_MainTex_ST]
Vector 20 [_BodyBumpTex_ST]
"vs_2_0
; 36 ALU
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.w, c21.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r3.xyz, r1, c18.w, -v0
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v1.w
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
mov r1, c8
dp4 r4.x, c17, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp3 oT1.y, r4, r2
dp3 oT2.y, r2, r3
dp3 oT1.z, v2, r4
dp3 oT1.x, r4, v1
dp3 oT2.z, v2, r3
dp3 oT2.x, v1, r3
mov oD0, v5
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mad oT0.zw, v4.xyxy, c20.xyxy, c20
mad oT0.xy, v3, c19, c19.zwzw
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Matrix 48 [_LightMatrix0] 4
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 34 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedanmceooikbbcngalbicddffipmjjpgjcabaaaaaaemahaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcjeafaaaaeaaaabaagfabaaaa
fjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaaddccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaa
kgiocaaaaaaaaaaaamaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
eccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiacaaaaaaaaaaaaeaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaa
aaaaaaaaadaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaa
aaaaaaaaegiacaaaaaaaaaaaafaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
dcaaaaakdccabaaaafaaaaaaegiacaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaa
egaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp vec3 bumpMap_7;
  highp vec3 bodyBump_8;
  highp float bodyOcc_9;
  highp vec3 trimBumpTex_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_10 = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_9 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BodyBumpTex, tmpvar_18).xyz * 2.0) - 1.0);
  bodyBump_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_7 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_3.x;
  trimMask_6 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_6)) * bodyOcc_9);
  tmpvar_4 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.z = 0.0;
  tmpvar_26.x = _BumpPower;
  tmpvar_26.y = _BumpPower;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((bodyBump_8 + (mix (bumpMap_7, trimBumpTex_10, vec3(trimMask_6)) * tmpvar_26)));
  tmpvar_5 = tmpvar_27;
  lightDir_2 = xlv_TEXCOORD1;
  lowp float atten_28;
  atten_28 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  lowp vec4 c_29;
  lowp float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_31;
  tmpvar_31 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_30) * (atten_28 * 2.0));
  c_29.xyz = tmpvar_31;
  c_29.w = 0.0;
  c_1.xyz = c_29.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_1.xyz;
  tmpvar_7 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_2.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_2.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_2.z;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp vec3 bumpMap_7;
  highp vec3 bodyBump_8;
  highp float bodyOcc_9;
  highp vec3 trimBumpTex_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 normal_15;
  normal_15.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_15.z = sqrt((1.0 - clamp (dot (normal_15.xy, normal_15.xy), 0.0, 1.0)));
  trimBumpTex_10 = normal_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_9 = tmpvar_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BodyBumpTex, tmpvar_18).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  bodyBump_8 = normal_20;
  lowp vec3 normal_21;
  normal_21.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_21.z = sqrt((1.0 - clamp (dot (normal_21.xy, normal_21.xy), 0.0, 1.0)));
  bumpMap_7 = normal_21;
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_3.x;
  trimMask_6 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_6)) * bodyOcc_9);
  tmpvar_4 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.z = 0.0;
  tmpvar_26.x = _BumpPower;
  tmpvar_26.y = _BumpPower;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((bodyBump_8 + (mix (bumpMap_7, trimBumpTex_10, vec3(trimMask_6)) * tmpvar_26)));
  tmpvar_5 = tmpvar_27;
  lightDir_2 = xlv_TEXCOORD1;
  lowp float atten_28;
  atten_28 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  lowp vec4 c_29;
  lowp float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_31;
  tmpvar_31 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_30) * (atten_28 * 2.0));
  c_29.xyz = tmpvar_31;
  c_29.w = 0.0;
  c_1.xyz = c_29.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 208 // 208 used size, 14 vars
Matrix 48 [_LightMatrix0] 4
Vector 176 [_MainTex_ST] 4
Vector 192 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 400 // 16 used size, 16 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 34 instructions, 2 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedkcialmlopeaimmicibfmgebjfejcndcdabaaaaaalaakaaaaaeaaaaaa
daaaaaaajaadaaaacmajaaaapeajaaaaebgpgodjfiadaaaafiadaaaaaaacpopp
oiacaaaahaaaaaaaagaaceaaaaaagmaaaaaagmaaaaaaceaaabaagmaaaaaaadaa
aeaaabaaaaaaaaaaaaaaalaaacaaafaaaaaaaaaaabaaaeaaabaaahaaaaaaaaaa
acaaaaaaabaaaiaaaaaaaaaaadaaaaaaaeaaajaaaaaaaaaaadaaamaaajaaanaa
aaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabia
abaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapjabpaaaaac
afaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoeja
afaaoekaafaaookaaeaaaaaeaaaaamoaaeaaeejaagaaeekaagaaoekaabaaaaac
aaaaapiaaiaaoekaafaaaaadabaaahiaaaaaffiabcaaoekaaeaaaaaeabaaahia
bbaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiabdaaoekaaaaakkiaabaaoeia
aeaaaaaeaaaaahiabeaaoekaaaaappiaaaaaoeiaaiaaaaadacaaaboaabaaoeja
aaaaoeiaabaaaaacabaaahiaabaaoejaafaaaaadacaaahiaabaamjiaacaancja
aeaaaaaeabaaahiaacaamjjaabaanciaacaaoeibafaaaaadabaaahiaabaaoeia
abaappjaaiaaaaadacaaacoaabaaoeiaaaaaoeiaaiaaaaadacaaaeoaacaaoeja
aaaaoeiaabaaaaacaaaaahiaahaaoekaafaaaaadacaaahiaaaaaffiabcaaoeka
aeaaaaaeaaaaaliabbaakekaaaaaaaiaacaakeiaaeaaaaaeaaaaahiabdaaoeka
aaaakkiaaaaapeiaacaaaaadaaaaahiaaaaaoeiabeaaoekaaeaaaaaeaaaaahia
aaaaoeiabfaappkaaaaaoejbaiaaaaadadaaaboaabaaoejaaaaaoeiaaiaaaaad
adaaacoaabaaoeiaaaaaoeiaaiaaaaadadaaaeoaacaaoejaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaaoaaoekaaeaaaaaeaaaaapiaanaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaapaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiabaaaoeka
aaaappjaaaaaoeiaafaaaaadabaaadiaaaaaffiaacaaoekaaeaaaaaeaaaaadia
abaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaadiaadaaoekaaaaakkiaaaaaoeia
aeaaaaaeaeaaadoaaeaaoekaaaaappiaaaaaoeiaafaaaaadaaaaapiaaaaaffja
akaaoekaaeaaaaaeaaaaapiaajaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapia
alaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaappjaaaaaoeia
aeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeia
abaaaaacabaaapoaafaaoejappppaaaafdeieefcjeafaaaaeaaaabaagfabaaaa
fjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaaddccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaalaaaaaaogikcaaaaaaaaaaaalaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaa
kgiocaaaaaaaaaaaamaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbccabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaaheccabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbccabaaaaeaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
eccabaaaaeaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiacaaaaaaaaaaaaeaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaa
aaaaaaaaadaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaa
aaaaaaaaegiacaaaaaaaaaaaafaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
dcaaaaakdccabaaaafaaaaaaegiacaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaa
egaabaaaaaaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 466
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
#line 433
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
#line 437
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 448
#line 476
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 81
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 478
v2f_surf vert_surf( in appdata_full v ) {
    #line 480
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 484
    o.color = v.color;
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 488
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 493
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 466
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 384
#line 397
#line 405
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
#line 429
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
#line 433
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
#line 437
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 448
#line 476
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 351
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 355
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 359
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 384
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    #line 388
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 448
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 452
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 456
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 460
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 464
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 495
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 497
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    #line 501
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    #line 505
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = IN.lightDir;
    #line 509
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, IN._LightCoord).w * 1.0));
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 5
//   opengl - ALU: 47 to 59, TEX: 6 to 8
//   d3d9 - ALU: 48 to 60, TEX: 6 to 8
//   d3d11 - ALU: 26 to 36, TEX: 6 to 8, FLOW: 1 to 1
//   d3d11_9x - ALU: 26 to 36, TEX: 6 to 8, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightTexture0] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 53 ALU, 7 TEX
PARAM c[9] = { program.local[0..7],
		{ 0, 2, 1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R4.yw, fragment.texcoord[0], texture[5], 2D;
TEX R2.xyz, fragment.texcoord[0], texture[0], 2D;
TEX R5.yw, fragment.texcoord[0], texture[2], 2D;
TEX R1.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R4.xy, R4.wyzw, c[8].y, -c[8].z;
MUL R4.zw, R4.xyxy, R4.xyxy;
ADD_SAT R1.w, R4.z, R4;
MUL R2.xyz, R2, c[6];
ADD R1.w, -R1, c[8].z;
RSQ R1.w, R1.w;
MAD R1.xyz, R1, c[7], -R2;
RCP R4.z, R1.w;
MOV R0.y, c[3].x;
MOV R0.x, c[2];
MAD R5.xy, R5.wyzw, c[8].y, -c[8].z;
MAD R1.xyz, fragment.color.primary.x, R1, R2;
MOV R0.z, c[4].x;
MOV R0.w, c[5].x;
MAD R0.zw, fragment.texcoord[0], R0, R0.xyxy;
DP3 R0.y, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, c[8].x;
TEX R3.yw, R0.zwzw, texture[4], 2D;
TEX R0.x, R0.zwzw, texture[3], 2D;
TEX R0.w, R0.y, texture[6], 2D;
MAD R3.xy, R3.wyzw, c[8].y, -c[8].z;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.y, R3.z, R3.w;
MUL R3.zw, R5.xyxy, R5.xyxy;
ADD_SAT R0.z, R3, R3.w;
ADD R0.y, -R0, c[8].z;
RSQ R0.y, R0.y;
ADD R0.z, -R0, c[8];
RSQ R0.z, R0.z;
RCP R5.z, R0.z;
ADD R5.xyz, R5, -R4;
MAD R5.xyz, fragment.color.primary.x, R5, R4;
RCP R3.z, R0.y;
MOV R4.xy, c[1].x;
MOV R4.z, c[8].x;
MAD R3.xyz, R5, R4, R3;
DP3 R0.y, R3, R3;
RSQ R0.y, R0.y;
DP3 R0.z, fragment.texcoord[1], fragment.texcoord[1];
MUL R3.xyz, R0.y, R3;
RSQ R0.y, R0.z;
MUL R4.xyz, R0.y, fragment.texcoord[1];
MUL R0.xyz, R1, R0.x;
DP3 R1.w, R3, R4;
MAX R1.x, R1.w, c[8];
MUL R0.xyz, R0, c[0];
MUL R0.w, R0, c[8].y;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
END
# 53 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_2_0
; 54 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c8, 2.00000000, -1.00000000, 1.00000000, 0.00000000
dcl t0
dcl v0.x
dcl t1.xyz
dcl t3.xyz
texld r4, t0, s1
dp3 r0.x, t3, t3
mov r0.xy, r0.x
mov r3.x, c4
mov r3.y, c5.x
mov r2.y, c3.x
mov r2.x, c2
mov r1.x, t0.z
mov r1.y, t0.w
mad r1.xy, r1, r3, r2
texld r8, r0, s6
texld r2, r1, s4
texld r9, r1, s3
texld r1, t0, s5
texld r3, t0, s0
texld r0, t0, s2
mov r2.x, r2.w
mad_pp r7.xy, r2, c8.x, c8.y
mul_pp r2.xy, r7, r7
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c8.z
mov r1.x, r1.w
mad_pp r5.xy, r1, c8.x, c8.y
mov r1.x, r0.w
mov r1.y, r0
mad_pp r6.xy, r1, c8.x, c8.y
mul_pp r1.xy, r5, r5
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r6, r6
add_pp_sat r2.x, r2, r2.y
rsq_pp r0.x, r0.x
rcp_pp r7.z, r0.x
add_pp r1.x, -r1, c8.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c8.z
rsq_pp r2.x, r2.x
rcp_pp r5.z, r1.x
rcp_pp r6.z, r2.x
add r1.xyz, r6, -r5
mad r1.xyz, v0.x, r1, r5
mov r0.xy, c1.x
mov r0.z, c8.w
mad r2.xyz, r1, r0, r7
dp3 r0.x, r2, r2
dp3_pp r1.x, t1, t1
rsq_pp r1.x, r1.x
rsq r0.x, r0.x
mul r0.xyz, r0.x, r2
mul_pp r1.xyz, r1.x, t1
dp3_pp r0.x, r0, r1
mul r1.xyz, r3, c6
mad r2.xyz, r4, c7, -r1
mad r1.xyz, v0.x, r2, r1
mul r1.xyz, r1, r9.x
mul_pp r2.xyz, r1, c0
max_pp r0.x, r0, c8.w
mul_pp r1.x, r8, c8
mul_pp r0.xyz, r2, r0.x
mul r0.xyz, r0, r1.x
mov_pp r0.w, c8
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
ConstBuffer "$Globals" 208 // 156 used size, 14 vars
Vector 16 [_LightColor0] 4
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_LightTexture0] 2D 0
// 49 instructions, 4 temp regs, 0 temp arrays:
// ALU 31 float, 0 int, 0 uint
// TEX 7 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgollokogiilfahhclodhbimgfahkpbdiabaaaaaadaaiaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
amahaaaaeaaaaaaamdabaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
gcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaafaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaa
abaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaahaaaaaa
diaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaa
aaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaahaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaaeaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaa
aaaaaaaaahaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
ocaabaaaabaaaaaapgapbaaaaaaaaaaaagbjbaaaadaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaadaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaadiaaaaaiocaabaaa
aaaaaaaaagajbaaaadaaaaaafgiocaaaaaaaaaaaaiaaaaaadcaaaaalocaabaaa
abaaaaaaagajbaaaacaaaaaaagijcaaaaaaaaaaaajaaaaaafgaobaiaebaaaaaa
aaaaaaaadcaaaaajocaabaaaaaaaaaaaagbabaaaacaaaaaafgaobaaaabaaaaaa
fgaobaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaabaaaaaafgaobaaa
aaaaaaaadiaaaaaiocaabaaaaaaaaaaafgaobaaaaaaaaaaaagijcaaaaaaaaaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaefaaaaaj
pcaabaaaabaaaaaapgapbaaaaaaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
ConstBuffer "$Globals" 208 // 156 used size, 14 vars
Vector 16 [_LightColor0] 4
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_LightTexture0] 2D 0
// 49 instructions, 4 temp regs, 0 temp arrays:
// ALU 31 float, 0 int, 0 uint
// TEX 7 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecednondjfkgpijdflhhonaiobgjkleelenbabaaaaaamealaaaaaeaaaaaa
daaaaaaamaadaaaaneakaaaajaalaaaaebgpgodjiiadaaaaiiadaaaaaaacpppp
daadaaaafiaaaaaaacaaeaaaaaaafiaaaaaafiaaahaaceaaaaaafiaaagaaaaaa
aaababaaafacacaaaeadadaaadaeaeaaacafafaaabagagaaaaaaabaaabaaaaaa
aaaaaaaaaaaaahaaadaaabaaaaaaaaaaaaacppppfbaaaaafaeaaapkaaaaaaaea
aaaaialpaaaaaaaaaaaaiadpbpaaaaacaaaaaaiaaaaaaplabpaaaaacaaaaaaia
abaaaplabpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaaeaaahlabpaaaaac
aaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaacaaaaaajaacaiapka
bpaaaaacaaaaaajaadaiapkabpaaaaacaaaaaajaaeaiapkabpaaaaacaaaaaaja
afaiapkabpaaaaacaaaaaajaagaiapkaecaaaaadaaaacpiaaaaaoelaafaioeka
ecaaaaadabaacpiaaaaaoelaacaioekaecaaaaadacaaapiaaaaaoelaagaioeka
ecaaaaadadaaapiaaaaaoelaabaioekaaeaaaaaeaeaacbiaaaaappiaaeaaaaka
aeaaffkaaeaaaaaeaeaacciaaaaaffiaaeaaaakaaeaaffkaaeaaaaaeaaaacbia
abaappiaaeaaaakaaeaaffkaaeaaaaaeaaaacciaabaaffiaaeaaaakaaeaaffka
bcaaaaaeabaaadiaabaaaalaaeaaoeiaaaaaoeiaafaaaaadaaaaadiaabaaoeia
abaaaakaafaaaaadabaaabiaaaaakklaabaappkaafaaaaadabaaaciaaaaappla
acaaaakaacaaaaadabaaadiaabaaoeiaabaamjkaaiaaaaadaeaaadiaaeaaoela
aeaaoelaecaaaaadafaacpiaabaaoeiaadaioekaecaaaaadabaaapiaabaaoeia
aeaioekaecaaaaadaeaacpiaaeaaoeiaaaaioekaaeaaaaaeagaacbiaafaappia
aeaaaakaaeaaffkaaeaaaaaeagaacciaafaaffiaaeaaaakaaeaaffkafkaaaaae
aaaadiiaagaaoeiaagaaoeiaaeaakkkaacaaaaadaaaaciiaaaaappibaeaappka
ahaaaaacaaaaciiaaaaappiaagaaaaacagaaceiaaaaappiaabaaaaacaaaaaeia
aeaakkkaacaaaaadaaaaahiaaaaaoeiaagaaoeiaceaaaaacafaachiaaaaaoeia
ceaaaaacaaaachiaacaaoelaaiaaaaadacaaciiaafaaoeiaaaaaoeiaalaaaaad
adaaciiaacaappiaaeaakkkaafaaaaadaaaaadiaadaaoeiaacaamjkaafaaaaad
aaaaaeiaadaakkiaacaappkaaeaaaaaeabaaaoiaacaabliaadaablkaaaaablib
aeaaaaaeaaaaahiaabaaaalaabaabliaaaaaoeiaafaaaaadaaaachiaabaaaaia
aaaaoeiaafaaaaadaaaachiaaaaaoeiaaaaaoekaafaaaaadaaaaahiaadaappia
aaaaoeiaacaaaaadaaaaaiiaaeaaaaiaaeaaaaiaafaaaaadaaaachiaaaaappia
aaaaoeiaabaaaaacaaaaciiaaeaakkkaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcamahaaaaeaaaaaaamdabaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaafaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaa
abaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaa
ahaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaa
aiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaa
ahaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaaeaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaa
akiacaaaaaaaaaaaahaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahocaabaaaabaaaaaapgapbaaaaaaaaaaaagbjbaaaadaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaa
adaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaadiaaaaai
ocaabaaaaaaaaaaaagajbaaaadaaaaaafgiocaaaaaaaaaaaaiaaaaaadcaaaaal
ocaabaaaabaaaaaaagajbaaaacaaaaaaagijcaaaaaaaaaaaajaaaaaafgaobaia
ebaaaaaaaaaaaaaadcaaaaajocaabaaaaaaaaaaaagbabaaaacaaaaaafgaobaaa
abaaaaaafgaobaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaabaaaaaa
fgaobaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgaobaaaaaaaaaaaagijcaaa
aaaaaaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
efaaaaajpcaabaaaabaaaaaapgapbaaaaaaaaaaaeghobaaaagaaaaaaaagabaaa
aaaaaaaaaaaaaaahicaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaabejfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahahaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 47 ALU, 6 TEX
PARAM c[9] = { program.local[0..7],
		{ 0, 2, 1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R4.yw, fragment.texcoord[0], texture[2], 2D;
TEX R3.yw, fragment.texcoord[0], texture[5], 2D;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MAD R3.xy, R3.wyzw, c[8].y, -c[8].z;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD_SAT R1.w, R3.z, R3;
ADD R1.w, -R1, c[8].z;
RSQ R1.w, R1.w;
MAD R4.yz, R4.xwyw, c[8].y, -c[8].z;
MUL R1.xyz, R1, c[6];
MOV R0.w, c[3].x;
MOV R0.z, c[2].x;
RCP R3.z, R1.w;
MOV R0.x, c[4];
MOV R0.y, c[5].x;
MAD R0.xy, fragment.texcoord[0].zwzw, R0, R0.zwzw;
MOV result.color.w, c[8].x;
TEX R2.yw, R0, texture[4], 2D;
TEX R4.x, R0, texture[3], 2D;
TEX R0.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R2.xy, R2.wyzw, c[8].y, -c[8].z;
MUL R2.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.w, R2.z, R2;
MAD R0.xyz, R0, c[7], -R1;
MAD R0.xyz, fragment.color.primary.x, R0, R1;
MUL R1.xyz, R0, R4.x;
MUL R2.zw, R4.xyyz, R4.xyyz;
ADD R0.w, -R0, c[8].z;
ADD_SAT R2.z, R2, R2.w;
ADD R2.z, -R2, c[8];
RSQ R2.z, R2.z;
RCP R4.w, R2.z;
ADD R4.yzw, R4, -R3.xxyz;
MAD R3.xyz, fragment.color.primary.x, R4.yzww, R3;
RSQ R0.w, R0.w;
RCP R2.z, R0.w;
MOV R4.yz, c[1].x;
MOV R4.w, c[8].x;
MAD R2.xyz, R3, R4.yzww, R2;
DP3 R0.w, R2, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R2;
DP3 R0.w, R2, fragment.texcoord[1];
MAX R0.x, R0.w, c[8];
MUL R1.xyz, R1, c[0];
MUL R0.xyz, R1, R0.x;
MUL result.color.xyz, R0, c[8].y;
END
# 47 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
"ps_2_0
; 48 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c8, 2.00000000, -1.00000000, 1.00000000, 0.00000000
dcl t0
dcl v0.x
dcl t1.xyz
texld r4, t0, s1
texld r3, t0, s0
mov r2.x, c4
mov r2.y, c5.x
mov r1.y, c3.x
mov r1.x, c2
mov r0.x, t0.z
mov r0.y, t0.w
mad r0.xy, r0, r2, r1
texld r2, r0, s4
texld r8, r0, s3
texld r1, t0, s5
texld r0, t0, s2
mov r2.x, r2.w
mad_pp r7.xy, r2, c8.x, c8.y
mul_pp r2.xy, r7, r7
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c8.z
mov r1.x, r1.w
mad_pp r5.xy, r1, c8.x, c8.y
mov r1.x, r0.w
mov r1.y, r0
mad_pp r6.xy, r1, c8.x, c8.y
mul_pp r1.xy, r5, r5
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r6, r6
add_pp_sat r2.x, r2, r2.y
rsq_pp r0.x, r0.x
rcp_pp r7.z, r0.x
add_pp r1.x, -r1, c8.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c8.z
rsq_pp r2.x, r2.x
rcp_pp r5.z, r1.x
rcp_pp r6.z, r2.x
add r1.xyz, r6, -r5
mov r0.xy, c1.x
mov r0.z, c8.w
mad r1.xyz, v0.x, r1, r5
mad r1.xyz, r1, r0, r7
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul r0.xyz, r0.x, r1
dp3_pp r0.x, r0, t1
mul r1.xyz, r3, c6
mad r2.xyz, r4, c7, -r1
mad r1.xyz, v0.x, r2, r1
mul r1.xyz, r1, r8.x
max_pp r0.x, r0, c8.w
mul_pp r1.xyz, r1, c0
mul_pp r0.xyz, r1, r0.x
mul r0.xyz, r0, c8.x
mov_pp r0.w, c8
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 144 // 92 used size, 13 vars
Vector 16 [_LightColor0] 4
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 5
SetTexture 2 [_BumpTrimTex] 2D 4
SetTexture 3 [_BodyOcclusionTex] 2D 3
SetTexture 4 [_BodyBumpTex] 2D 2
SetTexture 5 [_BumpMap] 2D 1
// 43 instructions, 4 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmcdemmgcilnfbahecgogjnaihlcnkonpabaaaaaaeiahaaaaadaaaaaa
cmaaaaaanaaaaaaaaeabaaaaejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefcdmagaaaaeaaaaaaaipabaaaafjaaaaaeegiocaaaaaaaaaaa
agaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaae
aahabaaaafaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaa
abaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaadaaaaaa
diaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaa
aaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaa
aaaaaaaaadaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaadaaaaaadeaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaaagajbaaaadaaaaaa
fgiocaaaaaaaaaaaaeaaaaaadcaaaaalocaabaaaabaaaaaaagajbaaaacaaaaaa
agijcaaaaaaaaaaaafaaaaaafgaobaiaebaaaaaaaaaaaaaadcaaaaajocaabaaa
aaaaaaaaagbabaaaacaaaaaafgaobaaaabaaaaaafgaobaaaaaaaaaaadiaaaaah
ocaabaaaaaaaaaaaagaabaaaabaaaaaafgaobaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaafgaobaaaaaaaaaaaagijcaaaaaaaaaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 144 // 92 used size, 13 vars
Vector 16 [_LightColor0] 4
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 5
SetTexture 2 [_BumpTrimTex] 2D 4
SetTexture 3 [_BodyOcclusionTex] 2D 3
SetTexture 4 [_BodyBumpTex] 2D 2
SetTexture 5 [_BumpMap] 2D 1
// 43 instructions, 4 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedphhlfnacnbmcpjceafbjkhbfgamllhpjabaaaaaahiakaaaaaeaaaaaa
daaaaaaafmadaaaakaajaaaaeeakaaaaebgpgodjceadaaaaceadaaaaaaacpppp
naacaaaafeaaaaaaacaadmaaaaaafeaaaaaafeaaagaaceaaaaaafeaaaaaaaaaa
afababaaaeacacaaadadadaaacaeaeaaabafafaaaaaaabaaabaaaaaaaaaaaaaa
aaaaadaaadaaabaaaaaaaaaaaaacppppfbaaaaafaeaaapkaaaaaaaeaaaaaialp
aaaaaaaaaaaaiadpbpaaaaacaaaaaaiaaaaaaplabpaaaaacaaaaaaiaabaaapla
bpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaaja
abaiapkabpaaaaacaaaaaajaacaiapkabpaaaaacaaaaaajaadaiapkabpaaaaac
aaaaaajaaeaiapkabpaaaaacaaaaaajaafaiapkaecaaaaadaaaacpiaaaaaoela
aeaioekaecaaaaadabaacpiaaaaaoelaabaioekaecaaaaadacaaapiaaaaaoela
afaioekaecaaaaadadaaapiaaaaaoelaaaaioekaaeaaaaaeaeaacbiaaaaappia
aeaaaakaaeaaffkaaeaaaaaeaeaacciaaaaaffiaaeaaaakaaeaaffkaaeaaaaae
aaaacbiaabaappiaaeaaaakaaeaaffkaaeaaaaaeaaaacciaabaaffiaaeaaaaka
aeaaffkabcaaaaaeabaaadiaabaaaalaaeaaoeiaaaaaoeiaafaaaaadaaaaadia
abaaoeiaabaaaakaafaaaaadabaaabiaaaaakklaabaappkaafaaaaadabaaacia
aaaapplaacaaaakaacaaaaadabaaadiaabaaoeiaabaamjkaecaaaaadaeaacpia
abaaoeiaacaioekaecaaaaadabaaapiaabaaoeiaadaioekaaeaaaaaeafaacbia
aeaappiaaeaaaakaaeaaffkaaeaaaaaeafaacciaaeaaffiaaeaaaakaaeaaffka
fkaaaaaeaaaadiiaafaaoeiaafaaoeiaaeaakkkaacaaaaadaaaaciiaaaaappib
aeaappkaahaaaaacaaaaciiaaaaappiaagaaaaacafaaceiaaaaappiaabaaaaac
aaaaamiaaeaakkkaacaaaaadaaaaahiaaaaaoeiaafaaoeiaceaaaaacaeaachia
aaaaoeiaaiaaaaadacaaciiaaeaaoeiaacaaoelaalaaaaadadaaciiaacaappia
aeaakkkaafaaaaadaaaaadiaadaaoeiaacaamjkaafaaaaadaaaaaeiaadaakkia
acaappkaaeaaaaaeabaaaoiaacaabliaadaablkaaaaablibaeaaaaaeaaaaahia
abaaaalaabaabliaaaaaoeiaafaaaaadaaaachiaabaaaaiaaaaaoeiaafaaaaad
aaaachiaaaaaoeiaaaaaoekaafaaaaadaaaaahiaadaappiaaaaaoeiaacaaaaad
aaaachiaaaaaoeiaaaaaoeiaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefc
dmagaaaaeaaaaaaaipabaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
dcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaadaaaaaadiaaaaaiccaabaaa
abaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaaaaaaaaaidcaabaaa
abaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaaaaaaaaaaadaaaaaa
dgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaadaaaaaa
deaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
efaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaadiaaaaaiocaabaaaaaaaaaaaagajbaaaadaaaaaafgiocaaaaaaaaaaa
aeaaaaaadcaaaaalocaabaaaabaaaaaaagajbaaaacaaaaaaagijcaaaaaaaaaaa
afaaaaaafgaobaiaebaaaaaaaaaaaaaadcaaaaajocaabaaaaaaaaaaaagbabaaa
acaaaaaafgaobaaaabaaaaaafgaobaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaa
agaabaaaabaaaaaafgaobaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgaobaaa
aaaaaaaaagijcaaaaaaaaaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaajgahbaaaaaaaaaaaaaaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab
ejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaa
jfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapabaaaaimaaaaaaabaaaaaa
aaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaa
aeaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepem
epfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 59 ALU, 8 TEX
PARAM c[9] = { program.local[0..7],
		{ 0, 2, 1, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R4.yw, fragment.texcoord[0], texture[5], 2D;
TEX R2.xyz, fragment.texcoord[0], texture[0], 2D;
TEX R5.yw, fragment.texcoord[0], texture[2], 2D;
MAD R4.xy, R4.wyzw, c[8].y, -c[8].z;
MUL R4.zw, R4.xyxy, R4.xyxy;
ADD_SAT R2.w, R4.z, R4;
ADD R2.w, -R2, c[8].z;
RSQ R2.w, R2.w;
RCP R4.z, R2.w;
RCP R1.z, fragment.texcoord[3].w;
MOV R0.z, c[4].x;
MOV R0.w, c[5].x;
MOV R0.y, c[3].x;
MOV R0.x, c[2];
MAD R1.xy, fragment.texcoord[0].zwzw, R0.zwzw, R0;
MAD R0.zw, fragment.texcoord[3].xyxy, R1.z, c[8].w;
DP3 R0.y, fragment.texcoord[3], fragment.texcoord[3];
MAD R5.xy, R5.wyzw, c[8].y, -c[8].z;
MUL R2.xyz, R2, c[6];
MOV result.color.w, c[8].x;
TEX R3.yw, R1, texture[4], 2D;
TEX R0.x, R1, texture[3], 2D;
TEX R1.xyz, fragment.texcoord[0], texture[1], 2D;
TEX R0.w, R0.zwzw, texture[6], 2D;
TEX R1.w, R0.y, texture[7], 2D;
MAD R3.xy, R3.wyzw, c[8].y, -c[8].z;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.y, R3.z, R3.w;
MUL R3.zw, R5.xyxy, R5.xyxy;
ADD_SAT R0.z, R3, R3.w;
ADD R0.y, -R0, c[8].z;
RSQ R0.y, R0.y;
ADD R0.z, -R0, c[8];
RSQ R0.z, R0.z;
RCP R5.z, R0.z;
ADD R5.xyz, R5, -R4;
MAD R5.xyz, fragment.color.primary.x, R5, R4;
DP3 R0.z, fragment.texcoord[1], fragment.texcoord[1];
MAD R1.xyz, R1, c[7], -R2;
MAD R1.xyz, fragment.color.primary.x, R1, R2;
MUL R1.xyz, R1, R0.x;
SLT R0.x, c[8], fragment.texcoord[3].z;
MUL R0.x, R0, R0.w;
MUL R0.x, R0, R1.w;
RCP R3.z, R0.y;
MOV R4.xy, c[1].x;
MOV R4.z, c[8].x;
MAD R3.xyz, R5, R4, R3;
DP3 R0.y, R3, R3;
RSQ R0.y, R0.y;
RSQ R0.z, R0.z;
MUL R4.xyz, R0.z, fragment.texcoord[1];
MUL R3.xyz, R0.y, R3;
DP3 R0.y, R3, R4;
MUL R0.w, R0.x, c[8].y;
MAX R0.y, R0, c[8].x;
MUL R1.xyz, R1, c[0];
MUL R0.xyz, R1, R0.y;
MUL result.color.xyz, R0, R0.w;
END
# 59 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_2_0
; 60 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c8, 2.00000000, -1.00000000, 1.00000000, 0.00000000
def c9, 0.50000000, 0, 0, 0
dcl t0
dcl v0.x
dcl t1.xyz
dcl t3
texld r4, t0, s1
texld r3, t0, s0
mov r1.x, t0.z
mov r1.y, t0.w
mov r0.y, c3.x
mov r0.x, c2
mov r2.x, c4
mov r2.y, c5.x
mad r2.xy, r1, r2, r0
dp3 r0.x, t3, t3
mov r0.xy, r0.x
rcp r1.x, t3.w
mad r1.xy, t3, r1.x, c9.x
texld r8, r0, s7
texld r5, r2, s4
texld r9, r2, s3
texld r2, r1, s6
texld r1, t0, s5
texld r0, t0, s2
mov r2.y, r5
mov r2.x, r5.w
mad_pp r6.xy, r2, c8.x, c8.y
mul_pp r2.xy, r6, r6
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c8.z
mov r1.x, r1.w
mad_pp r5.xy, r1, c8.x, c8.y
mov r1.x, r0.w
mov r1.y, r0
mad_pp r7.xy, r1, c8.x, c8.y
mul_pp r1.xy, r5, r5
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r7, r7
add_pp_sat r2.x, r2, r2.y
rsq_pp r0.x, r0.x
rcp_pp r6.z, r0.x
add_pp r1.x, -r1, c8.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c8.z
rsq_pp r2.x, r2.x
rcp_pp r5.z, r1.x
rcp_pp r7.z, r2.x
add r1.xyz, r7, -r5
mad r1.xyz, v0.x, r1, r5
mov r0.xy, c1.x
mov r0.z, c8.w
mad r2.xyz, r1, r0, r6
dp3 r0.x, r2, r2
dp3_pp r1.x, t1, t1
rsq_pp r1.x, r1.x
rsq r0.x, r0.x
mul r0.xyz, r0.x, r2
mul_pp r1.xyz, r1.x, t1
dp3_pp r0.x, r0, r1
mul r1.xyz, r3, c6
mad r2.xyz, r4, c7, -r1
mad r1.xyz, v0.x, r2, r1
mul r2.xyz, r1, r9.x
cmp r1.x, -t3.z, c8.w, c8.z
max_pp r0.x, r0, c8.w
mul_pp r2.xyz, r2, c0
mul_pp r1.x, r1, r2.w
mul_pp r1.x, r1, r8
mul_pp r1.x, r1, c8
mul_pp r0.xyz, r2, r0.x
mul r0.xyz, r0, r1.x
mov_pp r0.w, c8
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 208 // 156 used size, 14 vars
Vector 16 [_LightColor0] 4
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DiffuseTrimTex] 2D 7
SetTexture 2 [_BumpTrimTex] 2D 6
SetTexture 3 [_BodyOcclusionTex] 2D 5
SetTexture 4 [_BodyBumpTex] 2D 4
SetTexture 5 [_BumpMap] 2D 3
SetTexture 6 [_LightTexture0] 2D 0
SetTexture 7 [_LightTextureB0] 2D 1
// 55 instructions, 4 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 1 uint
// TEX 8 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedenppjolpgofohnmcgmeapblmppjbhnecabaaaaaaaiajaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
oeahaaaaeaaaaaaapjabaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadpcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
agaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaa
eghobaaaafaaaaaaaagabaaaadaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
abaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaahaaaaaadiaaaaai
ccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaahaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
afaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaaaaaaaaaa
ahaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahocaabaaa
abaaaaaapgapbaaaaaaaaaaaagbjbaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaadiaaaaaiocaabaaaaaaaaaaa
agajbaaaadaaaaaafgiocaaaaaaaaaaaaiaaaaaadcaaaaalocaabaaaabaaaaaa
agajbaaaacaaaaaaagijcaaaaaaaaaaaajaaaaaafgaobaiaebaaaaaaaaaaaaaa
dcaaaaajocaabaaaaaaaaaaaagbabaaaacaaaaaafgaobaaaabaaaaaafgaobaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaabaaaaaafgaobaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaafgaobaaaaaaaaaaaagijcaaaaaaaaaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaafaaaaaapgbpbaaaafaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaagaaaaaaaagabaaa
aaaaaaaadbaaaaahicaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaafaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaaabaaaaaa
agaabaaaabaaaaaaeghobaaaahaaaaaaaagabaaaabaaaaaaapaaaaahicaabaaa
aaaaaaaapgapbaaaaaaaaaaaagaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 208 // 156 used size, 14 vars
Vector 16 [_LightColor0] 4
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DiffuseTrimTex] 2D 7
SetTexture 2 [_BumpTrimTex] 2D 6
SetTexture 3 [_BodyOcclusionTex] 2D 5
SetTexture 4 [_BodyBumpTex] 2D 4
SetTexture 5 [_BumpMap] 2D 3
SetTexture 6 [_LightTexture0] 2D 0
SetTexture 7 [_LightTextureB0] 2D 1
// 55 instructions, 4 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 1 uint
// TEX 8 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedaeapegbhjekicpcjhldfdeaoaiofhkdiabaaaaaaceanaaaaaeaaaaaa
daaaaaaaeiaeaaaadeamaaaapaamaaaaebgpgodjbaaeaaaabaaeaaaaaaacpppp
leadaaaafmaaaaaaacaaeeaaaaaafmaaaaaafmaaaiaaceaaaaaafmaaagaaaaaa
ahababaaaaacacaaafadadaaaeaeaeaaadafafaaacagagaaabahahaaaaaaabaa
abaaaaaaaaaaaaaaaaaaahaaadaaabaaaaaaaaaaaaacppppfbaaaaafaeaaapka
aaaaaaeaaaaaialpaaaaaaaaaaaaiadpfbaaaaafafaaapkaaaaaaadpaaaaaaaa
aaaaaaaaaaaaaaaabpaaaaacaaaaaaiaaaaaaplabpaaaaacaaaaaaiaabaaapla
bpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaaeaaaplabpaaaaacaaaaaaja
aaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaacaaaaaajaacaiapkabpaaaaac
aaaaaajaadaiapkabpaaaaacaaaaaajaaeaiapkabpaaaaacaaaaaajaafaiapka
bpaaaaacaaaaaajaagaiapkabpaaaaacaaaaaajaahaiapkaecaaaaadaaaacpia
aaaaoelaagaioekaecaaaaadabaacpiaaaaaoelaadaioekaecaaaaadacaaapia
aaaaoelaahaioekaecaaaaadadaaapiaaaaaoelaacaioekaaeaaaaaeaeaacbia
aaaappiaaeaaaakaaeaaffkaaeaaaaaeaeaacciaaaaaffiaaeaaaakaaeaaffka
aeaaaaaeaaaacbiaabaappiaaeaaaakaaeaaffkaaeaaaaaeaaaacciaabaaffia
aeaaaakaaeaaffkabcaaaaaeabaaadiaabaaaalaaeaaoeiaaaaaoeiaafaaaaad
aaaaadiaabaaoeiaabaaaakaafaaaaadabaaabiaaaaakklaabaappkaafaaaaad
abaaaciaaaaapplaacaaaakaacaaaaadabaaadiaabaaoeiaabaamjkaagaaaaac
aaaaaiiaaeaapplaaeaaaaaeaeaaadiaaeaaoelaaaaappiaafaaaakaaiaaaaad
aaaaaiiaaeaaoelaaeaaoelaabaaaaacafaaadiaaaaappiaecaaaaadagaacpia
abaaoeiaaeaioekaecaaaaadabaaapiaabaaoeiaafaioekaecaaaaadaeaacpia
aeaaoeiaaaaioekaecaaaaadafaacpiaafaaoeiaabaioekaaeaaaaaeaeaacbia
agaappiaaeaaaakaaeaaffkaaeaaaaaeaeaacciaagaaffiaaeaaaakaaeaaffka
fkaaaaaeaaaadiiaaeaaoeiaaeaaoeiaaeaakkkaacaaaaadaaaaciiaaaaappib
aeaappkaahaaaaacaaaaciiaaaaappiaagaaaaacaeaaceiaaaaappiaabaaaaac
aaaaaeiaaeaakkkaacaaaaadaaaaahiaaaaaoeiaaeaaoeiaceaaaaacaeaachia
aaaaoeiaceaaaaacaaaachiaacaaoelaaiaaaaadacaaciiaaeaaoeiaaaaaoeia
alaaaaadadaaciiaacaappiaaeaakkkaafaaaaadaaaaadiaadaaoeiaacaamjka
afaaaaadaaaaaeiaadaakkiaacaappkaaeaaaaaeabaaaoiaacaabliaadaablka
aaaablibaeaaaaaeaaaaahiaabaaaalaabaabliaaaaaoeiaafaaaaadaaaachia
abaaaaiaaaaaoeiaafaaaaadaaaachiaaaaaoeiaaaaaoekaafaaaaadaaaaahia
adaappiaaaaaoeiaafaaaaadaaaaciiaaeaappiaafaaaaiafiaaaaaeaaaaciia
aeaakklbaeaakkkaaaaappiaacaaaaadaaaaaiiaaaaappiaaaaappiaafaaaaad
aaaachiaaaaappiaaaaaoeiaabaaaaacaaaaciiaaeaakkkaabaaaaacaaaicpia
aaaaoeiappppaaaafdeieefcoeahaaaaeaaaaaaapjabaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaad
aagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaa
ahaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacaeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaagaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaadaaaaaadcaaaaap
dcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaa
aaaaaaaaahaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaa
aaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaa
aaaaaaaaahaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaafaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaa
adaaaaaaakiacaaaaaaaaaaaahaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahocaabaaaabaaaaaapgapbaaaaaaaaaaaagbjbaaaadaaaaaa
baaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaefaaaaajpcaabaaa
acaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaahaaaaaaefaaaaaj
pcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaa
diaaaaaiocaabaaaaaaaaaaaagajbaaaadaaaaaafgiocaaaaaaaaaaaaiaaaaaa
dcaaaaalocaabaaaabaaaaaaagajbaaaacaaaaaaagijcaaaaaaaaaaaajaaaaaa
fgaobaiaebaaaaaaaaaaaaaadcaaaaajocaabaaaaaaaaaaaagbabaaaacaaaaaa
fgaobaaaabaaaaaafgaobaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaa
abaaaaaafgaobaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgaobaaaaaaaaaaa
agijcaaaaaaaaaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
jgahbaaaaaaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaafaaaaaapgbpbaaa
afaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaagaaaaaaaagabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaafaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
efaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaahaaaaaaaagabaaa
abaaaaaaapaaaaahicaabaaaaaaaaaaapgapbaaaaaaaaaaaagaabaaaabaaaaaa
diaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaabejfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahahaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 55 ALU, 8 TEX
PARAM c[9] = { program.local[0..7],
		{ 0, 2, 1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R4.yw, fragment.texcoord[0], texture[5], 2D;
TEX R2.xyz, fragment.texcoord[0], texture[0], 2D;
TEX R5.yw, fragment.texcoord[0], texture[2], 2D;
TEX R1.xyz, fragment.texcoord[0], texture[1], 2D;
TEX R1.w, fragment.texcoord[3], texture[7], CUBE;
MAD R4.xy, R4.wyzw, c[8].y, -c[8].z;
MUL R4.zw, R4.xyxy, R4.xyxy;
ADD_SAT R2.w, R4.z, R4;
MUL R2.xyz, R2, c[6];
ADD R2.w, -R2, c[8].z;
RSQ R2.w, R2.w;
MAD R1.xyz, R1, c[7], -R2;
RCP R4.z, R2.w;
MOV R0.y, c[3].x;
MOV R0.x, c[2];
MAD R5.xy, R5.wyzw, c[8].y, -c[8].z;
MOV R0.z, c[4].x;
MOV R0.w, c[5].x;
MAD R0.zw, fragment.texcoord[0], R0, R0.xyxy;
DP3 R0.y, fragment.texcoord[3], fragment.texcoord[3];
MAD R1.xyz, fragment.color.primary.x, R1, R2;
MOV result.color.w, c[8].x;
TEX R0.x, R0.zwzw, texture[3], 2D;
TEX R3.yw, R0.zwzw, texture[4], 2D;
TEX R0.w, R0.y, texture[6], 2D;
MUL R1.xyz, R1, R0.x;
MAD R3.xy, R3.wyzw, c[8].y, -c[8].z;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.y, R3.z, R3.w;
MUL R3.zw, R5.xyxy, R5.xyxy;
MUL R0.x, R0.w, R1.w;
ADD_SAT R0.z, R3, R3.w;
ADD R0.y, -R0, c[8].z;
RSQ R0.y, R0.y;
ADD R0.z, -R0, c[8];
RSQ R0.z, R0.z;
RCP R5.z, R0.z;
ADD R5.xyz, R5, -R4;
MAD R5.xyz, fragment.color.primary.x, R5, R4;
DP3 R0.z, fragment.texcoord[1], fragment.texcoord[1];
RCP R3.z, R0.y;
MOV R4.xy, c[1].x;
MOV R4.z, c[8].x;
MAD R3.xyz, R5, R4, R3;
DP3 R0.y, R3, R3;
RSQ R0.y, R0.y;
RSQ R0.z, R0.z;
MUL R4.xyz, R0.z, fragment.texcoord[1];
MUL R3.xyz, R0.y, R3;
DP3 R0.y, R3, R4;
MUL R0.w, R0.x, c[8].y;
MAX R0.y, R0, c[8].x;
MUL R1.xyz, R1, c[0];
MUL R0.xyz, R1, R0.y;
MUL result.color.xyz, R0, R0.w;
END
# 55 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_2_0
; 56 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c8, 2.00000000, -1.00000000, 1.00000000, 0.00000000
dcl t0
dcl v0.x
dcl t1.xyz
dcl t3.xyz
texld r4, t0, s1
dp3 r0.x, t3, t3
mov r0.xy, r0.x
mov r3.x, c4
mov r3.y, c5.x
mov r2.y, c3.x
mov r2.x, c2
mov r1.x, t0.z
mov r1.y, t0.w
mad r1.xy, r1, r3, r2
texld r8, r0, s6
texld r5, r1, s4
texld r9, r1, s3
texld r1, t0, s5
texld r3, t0, s0
texld r2, t3, s7
texld r0, t0, s2
mov r2.y, r5
mov r2.x, r5.w
mad_pp r6.xy, r2, c8.x, c8.y
mul_pp r2.xy, r6, r6
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c8.z
mov r1.x, r1.w
mad_pp r5.xy, r1, c8.x, c8.y
mov r1.x, r0.w
mov r1.y, r0
mad_pp r7.xy, r1, c8.x, c8.y
mul_pp r1.xy, r5, r5
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r7, r7
add_pp_sat r2.x, r2, r2.y
rsq_pp r0.x, r0.x
rcp_pp r6.z, r0.x
add_pp r1.x, -r1, c8.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c8.z
rsq_pp r2.x, r2.x
rcp_pp r5.z, r1.x
rcp_pp r7.z, r2.x
add r1.xyz, r7, -r5
mad r1.xyz, v0.x, r1, r5
mov r0.xy, c1.x
mov r0.z, c8.w
mad r2.xyz, r1, r0, r6
dp3 r0.x, r2, r2
dp3_pp r1.x, t1, t1
rsq_pp r1.x, r1.x
rsq r0.x, r0.x
mul r0.xyz, r0.x, r2
mul_pp r1.xyz, r1.x, t1
dp3_pp r0.x, r0, r1
mul r1.xyz, r3, c6
mad r2.xyz, r4, c7, -r1
mad r1.xyz, v0.x, r2, r1
mul r2.xyz, r1, r9.x
mul r1.x, r8, r2.w
max_pp r0.x, r0, c8.w
mul_pp r2.xyz, r2, c0
mul_pp r1.x, r1, c8
mul_pp r0.xyz, r2, r0.x
mul r0.xyz, r0, r1.x
mov_pp r0.w, c8
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 208 // 156 used size, 14 vars
Vector 16 [_LightColor0] 4
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DiffuseTrimTex] 2D 7
SetTexture 2 [_BumpTrimTex] 2D 6
SetTexture 3 [_BodyOcclusionTex] 2D 5
SetTexture 4 [_BodyBumpTex] 2D 4
SetTexture 5 [_BumpMap] 2D 3
SetTexture 6 [_LightTextureB0] 2D 1
SetTexture 7 [_LightTexture0] CUBE 0
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 31 float, 0 int, 0 uint
// TEX 8 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbbmdplompnlfjplfkcmakmekkmbdiefeabaaaaaahaaiaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
emahaaaaeaaaaaaandabaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
agaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaa
eghobaaaafaaaaaaaagabaaaadaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
abaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaahaaaaaadiaaaaai
ccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaahaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
afaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaaaaaaaaaa
ahaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahocaabaaa
abaaaaaapgapbaaaaaaaaaaaagbjbaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaajgahbaaaabaaaaaadeaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaadiaaaaaiocaabaaaaaaaaaaa
agajbaaaadaaaaaafgiocaaaaaaaaaaaaiaaaaaadcaaaaalocaabaaaabaaaaaa
agajbaaaacaaaaaaagijcaaaaaaaaaaaajaaaaaafgaobaiaebaaaaaaaaaaaaaa
dcaaaaajocaabaaaaaaaaaaaagbabaaaacaaaaaafgaobaaaabaaaaaafgaobaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaabaaaaaafgaobaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaafgaobaaaaaaaaaaaagijcaaaaaaaaaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaa
abaaaaaapgapbaaaaaaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbcbaaaafaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaa
apaaaaahicaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaah
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 208 // 156 used size, 14 vars
Vector 16 [_LightColor0] 4
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DiffuseTrimTex] 2D 7
SetTexture 2 [_BumpTrimTex] 2D 6
SetTexture 3 [_BodyOcclusionTex] 2D 5
SetTexture 4 [_BodyBumpTex] 2D 4
SetTexture 5 [_BumpMap] 2D 3
SetTexture 6 [_LightTextureB0] 2D 1
SetTexture 7 [_LightTexture0] CUBE 0
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 31 float, 0 int, 0 uint
// TEX 8 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedgbldajgaodjhmcpecdllbdagjcmgiohjabaaaaaadeamaaaaaeaaaaaa
daaaaaaapaadaaaaeealaaaaaaamaaaaebgpgodjliadaaaaliadaaaaaaacpppp
fmadaaaafmaaaaaaacaaeeaaaaaafmaaaaaafmaaaiaaceaaaaaafmaaahaaaaaa
agababaaaaacacaaafadadaaaeaeaeaaadafafaaacagagaaabahahaaaaaaabaa
abaaaaaaaaaaaaaaaaaaahaaadaaabaaaaaaaaaaaaacppppfbaaaaafaeaaapka
aaaaaaeaaaaaialpaaaaaaaaaaaaiadpbpaaaaacaaaaaaiaaaaaaplabpaaaaac
aaaaaaiaabaaaplabpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaaeaaahla
bpaaaaacaaaaaajiaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaacaaaaaaja
acaiapkabpaaaaacaaaaaajaadaiapkabpaaaaacaaaaaajaaeaiapkabpaaaaac
aaaaaajaafaiapkabpaaaaacaaaaaajaagaiapkabpaaaaacaaaaaajaahaiapka
ecaaaaadaaaacpiaaaaaoelaagaioekaecaaaaadabaacpiaaaaaoelaadaioeka
ecaaaaadacaaapiaaaaaoelaahaioekaecaaaaadadaaapiaaaaaoelaacaioeka
ecaaaaadaeaaapiaaeaaoelaaaaioekaaeaaaaaeaeaacbiaaaaappiaaeaaaaka
aeaaffkaaeaaaaaeaeaacciaaaaaffiaaeaaaakaaeaaffkaaeaaaaaeaaaacbia
abaappiaaeaaaakaaeaaffkaaeaaaaaeaaaacciaabaaffiaaeaaaakaaeaaffka
bcaaaaaeabaaadiaabaaaalaaeaaoeiaaaaaoeiaafaaaaadaaaaadiaabaaoeia
abaaaakaafaaaaadabaaabiaaaaakklaabaappkaafaaaaadabaaaciaaaaappla
acaaaakaacaaaaadabaaadiaabaaoeiaabaamjkaaiaaaaadaeaaadiaaeaaoela
aeaaoelaecaaaaadafaacpiaabaaoeiaaeaioekaecaaaaadabaaapiaabaaoeia
afaioekaecaaaaadagaaapiaaeaaoeiaabaioekaaeaaaaaeaeaacbiaafaappia
aeaaaakaaeaaffkaaeaaaaaeaeaacciaafaaffiaaeaaaakaaeaaffkafkaaaaae
aaaadiiaaeaaoeiaaeaaoeiaaeaakkkaacaaaaadaaaaciiaaaaappibaeaappka
ahaaaaacaaaaciiaaaaappiaagaaaaacaeaaceiaaaaappiaabaaaaacaaaaaeia
aeaakkkaacaaaaadaaaaahiaaaaaoeiaaeaaoeiaceaaaaacaeaachiaaaaaoeia
ceaaaaacaaaachiaacaaoelaaiaaaaadacaaciiaaeaaoeiaaaaaoeiaalaaaaad
adaaciiaacaappiaaeaakkkaafaaaaadaaaaadiaadaaoeiaacaamjkaafaaaaad
aaaaaeiaadaakkiaacaappkaaeaaaaaeabaaaoiaacaabliaadaablkaaaaablib
aeaaaaaeaaaaahiaabaaaalaabaabliaaaaaoeiaafaaaaadaaaachiaabaaaaia
aaaaoeiaafaaaaadaaaachiaaaaaoeiaaaaaoekaafaaaaadaaaaahiaadaappia
aaaaoeiaafaaaaadaaaaciiaaeaappiaagaaaaiaacaaaaadaaaaaiiaaaaappia
aaaappiaafaaaaadaaaachiaaaaappiaaaaaoeiaabaaaaacaaaaciiaaeaakkka
abaaaaacaaaicpiaaaaaoeiappppaaaafdeieefcemahaaaaeaaaaaaandabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaad
bcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaagaaaaaadcaaaaapdcaabaaa
aaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaa
adaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
abaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaa
abaaaaaadkiacaaaaaaaaaaaahaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaa
abaaaaaaakiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaajgifcaaaaaaaaaaaahaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaadcaaaaapdcaabaaa
acaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaa
dgaaaaagbcaabaaaadaaaaaaakiacaaaaaaaaaaaahaaaaaadgaaaaafecaabaaa
adaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
agacbaaaadaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahocaabaaaabaaaaaapgapbaaaaaaaaaaa
agbjbaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaa
abaaaaaadeaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
ahaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaacaaaaaadiaaaaaiocaabaaaaaaaaaaaagajbaaaadaaaaaafgiocaaa
aaaaaaaaaiaaaaaadcaaaaalocaabaaaabaaaaaaagajbaaaacaaaaaaagijcaaa
aaaaaaaaajaaaaaafgaobaiaebaaaaaaaaaaaaaadcaaaaajocaabaaaaaaaaaaa
agbabaaaacaaaaaafgaobaaaabaaaaaafgaobaaaaaaaaaaadiaaaaahocaabaaa
aaaaaaaaagaabaaaabaaaaaafgaobaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaa
fgaobaaaaaaaaaaaagijcaaaaaaaaaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaaaaaaaaaa
eghobaaaagaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaa
afaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
agaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaa
doaaaaabejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
apapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapabaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahaaaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightTexture0] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 49 ALU, 7 TEX
PARAM c[9] = { program.local[0..7],
		{ 0, 2, 1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R4.yw, fragment.texcoord[0], texture[5], 2D;
TEX R2.xyz, fragment.texcoord[0], texture[0], 2D;
TEX R5.yw, fragment.texcoord[0], texture[2], 2D;
TEX R1.xyz, fragment.texcoord[0], texture[1], 2D;
MAD R4.xy, R4.wyzw, c[8].y, -c[8].z;
MUL R4.zw, R4.xyxy, R4.xyxy;
ADD_SAT R1.w, R4.z, R4;
MUL R2.xyz, R2, c[6];
ADD R1.w, -R1, c[8].z;
RSQ R1.w, R1.w;
MAD R1.xyz, R1, c[7], -R2;
RCP R4.z, R1.w;
MOV R0.y, c[3].x;
MOV R0.x, c[2];
MAD R5.xy, R5.wyzw, c[8].y, -c[8].z;
MAD R1.xyz, fragment.color.primary.x, R1, R2;
MOV R0.z, c[4].x;
MOV R0.w, c[5].x;
MAD R0.zw, fragment.texcoord[0], R0, R0.xyxy;
MOV result.color.w, c[8].x;
TEX R3.yw, R0.zwzw, texture[4], 2D;
TEX R0.x, R0.zwzw, texture[3], 2D;
TEX R0.w, fragment.texcoord[3], texture[6], 2D;
MAD R3.xy, R3.wyzw, c[8].y, -c[8].z;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD_SAT R0.y, R3.z, R3.w;
MUL R3.zw, R5.xyxy, R5.xyxy;
ADD_SAT R0.z, R3, R3.w;
ADD R0.y, -R0, c[8].z;
RSQ R0.y, R0.y;
ADD R0.z, -R0, c[8];
RSQ R0.z, R0.z;
RCP R5.z, R0.z;
ADD R5.xyz, R5, -R4;
MAD R5.xyz, fragment.color.primary.x, R5, R4;
RCP R3.z, R0.y;
MOV R4.xy, c[1].x;
MOV R4.z, c[8].x;
MAD R3.xyz, R5, R4, R3;
DP3 R0.y, R3, R3;
RSQ R0.y, R0.y;
MUL R3.xyz, R0.y, R3;
MUL R0.xyz, R1, R0.x;
DP3 R1.w, R3, fragment.texcoord[1];
MAX R1.x, R1.w, c[8];
MUL R0.xyz, R0, c[0];
MUL R0.w, R0, c[8].y;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
END
# 49 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Float 1 [_BumpPower]
Float 2 [_AtlasOffsetX]
Float 3 [_AtlasOffsetY]
Float 4 [_AtlasScaleX]
Float 5 [_AtlasScaleY]
Vector 6 [_Color]
Vector 7 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_2_0
; 50 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c8, 2.00000000, -1.00000000, 1.00000000, 0.00000000
dcl t0
dcl v0.x
dcl t1.xyz
dcl t3.xy
texld r4, t0, s1
texld r3, t0, s0
mov r1.x, t0.z
mov r1.y, t0.w
mov r2.x, c4
mov r2.y, c5.x
mov r0.y, c3.x
mov r0.x, c2
mad r0.xy, r1, r2, r0
texld r5, r0, s4
texld r8, r0, s3
texld r1, t0, s5
texld r2, t3, s6
texld r0, t0, s2
mov r2.y, r5
mov r2.x, r5.w
mad_pp r7.xy, r2, c8.x, c8.y
mul_pp r2.xy, r7, r7
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c8.z
mov r1.x, r1.w
mad_pp r5.xy, r1, c8.x, c8.y
mov r1.x, r0.w
mov r1.y, r0
mad_pp r6.xy, r1, c8.x, c8.y
mul_pp r1.xy, r5, r5
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r6, r6
add_pp_sat r2.x, r2, r2.y
rsq_pp r0.x, r0.x
rcp_pp r7.z, r0.x
add_pp r1.x, -r1, c8.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c8.z
rsq_pp r2.x, r2.x
rcp_pp r5.z, r1.x
rcp_pp r6.z, r2.x
add r1.xyz, r6, -r5
mov r0.xy, c1.x
mov r0.z, c8.w
mad r1.xyz, v0.x, r1, r5
mad r1.xyz, r1, r0, r7
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul r0.xyz, r0.x, r1
dp3_pp r0.x, r0, t1
mul r1.xyz, r3, c6
mad r2.xyz, r4, c7, -r1
mad r1.xyz, v0.x, r2, r1
mul r1.xyz, r1, r8.x
mul_pp r2.xyz, r1, c0
max_pp r0.x, r0, c8.w
mul_pp r1.x, r2.w, c8
mul_pp r0.xyz, r2, r0.x
mul r0.xyz, r0, r1.x
mov_pp r0.w, c8
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 208 // 156 used size, 14 vars
Vector 16 [_LightColor0] 4
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_LightTexture0] 2D 0
// 45 instructions, 4 temp regs, 0 temp arrays:
// ALU 27 float, 0 int, 0 uint
// TEX 7 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlepgpegmnpkecfahafjcapnadlpajnbeabaaaaaamiahaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaadadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
keagaaaaeaaaaaaakjabaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
gcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaaddcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaafaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaa
abaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaahaaaaaa
diaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaa
aaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaahaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaaeaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaa
aaaaaaaaahaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaadaaaaaadeaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaadiaaaaaiocaabaaaaaaaaaaaagajbaaaadaaaaaa
fgiocaaaaaaaaaaaaiaaaaaadcaaaaalocaabaaaabaaaaaaagajbaaaacaaaaaa
agijcaaaaaaaaaaaajaaaaaafgaobaiaebaaaaaaaaaaaaaadcaaaaajocaabaaa
aaaaaaaaagbabaaaacaaaaaafgaobaaaabaaaaaafgaobaaaaaaaaaaadiaaaaah
ocaabaaaaaaaaaaaagaabaaaabaaaaaafgaobaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaafgaobaaaaaaaaaaaagijcaaaaaaaaaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaafaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 208 // 156 used size, 14 vars
Vector 16 [_LightColor0] 4
Float 112 [_BumpPower]
Float 116 [_AtlasOffsetX]
Float 120 [_AtlasOffsetY]
Float 124 [_AtlasScaleX]
Float 128 [_AtlasScaleY]
Vector 132 [_Color] 3
Vector 144 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DiffuseTrimTex] 2D 6
SetTexture 2 [_BumpTrimTex] 2D 5
SetTexture 3 [_BodyOcclusionTex] 2D 4
SetTexture 4 [_BodyBumpTex] 2D 3
SetTexture 5 [_BumpMap] 2D 2
SetTexture 6 [_LightTexture0] 2D 0
// 45 instructions, 4 temp regs, 0 temp arrays:
// ALU 27 float, 0 int, 0 uint
// TEX 7 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedfiokcacfbgbbgaefkjadjnedkgdhhopmabaaaaaaeaalaaaaaeaaaaaa
daaaaaaakeadaaaafaakaaaaamalaaaaebgpgodjgmadaaaagmadaaaaaaacpppp
beadaaaafiaaaaaaacaaeaaaaaaafiaaaaaafiaaahaaceaaaaaafiaaagaaaaaa
aaababaaafacacaaaeadadaaadaeaeaaacafafaaabagagaaaaaaabaaabaaaaaa
aaaaaaaaaaaaahaaadaaabaaaaaaaaaaaaacppppfbaaaaafaeaaapkaaaaaaaea
aaaaialpaaaaaaaaaaaaiadpbpaaaaacaaaaaaiaaaaaaplabpaaaaacaaaaaaia
abaaaplabpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaaeaaadlabpaaaaac
aaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaacaaaaaajaacaiapka
bpaaaaacaaaaaajaadaiapkabpaaaaacaaaaaajaaeaiapkabpaaaaacaaaaaaja
afaiapkabpaaaaacaaaaaajaagaiapkaecaaaaadaaaacpiaaaaaoelaafaioeka
ecaaaaadabaacpiaaaaaoelaacaioekaecaaaaadacaaapiaaaaaoelaagaioeka
ecaaaaadadaaapiaaaaaoelaabaioekaecaaaaadaeaacpiaaeaaoelaaaaioeka
aeaaaaaeaeaacbiaaaaappiaaeaaaakaaeaaffkaaeaaaaaeaeaacciaaaaaffia
aeaaaakaaeaaffkaaeaaaaaeaaaacbiaabaappiaaeaaaakaaeaaffkaaeaaaaae
aaaacciaabaaffiaaeaaaakaaeaaffkabcaaaaaeabaaadiaabaaaalaaeaaoeia
aaaaoeiaafaaaaadaaaaadiaabaaoeiaabaaaakaafaaaaadabaaabiaaaaakkla
abaappkaafaaaaadabaaaciaaaaapplaacaaaakaacaaaaadabaaadiaabaaoeia
abaamjkaecaaaaadafaacpiaabaaoeiaadaioekaecaaaaadabaaapiaabaaoeia
aeaioekaaeaaaaaeaeaacbiaafaappiaaeaaaakaaeaaffkaaeaaaaaeaeaaccia
afaaffiaaeaaaakaaeaaffkafkaaaaaeaaaadiiaaeaaoeiaaeaaoeiaaeaakkka
acaaaaadaaaaciiaaaaappibaeaappkaahaaaaacaaaaciiaaaaappiaagaaaaac
aeaaceiaaaaappiaabaaaaacaaaaaeiaaeaakkkaacaaaaadaaaaahiaaaaaoeia
aeaaoeiaceaaaaacaeaachiaaaaaoeiaaiaaaaadacaaciiaaeaaoeiaacaaoela
alaaaaadadaaciiaacaappiaaeaakkkaafaaaaadaaaaadiaadaaoeiaacaamjka
afaaaaadaaaaaeiaadaakkiaacaappkaaeaaaaaeabaaaoiaacaabliaadaablka
aaaablibaeaaaaaeaaaaahiaabaaaalaabaabliaaaaaoeiaafaaaaadaaaachia
abaaaaiaaaaaoeiaafaaaaadaaaachiaaaaaoeiaaaaaoekaafaaaaadaaaaahia
adaappiaaaaaoeiaacaaaaadaaaaaiiaaeaappiaaeaappiaafaaaaadaaaachia
aaaappiaaaaaoeiaabaaaaacaaaaciiaaeaakkkaabaaaaacaaaicpiaaaaaoeia
ppppaaaafdeieefckeagaaaaeaaaaaaakjabaaaafjaaaaaeegiocaaaaaaaaaaa
akaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaa
agaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaaddcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacaeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaafaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaadcaaaaap
dcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaa
aaaaaaaaahaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaa
aaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaa
aaaaaaaaahaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaa
adaaaaaaakiacaaaaaaaaaaaahaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaadaaaaaadeaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaadiaaaaaiocaabaaaaaaaaaaa
agajbaaaadaaaaaafgiocaaaaaaaaaaaaiaaaaaadcaaaaalocaabaaaabaaaaaa
agajbaaaacaaaaaaagijcaaaaaaaaaaaajaaaaaafgaobaiaebaaaaaaaaaaaaaa
dcaaaaajocaabaaaaaaaaaaaagbabaaaacaaaaaafgaobaaaabaaaaaafgaobaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaabaaaaaafgaobaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaafgaobaaaaaaaaaaaagijcaaaaaaaaaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaegbabaaaafaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaaaaadoaaaaabejfdeheoleaaaaaaagaaaaaaaiaaaaaa
jiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
acaaaaaaapabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaaaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaafaaaaaaadadaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

}
	}
	Pass {
		Name "PREPASS"
		Tags { "LightMode" = "PrePassBase" }
		Fog {Mode Off}
Program "vp" {
// Vertex combos: 1
//   opengl - ALU: 23 to 23
//   d3d9 - ALU: 24 to 24
//   d3d11 - ALU: 15 to 15, TEX: 0 to 0, FLOW: 1 to 1
//   d3d11_9x - ALU: 15 to 15, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 5 [_Object2World]
Vector 9 [unity_Scale]
Vector 10 [_MainTex_ST]
Vector 11 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 23 ALU
PARAM c[12] = { program.local[0],
		state.matrix.mvp,
		program.local[5..11] };
TEMP R0;
TEMP R1;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, R0, vertex.attrib[14].w;
DP3 R0.y, R1, c[5];
DP3 R0.x, vertex.attrib[14], c[5];
DP3 R0.z, vertex.normal, c[5];
MUL result.texcoord[1].xyz, R0, c[9].w;
DP3 R0.y, R1, c[6];
DP3 R0.x, vertex.attrib[14], c[6];
DP3 R0.z, vertex.normal, c[6];
MUL result.texcoord[2].xyz, R0, c[9].w;
DP3 R0.y, R1, c[7];
DP3 R0.x, vertex.attrib[14], c[7];
DP3 R0.z, vertex.normal, c[7];
MUL result.texcoord[3].xyz, R0, c[9].w;
MOV result.color, vertex.color;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[11].xyxy, c[11];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[10], c[10].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 23 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Vector 8 [unity_Scale]
Vector 9 [_MainTex_ST]
Vector 10 [_BodyBumpTex_ST]
"vs_2_0
; 24 ALU
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r0.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r0, v1.w
dp3 r0.y, r1, c4
dp3 r0.x, v1, c4
dp3 r0.z, v2, c4
mul oT1.xyz, r0, c8.w
dp3 r0.y, r1, c5
dp3 r0.x, v1, c5
dp3 r0.z, v2, c5
mul oT2.xyz, r0, c8.w
dp3 r0.y, r1, c6
dp3 r0.x, v1, c6
dp3 r0.z, v2, c6
mul oT3.xyz, r0, c8.w
mov oD0, v5
mad oT0.zw, v4.xyxy, c10.xyxy, c10
mad oT0.xy, v3, c9, c9.zwzw
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 144 // 144 used size, 13 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerDraw" 1
// 32 instructions, 3 temp regs, 0 temp arrays:
// ALU 15 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedppfkcfpjfmiiikgamdnmfnljjicogljcabaaaaaabiagaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcgaaeaaaaeaaaabaabiabaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaabfaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacadaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaa
dcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaaiaaaaaa
kgiocaaaaaaaaaaaaiaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaa
dgaaaaagbcaabaaaabaaaaaaakiacaaaabaaaaaaamaaaaaadgaaaaagccaabaaa
abaaaaaaakiacaaaabaaaaaaanaaaaaadgaaaaagecaabaaaabaaaaaaakiacaaa
abaaaaaaaoaaaaaabaaaaaahccaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahecaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaai
hccabaaaadaaaaaaegacbaaaacaaaaaapgipcaaaabaaaaaabeaaaaaadgaaaaag
bcaabaaaabaaaaaabkiacaaaabaaaaaaamaaaaaadgaaaaagccaabaaaabaaaaaa
bkiacaaaabaaaaaaanaaaaaadgaaaaagecaabaaaabaaaaaabkiacaaaabaaaaaa
aoaaaaaabaaaaaahccaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbcaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
ecaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaihccabaaa
aeaaaaaaegacbaaaacaaaaaapgipcaaaabaaaaaabeaaaaaadgaaaaagbcaabaaa
abaaaaaackiacaaaabaaaaaaamaaaaaadgaaaaagccaabaaaabaaaaaackiacaaa
abaaaaaaanaaaaaadgaaaaagecaabaaaabaaaaaackiacaaaabaaaaaaaoaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaihccabaaaafaaaaaa
egacbaaaaaaaaaaapgipcaaaabaaaaaabeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  vec3 v_7;
  v_7.x = _Object2World[0].x;
  v_7.y = _Object2World[1].x;
  v_7.z = _Object2World[2].x;
  vec3 v_8;
  v_8.x = _Object2World[0].y;
  v_8.y = _Object2World[1].y;
  v_8.z = _Object2World[2].y;
  vec3 v_9;
  v_9.x = _Object2World[0].z;
  v_9.y = _Object2World[1].z;
  v_9.z = _Object2World[2].z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((tmpvar_6 * v_7) * unity_Scale.w);
  xlv_TEXCOORD2 = ((tmpvar_6 * v_8) * unity_Scale.w);
  xlv_TEXCOORD3 = ((tmpvar_6 * v_9) * unity_Scale.w);
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp vec3 trimBumpTex_8;
  highp vec3 trimDifTex_9;
  highp vec3 mainTex_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_9 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_8 = tmpvar_13;
  highp vec2 tmpvar_14;
  tmpvar_14.x = _AtlasScaleX;
  tmpvar_14.y = _AtlasScaleY;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasOffsetX;
  tmpvar_15.y = _AtlasOffsetY;
  highp vec2 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD0.zw * tmpvar_14) + tmpvar_15);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BodyBumpTex, tmpvar_16).xyz * 2.0) - 1.0);
  bodyBump_7 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_6 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = tmpvar_3.x;
  trimMask_5 = tmpvar_19;
  mainTex_10 = (mainTex_10 * _Color);
  trimDifTex_9 = (trimDifTex_9 * _TrimColor);
  highp vec3 tmpvar_20;
  tmpvar_20.z = 0.0;
  tmpvar_20.x = _BumpPower;
  tmpvar_20.y = _BumpPower;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_8, vec3(trimMask_5)) * tmpvar_20)));
  tmpvar_4 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1, tmpvar_4);
  worldN_2.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2, tmpvar_4);
  worldN_2.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD3, tmpvar_4);
  worldN_2.z = tmpvar_24;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4 = tmpvar_1.xyz;
  tmpvar_5 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = tmpvar_2.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = tmpvar_2.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = tmpvar_2.z;
  vec3 v_7;
  v_7.x = _Object2World[0].x;
  v_7.y = _Object2World[1].x;
  v_7.z = _Object2World[2].x;
  vec3 v_8;
  v_8.x = _Object2World[0].y;
  v_8.y = _Object2World[1].y;
  v_8.z = _Object2World[2].y;
  vec3 v_9;
  v_9.x = _Object2World[0].z;
  v_9.y = _Object2World[1].z;
  v_9.z = _Object2World[2].z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((tmpvar_6 * v_7) * unity_Scale.w);
  xlv_TEXCOORD2 = ((tmpvar_6 * v_8) * unity_Scale.w);
  xlv_TEXCOORD3 = ((tmpvar_6 * v_9) * unity_Scale.w);
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_4;
  mediump float trimMask_5;
  highp vec3 bumpMap_6;
  highp vec3 bodyBump_7;
  highp vec3 trimBumpTex_8;
  highp vec3 trimDifTex_9;
  highp vec3 mainTex_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_9 = tmpvar_12;
  lowp vec3 normal_13;
  normal_13.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_13.z = sqrt((1.0 - clamp (dot (normal_13.xy, normal_13.xy), 0.0, 1.0)));
  trimBumpTex_8 = normal_13;
  highp vec2 tmpvar_14;
  tmpvar_14.x = _AtlasScaleX;
  tmpvar_14.y = _AtlasScaleY;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasOffsetX;
  tmpvar_15.y = _AtlasOffsetY;
  highp vec2 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD0.zw * tmpvar_14) + tmpvar_15);
  lowp vec3 normal_17;
  normal_17.xy = ((texture2D (_BodyBumpTex, tmpvar_16).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  bodyBump_7 = normal_17;
  lowp vec3 normal_18;
  normal_18.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  bumpMap_6 = normal_18;
  highp float tmpvar_19;
  tmpvar_19 = tmpvar_3.x;
  trimMask_5 = tmpvar_19;
  mainTex_10 = (mainTex_10 * _Color);
  trimDifTex_9 = (trimDifTex_9 * _TrimColor);
  highp vec3 tmpvar_20;
  tmpvar_20.z = 0.0;
  tmpvar_20.x = _BumpPower;
  tmpvar_20.y = _BumpPower;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((bodyBump_7 + (mix (bumpMap_6, trimBumpTex_8, vec3(trimMask_5)) * tmpvar_20)));
  tmpvar_4 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1, tmpvar_4);
  worldN_2.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2, tmpvar_4);
  worldN_2.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD3, tmpvar_4);
  worldN_2.z = tmpvar_24;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 144 // 144 used size, 13 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerDraw" 1
// 32 instructions, 3 temp regs, 0 temp arrays:
// ALU 15 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedflniooohnnjbmkgjdgoniobnipokmnppabaaaaaaniaiaaaaaeaaaaaa
daaaaaaaomacaaaafeahaaaabmaiaaaaebgpgodjleacaaaaleacaaaaaaacpopp
fmacaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaahaa
acaaabaaaaaaaaaaabaaaaaaaeaaadaaaaaaaaaaabaaamaaadaaahaaaaaaaaaa
abaabeaaabaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadia
adaaapjabpaaaaacafaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaae
aaaaadoaadaaoejaabaaoekaabaaookaaeaaaaaeaaaaamoaaeaaeejaacaaeeka
acaaoekaabaaaaacaaaaahiaabaaoejaafaaaaadabaaahiaaaaamjiaacaancja
aeaaaaaeaaaaahiaacaamjjaaaaanciaabaaoeibafaaaaadaaaaahiaaaaaoeia
abaappjaabaaaaacabaaabiaahaaaakaabaaaaacabaaaciaaiaaaakaabaaaaac
abaaaeiaajaaaakaaiaaaaadacaaaciaaaaaoeiaabaaoeiaaiaaaaadacaaabia
abaaoejaabaaoeiaaiaaaaadacaaaeiaacaaoejaabaaoeiaafaaaaadacaaahoa
acaaoeiaakaappkaabaaaaacabaaabiaahaaffkaabaaaaacabaaaciaaiaaffka
abaaaaacabaaaeiaajaaffkaaiaaaaadacaaaciaaaaaoeiaabaaoeiaaiaaaaad
acaaabiaabaaoejaabaaoeiaaiaaaaadacaaaeiaacaaoejaabaaoeiaafaaaaad
adaaahoaacaaoeiaakaappkaabaaaaacabaaabiaahaakkkaabaaaaacabaaacia
aiaakkkaabaaaaacabaaaeiaajaakkkaaiaaaaadaaaaaciaaaaaoeiaabaaoeia
aiaaaaadaaaaabiaabaaoejaabaaoeiaaiaaaaadaaaaaeiaacaaoejaabaaoeia
afaaaaadaeaaahoaaaaaoeiaakaappkaafaaaaadaaaaapiaaaaaffjaaeaaoeka
aeaaaaaeaaaaapiaadaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaafaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiaagaaoekaaaaappjaaaaaoeiaaeaaaaae
aaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaac
abaaapoaafaaoejappppaaaafdeieefcgaaeaaaaeaaaabaabiabaaaafjaaaaae
egiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaabfaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaa
gfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaadcaaaaal
mccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaaiaaaaaakgiocaaa
aaaaaaaaaiaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaah
hcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaabaaaaaadgaaaaag
bcaabaaaabaaaaaaakiacaaaabaaaaaaamaaaaaadgaaaaagccaabaaaabaaaaaa
akiacaaaabaaaaaaanaaaaaadgaaaaagecaabaaaabaaaaaaakiacaaaabaaaaaa
aoaaaaaabaaaaaahccaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahbcaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
ecaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaihccabaaa
adaaaaaaegacbaaaacaaaaaapgipcaaaabaaaaaabeaaaaaadgaaaaagbcaabaaa
abaaaaaabkiacaaaabaaaaaaamaaaaaadgaaaaagccaabaaaabaaaaaabkiacaaa
abaaaaaaanaaaaaadgaaaaagecaabaaaabaaaaaabkiacaaaabaaaaaaaoaaaaaa
baaaaaahccaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
acaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaihccabaaaaeaaaaaa
egacbaaaacaaaaaapgipcaaaabaaaaaabeaaaaaadgaaaaagbcaabaaaabaaaaaa
ckiacaaaabaaaaaaamaaaaaadgaaaaagccaabaaaabaaaaaackiacaaaabaaaaaa
anaaaaaadgaaaaagecaabaaaabaaaaaackiacaaaabaaaaaaaoaaaaaabaaaaaah
ccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaaaaaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaadiaaaaaihccabaaaafaaaaaaegacbaaa
aaaaaaaapgipcaaaabaaaaaabeaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apadaaaalaaaaaaaabaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeo
ehefeofeaaeoepfcenebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheo
leaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec3 TtoW0;
    highp vec3 TtoW1;
    highp vec3 TtoW2;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 490
#line 476
v2f_surf vert_surf( in appdata_full v ) {
    #line 478
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 482
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    #line 486
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    o.color = v.color;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec3 TtoW0;
    highp vec3 TtoW1;
    highp vec3 TtoW2;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 490
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 490
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 494
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 498
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 502
    surf( surfIN, o);
    lowp vec3 worldN;
    worldN.x = dot( IN.TtoW0, o.Normal);
    worldN.y = dot( IN.TtoW1, o.Normal);
    #line 506
    worldN.z = dot( IN.TtoW2, o.Normal);
    o.Normal = worldN;
    lowp vec4 res;
    res.xyz = ((o.Normal * 0.5) + 0.5);
    #line 510
    res.w = o.Specular;
    return res;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 1
//   opengl - ALU: 39 to 39, TEX: 3 to 3
//   d3d9 - ALU: 43 to 43, TEX: 3 to 3
//   d3d11 - ALU: 22 to 22, TEX: 3 to 3, FLOW: 1 to 1
//   d3d11_9x - ALU: 22 to 22, TEX: 3 to 3, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { }
Float 0 [_BumpPower]
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
SetTexture 0 [_BumpTrimTex] 2D
SetTexture 1 [_BodyBumpTex] 2D
SetTexture 2 [_BumpMap] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 39 ALU, 3 TEX
PARAM c[6] = { program.local[0..4],
		{ 0, 2, 1, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R3.yw, fragment.texcoord[0], texture[0], 2D;
MOV R0.z, c[3].x;
MOV R0.w, c[4].x;
MAD R2.xy, R3.wyzw, c[5].y, -c[5].z;
MOV R0.y, c[2].x;
MOV R0.x, c[1];
MAD R0.xy, fragment.texcoord[0].zwzw, R0.zwzw, R0;
MOV result.color.w, c[5].x;
TEX R1.yw, R0, texture[1], 2D;
TEX R0.yw, fragment.texcoord[0], texture[2], 2D;
MAD R1.xy, R1.wyzw, c[5].y, -c[5].z;
MUL R1.zw, R1.xyxy, R1.xyxy;
ADD_SAT R0.x, R1.z, R1.w;
ADD R2.w, -R0.x, c[5].z;
MAD R0.xy, R0.wyzw, c[5].y, -c[5].z;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.z, R0, R0.w;
MUL R1.zw, R0.xyxy, R0.xyxy;
ADD_SAT R1.z, R1, R1.w;
ADD R0.w, -R1.z, c[5].z;
RSQ R1.z, R0.w;
ADD R0.z, -R0, c[5];
RSQ R0.w, R0.z;
RCP R2.z, R0.w;
RCP R0.z, R1.z;
ADD R2.xyz, R2, -R0;
MAD R2.xyz, fragment.color.primary.x, R2, R0;
RSQ R0.w, R2.w;
RCP R1.z, R0.w;
MOV R0.xy, c[0].x;
MOV R0.z, c[5].x;
MAD R0.xyz, R2, R0, R1;
DP3 R0.w, R0, R0;
RSQ R0.w, R0.w;
MUL R1.xyz, R0.w, R0;
DP3 R0.z, fragment.texcoord[3], R1;
DP3 R0.x, R1, fragment.texcoord[1];
DP3 R0.y, R1, fragment.texcoord[2];
MAD result.color.xyz, R0, c[5].w, c[5].w;
END
# 39 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { }
Float 0 [_BumpPower]
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
SetTexture 0 [_BumpTrimTex] 2D
SetTexture 1 [_BodyBumpTex] 2D
SetTexture 2 [_BumpMap] 2D
"ps_2_0
; 43 ALU, 3 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c5, 2.00000000, -1.00000000, 1.00000000, 0.00000000
def c6, 0.50000000, 0, 0, 0
dcl t0
dcl v0.x
dcl t1.xyz
dcl t2.xyz
dcl t3.xyz
mov r2.x, c3
mov r2.y, c4.x
mov r1.y, c2.x
mov r1.x, c1
mov r0.x, t0.z
mov r0.y, t0.w
mad r0.xy, r0, r2, r1
texld r2, r0, s1
texld r1, t0, s2
texld r0, t0, s0
mov r2.x, r2.w
mad_pp r5.xy, r2, c5.x, c5.y
mul_pp r2.xy, r5, r5
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c5.z
mov r1.x, r1.w
mad_pp r3.xy, r1, c5.x, c5.y
mov r1.x, r0.w
mov r1.y, r0
mad_pp r4.xy, r1, c5.x, c5.y
mul_pp r1.xy, r3, r3
add_pp_sat r1.x, r1, r1.y
rsq_pp r0.x, r0.x
rcp_pp r5.z, r0.x
mul_pp r2.xy, r4, r4
add_pp_sat r2.x, r2, r2.y
add_pp r1.x, -r1, c5.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c5.z
rsq_pp r2.x, r2.x
rcp_pp r3.z, r1.x
rcp_pp r4.z, r2.x
add r1.xyz, r4, -r3
mov r0.xy, c0.x
mov r0.z, c5.w
mad r1.xyz, v0.x, r1, r3
mad r1.xyz, r1, r0, r5
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul r1.xyz, r0.x, r1
dp3 r0.z, t3, r1
dp3 r0.x, r1, t1
dp3 r0.y, r1, t2
mad_pp r0.xyz, r0, c6.x, c6.x
mov_pp r0.w, c5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { }
ConstBuffer "$Globals" 144 // 68 used size, 13 vars
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_BumpTrimTex] 2D 2
SetTexture 1 [_BodyBumpTex] 2D 1
SetTexture 2 [_BumpMap] 2D 0
// 35 instructions, 3 temp regs, 0 temp arrays:
// ALU 22 float, 0 int, 0 uint
// TEX 3 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjdmbcncbifdgfcedkcocdijmcmjelilpabaaaaaacmagaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
aiafaaaaeaaaaaaaecabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaad
bcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaa
efaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
acaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaaaaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
abaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
dcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaa
dkaabaaaaaaaaaaadgaaaaagbcaabaaaacaaaaaaakiacaaaaaaaaaaaadaaaaaa
dgaaaaafecaabaaaacaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagacbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
baaaaaahccaabaaaabaaaaaaegbcbaaaaeaaaaaaegacbaaaaaaaaaaabaaaaaah
ecaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaaaaaaaaaadcaaaaaphccabaaa
aaaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { }
ConstBuffer "$Globals" 144 // 68 used size, 13 vars
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
BindCB "$Globals" 0
SetTexture 0 [_BumpTrimTex] 2D 2
SetTexture 1 [_BodyBumpTex] 2D 1
SetTexture 2 [_BumpMap] 2D 0
// 35 instructions, 3 temp regs, 0 temp arrays:
// ALU 22 float, 0 int, 0 uint
// TEX 3 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedkgbkenfmfpmgmdldemfjnokgocinhfhpabaaaaaamiaiaaaaaeaaaaaa
daaaaaaamiacaaaaniahaaaajeaiaaaaebgpgodjjaacaaaajaacaaaaaaacpppp
feacaaaadmaaaaaaabaadaaaaaaadmaaaaaadmaaadaaceaaaaaadmaaacaaaaaa
abababaaaaacacaaaaaaadaaacaaaaaaaaaaaaaaaaacppppfbaaaaafacaaapka
aaaaaaeaaaaaialpaaaaaaaaaaaaiadpfbaaaaafadaaapkaaaaaaadpaaaaaaaa
aaaaaaaaaaaaaaaabpaaaaacaaaaaaiaaaaaaplabpaaaaacaaaaaaiaabaaapla
bpaaaaacaaaaaaiaacaaahlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaia
aeaaahlabpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaac
aaaaaajaacaiapkaafaaaaadaaaaabiaaaaakklaaaaappkaafaaaaadaaaaacia
aaaapplaabaaaakaacaaaaadaaaaadiaaaaaoeiaaaaamjkaecaaaaadabaacpia
aaaaoelaacaioekaecaaaaadacaacpiaaaaaoelaaaaioekaecaaaaadaaaacpia
aaaaoeiaabaioekaaeaaaaaeadaacbiaabaappiaacaaaakaacaaffkaaeaaaaae
adaacciaabaaffiaacaaaakaacaaffkaaeaaaaaeabaacbiaacaappiaacaaaaka
acaaffkaaeaaaaaeabaacciaacaaffiaacaaaakaacaaffkabcaaaaaeaaaaafia
abaaaalaadaamjiaabaamjiaafaaaaadabaaadiaaaaanciaaaaaaakaaeaaaaae
acaacbiaaaaappiaacaaaakaacaaffkaaeaaaaaeacaacciaaaaaffiaacaaaaka
acaaffkafkaaaaaeabaadiiaacaaoeiaacaaoeiaacaakkkaacaaaaadabaaciia
abaappibacaappkaahaaaaacabaaciiaabaappiaagaaaaacacaaceiaabaappia
abaaaaacabaaaeiaacaakkkaacaaaaadaaaaahiaabaaoeiaacaaoeiaceaaaaac
abaachiaaaaaoeiaaiaaaaadaaaacbiaacaaoelaabaaoeiaaiaaaaadaaaaccia
adaaoelaabaaoeiaaiaaaaadaaaaceiaaeaaoelaabaaoeiaaeaaaaaeaaaachia
aaaaoeiaadaaaakaadaaaakaabaaaaacaaaaciiaacaakkkaabaaaaacaaaicpia
aaaaoeiappppaaaafdeieefcaiafaaaaeaaaaaaaecabaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaaaaaaaaadcaaaaap
dcaabaaaabaaaaaahgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaa
aaaaaaaaadaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaa
aaaaaaaaaeaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaa
aaaaaaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaacaaaaaa
akiacaaaaaaaaaaaadaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaacaaaaaaegacbaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
adaaaaaaegacbaaaaaaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaaaeaaaaaa
egacbaaaaaaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaa
aaaaaaaadcaaaaaphccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaadpaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaabejfdeheoleaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaapabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahahaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaa
keaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { }
"!!GLES3"
}

}
	}
	Pass {
		Name "PREPASS"
		Tags { "LightMode" = "PrePassFinal" }
		ZWrite Off
Program "vp" {
// Vertex combos: 6
//   opengl - ALU: 22 to 30
//   d3d9 - ALU: 22 to 30
//   d3d11 - ALU: 10 to 15, TEX: 0 to 0, FLOW: 1 to 1
//   d3d11_9x - ALU: 10 to 15, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 9 [_ProjectionParams]
Vector 10 [unity_SHAr]
Vector 11 [unity_SHAg]
Vector 12 [unity_SHAb]
Vector 13 [unity_SHBr]
Vector 14 [unity_SHBg]
Vector 15 [unity_SHBb]
Vector 16 [unity_SHC]
Matrix 5 [_Object2World]
Vector 17 [unity_Scale]
Vector 18 [_MainTex_ST]
Vector 19 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 30 ALU
PARAM c[20] = { { 0.5, 1 },
		state.matrix.mvp,
		program.local[5..19] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R1.xyz, vertex.normal, c[17].w;
DP3 R2.w, R1, c[6];
DP3 R0.x, R1, c[5];
DP3 R0.z, R1, c[7];
MOV R0.y, R2.w;
MUL R1, R0.xyzz, R0.yzzx;
MOV R0.w, c[0].y;
DP4 R2.z, R0, c[12];
DP4 R2.y, R0, c[11];
DP4 R2.x, R0, c[10];
MUL R0.y, R2.w, R2.w;
DP4 R3.z, R1, c[15];
DP4 R3.y, R1, c[14];
DP4 R3.x, R1, c[13];
DP4 R1.w, vertex.position, c[4];
DP4 R1.z, vertex.position, c[3];
MAD R0.x, R0, R0, -R0.y;
ADD R3.xyz, R2, R3;
MUL R2.xyz, R0.x, c[16];
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
MUL R0.xyz, R1.xyww, c[0].x;
MUL R0.y, R0, c[9].x;
ADD result.texcoord[2].xyz, R3, R2;
ADD result.texcoord[1].xy, R0, R0.z;
MOV result.position, R1;
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R1;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[19].xyxy, c[19];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[18], c[18].zwzw;
END
# 30 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_ProjectionParams]
Vector 9 [_ScreenParams]
Vector 10 [unity_SHAr]
Vector 11 [unity_SHAg]
Vector 12 [unity_SHAb]
Vector 13 [unity_SHBr]
Vector 14 [unity_SHBg]
Vector 15 [unity_SHBb]
Vector 16 [unity_SHC]
Matrix 4 [_Object2World]
Vector 17 [unity_Scale]
Vector 18 [_MainTex_ST]
Vector 19 [_BodyBumpTex_ST]
"vs_2_0
; 30 ALU
def c20, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_texcoord1 v3
dcl_color0 v4
mul r1.xyz, v1, c17.w
dp3 r2.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r2.w
mul r1, r0.xyzz, r0.yzzx
mov r0.w, c20.y
dp4 r2.z, r0, c12
dp4 r2.y, r0, c11
dp4 r2.x, r0, c10
mul r0.y, r2.w, r2.w
dp4 r3.z, r1, c15
dp4 r3.y, r1, c14
dp4 r3.x, r1, c13
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
mad r0.x, r0, r0, -r0.y
add r3.xyz, r2, r3
mul r2.xyz, r0.x, c16
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c20.x
mul r0.y, r0, c8.x
add oT2.xyz, r3, r2
mad oT1.xy, r0.z, c9.zwzw, r0
mov oPos, r1
mov oD0, v4
mov oT1.zw, r1
mad oT0.zw, v3.xyxy, c19.xyxy, c19
mad oT0.xy, v2, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 14 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 29 instructions, 4 temp regs, 0 temp arrays:
// ALU 15 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedoclnopmdmlejhcmolglabhammhbalhefabaaaaaaaiagaaaaadaaaaaa
cmaaaaaapeaaaaaajiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefcgiaeaaaa
eaaaabaabkabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaaeegiocaaa
adaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaa
gfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaa
ahaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
aiaaaaaakgiocaaaaaaaaaaaaiaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
hcaabaaaaaaaaaaaegbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
lcaabaaaaaaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaibaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaa
aaaaaaaaegadbaaaaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaiadp
bbaaaaaibcaabaaaabaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaaaaaaaaa
bbaaaaaiccaabaaaabaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaaaaaaaaa
bbaaaaaiecaabaaaabaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaacaaaaaajgacbaaaaaaaaaaaegakbaaaaaaaaaaabbaaaaai
bcaabaaaadaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaacaaaaaabbaaaaai
ccaabaaaadaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaacaaaaaabbaaaaai
ecaabaaaadaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaahccaabaaa
aaaaaaaabkaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaadcaaaaak
hccabaaaaeaaaaaaegiccaaaacaaaaaabiaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp float bodyOcc_7;
  highp vec3 trimDifTex_8;
  highp vec3 mainTex_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_9 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_8 = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12.x = _AtlasScaleX;
  tmpvar_12.y = _AtlasScaleY;
  highp vec2 tmpvar_13;
  tmpvar_13.x = _AtlasOffsetX;
  tmpvar_13.y = _AtlasOffsetY;
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0.zw * tmpvar_12) + tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_BodyOcclusionTex, tmpvar_14).x;
  bodyOcc_7 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = tmpvar_4.x;
  trimMask_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (mainTex_9 * _Color);
  mainTex_9 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (trimDifTex_8 * _TrimColor);
  trimDifTex_8 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (mix (tmpvar_17, tmpvar_18, vec3(trimMask_6)) * bodyOcc_7);
  tmpvar_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_21.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_22;
  lowp vec4 c_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_5 * light_3.xyz);
  c_23.xyz = tmpvar_24;
  c_23.w = 0.0;
  c_2 = c_23;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp float bodyOcc_7;
  highp vec3 trimDifTex_8;
  highp vec3 mainTex_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_9 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_8 = tmpvar_11;
  lowp vec3 normal_12;
  normal_12.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_12.z = sqrt((1.0 - clamp (dot (normal_12.xy, normal_12.xy), 0.0, 1.0)));
  highp vec2 tmpvar_13;
  tmpvar_13.x = _AtlasScaleX;
  tmpvar_13.y = _AtlasScaleY;
  highp vec2 tmpvar_14;
  tmpvar_14.x = _AtlasOffsetX;
  tmpvar_14.y = _AtlasOffsetY;
  highp vec2 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD0.zw * tmpvar_13) + tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_BodyOcclusionTex, tmpvar_15).x;
  bodyOcc_7 = tmpvar_16;
  lowp vec3 normal_17;
  normal_17.xy = ((texture2D (_BodyBumpTex, tmpvar_15).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  lowp vec3 normal_18;
  normal_18.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  highp float tmpvar_19;
  tmpvar_19 = tmpvar_4.x;
  trimMask_6 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = (mainTex_9 * _Color);
  mainTex_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (trimDifTex_8 * _TrimColor);
  trimDifTex_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mix (tmpvar_20, tmpvar_21, vec3(trimMask_6)) * bodyOcc_7);
  tmpvar_5 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_24.w;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_25;
  lowp vec4 c_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_5 * light_3.xyz);
  c_26.xyz = tmpvar_27;
  c_26.w = 0.0;
  c_2 = c_26;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 14 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 29 instructions, 4 temp regs, 0 temp arrays:
// ALU 15 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedbgdfchpcncijgkcaologjljjmjjnegihabaaaaaaniaiaaaaaeaaaaaa
daaaaaaapmacaaaagmahaaaadeaiaaaaebgpgodjmeacaaaameacaaaaaaacpopp
feacaaaahaaaaaaaagaaceaaaaaagmaaaaaagmaaaaaaceaaabaagmaaaaaaahaa
acaaabaaaaaaaaaaabaaafaaabaaadaaaaaaaaaaacaabcaaahaaaeaaaaaaaaaa
adaaaaaaaeaaalaaaaaaaaaaadaaamaaadaaapaaaaaaaaaaadaabeaaabaabcaa
aaaaaaaaaaaaaaaaaaacpoppfbaaaaafbdaaapkaaaaaaadpaaaaiadpaaaaaaaa
aaaaaaaabpaaaaacafaaaaiaaaaaapjabpaaaaacafaaaciaacaaapjabpaaaaac
afaaadiaadaaapjabpaaaaacafaaaeiaaeaaapjabpaaaaacafaaafiaafaaapja
aeaaaaaeaaaaadoaadaaoejaabaaoekaabaaookaaeaaaaaeaaaaamoaaeaaeeja
acaaeekaacaaoekaafaaaaadaaaaapiaaaaaffjaamaaoekaaeaaaaaeaaaaapia
alaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaanaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaaoaaoekaaaaappjaaaaaoeiaafaaaaadabaaabiaaaaaffia
adaaaakaafaaaaadabaaaiiaabaaaaiabdaaaakaafaaaaadabaaafiaaaaapeia
bdaaaakaacaaaaadacaaadoaabaakkiaabaaomiaafaaaaadabaaahiaacaaoeja
bcaappkaafaaaaadacaaahiaabaaffiabaaaoekaaeaaaaaeabaaaliaapaakeka
abaaaaiaacaakeiaaeaaaaaeabaaahiabbaaoekaabaakkiaabaapeiaabaaaaac
abaaaiiabdaaffkaajaaaaadacaaabiaaeaaoekaabaaoeiaajaaaaadacaaacia
afaaoekaabaaoeiaajaaaaadacaaaeiaagaaoekaabaaoeiaafaaaaadadaaapia
abaacjiaabaakeiaajaaaaadaeaaabiaahaaoekaadaaoeiaajaaaaadaeaaacia
aiaaoekaadaaoeiaajaaaaadaeaaaeiaajaaoekaadaaoeiaacaaaaadacaaahia
acaaoeiaaeaaoeiaafaaaaadabaaaciaabaaffiaabaaffiaaeaaaaaeabaaabia
abaaaaiaabaaaaiaabaaffibaeaaaaaeadaaahoaakaaoekaabaaaaiaacaaoeia
aeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeia
abaaaaacacaaamoaaaaaoeiaabaaaaacabaaapoaafaaoejappppaaaafdeieefc
giaeaaaaeaaaabaabkabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaae
egiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaal
dccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaa
aaaaaaaaahaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaa
aaaaaaaaaiaaaaaakgiocaaaaaaaaaaaaiaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaafaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaa
aaaaaaaaaaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaihcaabaaaaaaaaaaaegbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaaklcaabaaaaaaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaa
egaibaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaa
aaaaiadpbbaaaaaibcaabaaaabaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaa
aaaaaaaabbaaaaaiccaabaaaabaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaa
aaaaaaaabbaaaaaiecaabaaaabaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaa
aaaaaaaadiaaaaahpcaabaaaacaaaaaajgacbaaaaaaaaaaaegakbaaaaaaaaaaa
bbaaaaaibcaabaaaadaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaacaaaaaa
bbaaaaaiccaabaaaadaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaacaaaaaa
bbaaaaaiecaabaaaadaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaa
dcaaaaakhccabaaaaeaaaaaaegiccaaaacaaaaaabiaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 473
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 489
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 475
v2f_surf vert_surf( in appdata_full v ) {
    #line 477
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 481
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    o.vlight = ShadeSH9( vec4( worldN, 1.0));
    #line 485
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 473
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 489
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 368
    return c;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 489
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 493
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 497
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 501
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    #line 505
    light.xyz += IN.vlight;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_ProjectionParams]
Vector 14 [unity_ShadowFadeCenterAndType]
Matrix 9 [_Object2World]
Vector 15 [unity_LightmapST]
Vector 16 [_MainTex_ST]
Vector 17 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 22 ALU
PARAM c[18] = { { 0.5, 1 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		program.local[9..17] };
TEMP R0;
TEMP R1;
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
MUL R1.xyz, R0.xyww, c[0].x;
MUL R1.y, R1, c[13].x;
ADD result.texcoord[1].xy, R1, R1.z;
MOV result.position, R0;
MOV R0.x, c[0].y;
ADD R0.y, R0.x, -c[14].w;
DP4 R0.x, vertex.position, c[3];
DP4 R1.z, vertex.position, c[11];
DP4 R1.x, vertex.position, c[9];
DP4 R1.y, vertex.position, c[10];
ADD R1.xyz, R1, -c[14];
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R0;
MUL result.texcoord[3].xyz, R1, c[14].w;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[17].xyxy, c[17];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[16], c[16].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[1], c[15], c[15].zwzw;
MUL result.texcoord[3].w, -R0.x, R0.y;
END
# 22 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 12 [_ProjectionParams]
Vector 13 [_ScreenParams]
Vector 14 [unity_ShadowFadeCenterAndType]
Matrix 8 [_Object2World]
Vector 15 [unity_LightmapST]
Vector 16 [_MainTex_ST]
Vector 17 [_BodyBumpTex_ST]
"vs_2_0
; 22 ALU
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_texcoord0 v1
dcl_texcoord1 v2
dcl_color0 v3
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r1.xyz, r0.xyww, c18.x
mul r1.y, r1, c12.x
mad oT1.xy, r1.z, c13.zwzw, r1
mov oPos, r0
mov r0.x, c14.w
add r0.y, c18, -r0.x
dp4 r0.x, v0, c2
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r1.xyz, r1, -c14
mov oD0, v3
mov oT1.zw, r0
mul oT3.xyz, r1, c14.w
mad oT0.zw, v2.xyxy, c17.xyxy, c17
mad oT0.xy, v1, c16, c16.zwzw
mad oT2.xy, v2, c15, c15.zwzw
mul oT3.w, -r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 192 // 160 used size, 16 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 416 used size, 8 vars
Vector 400 [unity_ShadowFadeCenterAndType] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 26 instructions, 2 temp regs, 0 temp arrays:
// ALU 10 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedflmjdhnlifflpcbidklkigljfibgmnbiabaaaaaapmafaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefceeaeaaaaeaaaabaabbabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabkaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaa
aeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaadcaaaaal
mccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaajaaaaaakgiocaaa
aaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaa
adaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaaldccabaaaaeaaaaaa
egbabaaaaeaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaabjaaaaaadiaaaaai
hccabaaaafaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabjaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaa
dkiacaiaebaaaaaaacaaaaaabjaaaaaaabeaaaaaaaaaiadpdiaaaaaiiccabaaa
afaaaaaabkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 unity_LightmapFade;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  mediump float trimMask_9;
  highp float bodyOcc_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_10 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = tmpvar_7.x;
  trimMask_9 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mix (tmpvar_20, tmpvar_21, vec3(trimMask_9)) * bodyOcc_10);
  tmpvar_8 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_27;
  light_6.xyz = (tmpvar_24.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_8 * light_6.xyz);
  c_28.xyz = tmpvar_29;
  c_28.w = 0.0;
  c_2 = c_28;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 unity_LightmapFade;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  mediump float trimMask_9;
  highp float bodyOcc_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 normal_15;
  normal_15.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_15.z = sqrt((1.0 - clamp (dot (normal_15.xy, normal_15.xy), 0.0, 1.0)));
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_10 = tmpvar_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BodyBumpTex, tmpvar_18).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  lowp vec3 normal_21;
  normal_21.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_21.z = sqrt((1.0 - clamp (dot (normal_21.xy, normal_21.xy), 0.0, 1.0)));
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_7.x;
  trimMask_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_9)) * bodyOcc_10);
  tmpvar_8 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_27.w;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD2);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_LightmapInd, xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((8.0 * tmpvar_28.w) * tmpvar_28.xyz);
  lmFull_4 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((8.0 * tmpvar_29.w) * tmpvar_29.xyz);
  lmIndirect_3 = tmpvar_32;
  light_6.xyz = (tmpvar_27.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_8 * light_6.xyz);
  c_33.xyz = tmpvar_34;
  c_33.w = 0.0;
  c_2 = c_33;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 192 // 160 used size, 16 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 416 used size, 8 vars
Vector 400 [unity_ShadowFadeCenterAndType] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 26 instructions, 2 temp regs, 0 temp arrays:
// ALU 10 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedfkgennpieecbhiolbkjdacokplhmhekdabaaaaaakaaiaaaaaeaaaaaa
daaaaaaanaacaaaabmahaaaaoeahaaaaebgpgodjjiacaaaajiacaaaaaaacpopp
deacaaaageaaaaaaafaaceaaaaaagaaaaaaagaaaaaaaceaaabaagaaaaaaaahaa
adaaabaaaaaaaaaaabaaafaaabaaaeaaaaaaaaaaacaabjaaabaaafaaaaaaaaaa
adaaaaaaaiaaagaaaaaaaaaaadaaamaaaeaaaoaaaaaaaaaaaaaaaaaaaaacpopp
fbaaaaafbcaaapkaaaaaaadpaaaaiadpaaaaaaaaaaaaaaaabpaaaaacafaaaaia
aaaaapjabpaaaaacafaaadiaadaaapjabpaaaaacafaaaeiaaeaaapjabpaaaaac
afaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoejaacaaoekaacaaookaaeaaaaae
aaaaamoaaeaaeejaadaaeekaadaaoekaafaaaaadaaaaapiaaaaaffjaahaaoeka
aeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaiaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoekaaaaappjaaaaaoeiaafaaaaad
abaaabiaaaaaffiaaeaaaakaafaaaaadabaaaiiaabaaaaiabcaaaakaafaaaaad
abaaafiaaaaapeiabcaaaakaacaaaaadacaaadoaabaakkiaabaaomiaaeaaaaae
adaaadoaaeaaoejaabaaoekaabaaookaafaaaaadabaaahiaaaaaffjaapaaoeka
aeaaaaaeabaaahiaaoaaoekaaaaaaajaabaaoeiaaeaaaaaeabaaahiabaaaoeka
aaaakkjaabaaoeiaaeaaaaaeabaaahiabbaaoekaaaaappjaabaaoeiaacaaaaad
abaaahiaabaaoeiaafaaoekbafaaaaadaeaaahoaabaaoeiaafaappkaafaaaaad
abaaabiaaaaaffjaalaakkkaaeaaaaaeabaaabiaakaakkkaaaaaaajaabaaaaia
aeaaaaaeabaaabiaamaakkkaaaaakkjaabaaaaiaaeaaaaaeabaaabiaanaakkka
aaaappjaabaaaaiaabaaaaacabaaaiiaafaappkaacaaaaadabaaaciaabaappib
bcaaffkaafaaaaadaeaaaioaabaaffiaabaaaaibaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaamoaaaaaoeia
abaaaaacabaaapoaafaaoejappppaaaafdeieefceeaeaaaaeaaaabaabbabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabkaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaa
aeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaadcaaaaal
mccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaajaaaaaakgiocaaa
aaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaa
adaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaaldccabaaaaeaaaaaa
egbabaaaaeaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaabjaaaaaadiaaaaai
hccabaaaafaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabjaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaa
dkiacaiaebaaaaaaacaaaaaabjaaaaaaabeaaaaaaaaaiadpdiaaaaaiiccabaaa
afaaaaaabkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaabejfdeheo
maaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apapaaaakbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaakjaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaaaaaalaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapadaaaalaaaaaaaabaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apadaaaaljaaaaaaaaaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafaepfdej
feejepeoaafeebeoehefeofeaaeoepfcenebemaafeeffiedepepfceeaaedepem
epfcaaklepfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
apaaaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapaaaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadamaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl
"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 491
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 495
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 477
v2f_surf vert_surf( in appdata_full v ) {
    #line 479
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 483
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    o.lmapFadePos.xyz = (((_Object2World * v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
    #line 487
    o.lmapFadePos.w = ((-(glstate_matrix_modelview0 * v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec2(xl_retval.lmap);
    xlv_TEXCOORD3 = vec4(xl_retval.lmapFadePos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 491
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 495
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 368
    return c;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 495
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 499
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 503
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 507
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    #line 511
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmtex2 = texture( unity_LightmapInd, IN.lmap.xy);
    mediump float lmFade = ((length(IN.lmapFadePos) * unity_LightmapFade.z) + unity_LightmapFade.w);
    mediump vec3 lmFull = DecodeLightmap( lmtex);
    #line 515
    mediump vec3 lmIndirect = DecodeLightmap( lmtex2);
    mediump vec3 lm = mix( lmIndirect, lmFull, vec3( xll_saturate_f(lmFade)));
    light.xyz += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    #line 519
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.lmapFadePos = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 9 [_WorldSpaceCameraPos]
Vector 10 [_ProjectionParams]
Matrix 5 [_World2Object]
Vector 11 [unity_Scale]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 26 ALU
PARAM c[15] = { { 0.5, 1 },
		state.matrix.mvp,
		program.local[5..14] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R3.xyz, R0, vertex.attrib[14].w;
MOV R1.xyz, c[9];
MOV R1.w, c[0].y;
DP4 R2.z, R1, c[7];
DP4 R2.x, R1, c[5];
DP4 R2.y, R1, c[6];
MAD R1.xyz, R2, c[11].w, -vertex.position;
DP4 R0.w, vertex.position, c[4];
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R2.xyz, R0.xyww, c[0].x;
MUL R2.y, R2, c[10].x;
DP3 result.texcoord[3].y, R1, R3;
ADD result.texcoord[1].xy, R2, R2.z;
DP3 result.texcoord[3].z, vertex.normal, R1;
DP3 result.texcoord[3].x, R1, vertex.attrib[14];
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[14].xyxy, c[14];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[13], c[13].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[1], c[12], c[12].zwzw;
END
# 26 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_World2Object]
Vector 11 [unity_Scale]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"vs_2_0
; 27 ALU
def c15, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r0.xyz, v2.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v1.w
mov r1.xyz, c8
mov r1.w, c15.y
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mad r1.xyz, r2, c11.w, -v0
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c15.x
mul r2.y, r2, c9.x
dp3 oT3.y, r1, r3
mad oT1.xy, r2.z, c10.zwzw, r2
dp3 oT3.z, v2, r1
dp3 oT3.x, r1, v1
mov oPos, r0
mov oD0, v5
mov oT1.zw, r0
mad oT0.zw, v4.xyxy, c14.xyxy, c14
mad oT0.xy, v3, c13, c13.zwzw
mad oT2.xy, v4, c12, c12.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 192 // 160 used size, 16 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 25 instructions, 2 temp regs, 0 temp arrays:
// ALU 11 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedapbpnaaanohbcphkddpljeihjhinmebeabaaaaaamiafaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcbaaeaaaaeaaaabaaaeabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaa
aiaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
ajaaaaaakgiocaaaaaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaal
dccabaaaaeaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaa
aaaaaaaaahaaaaaadiaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaa
acaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaacaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_11).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  mediump float trimMask_7;
  highp vec3 bumpMap_8;
  highp vec3 bodyBump_9;
  highp float bodyOcc_10;
  highp vec3 trimBumpTex_11;
  highp vec3 trimDifTex_12;
  highp vec3 mainTex_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_13 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_12 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_11 = tmpvar_16;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasScaleX;
  tmpvar_17.y = _AtlasScaleY;
  highp vec2 tmpvar_18;
  tmpvar_18.x = _AtlasOffsetX;
  tmpvar_18.y = _AtlasOffsetY;
  highp vec2 tmpvar_19;
  tmpvar_19 = ((xlv_TEXCOORD0.zw * tmpvar_17) + tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_BodyOcclusionTex, tmpvar_19).x;
  bodyOcc_10 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BodyBumpTex, tmpvar_19).xyz * 2.0) - 1.0);
  bodyBump_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_8 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = tmpvar_4.x;
  trimMask_7 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mainTex_13 * _Color);
  mainTex_13 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (trimDifTex_12 * _TrimColor);
  trimDifTex_12 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = (mix (tmpvar_24, tmpvar_25, vec3(trimMask_7)) * bodyOcc_10);
  tmpvar_5 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27.z = 0.0;
  tmpvar_27.x = _BumpPower;
  tmpvar_27.y = _BumpPower;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((bodyBump_9 + (mix (bumpMap_8, trimBumpTex_11, vec3(trimMask_7)) * tmpvar_27)));
  tmpvar_6 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_31;
  mediump vec3 viewDir_32;
  viewDir_32 = tmpvar_30;
  highp float nh_33;
  mat3 tmpvar_34;
  tmpvar_34[0].x = 0.816497;
  tmpvar_34[0].y = -0.408248;
  tmpvar_34[0].z = -0.408248;
  tmpvar_34[1].x = 0.0;
  tmpvar_34[1].y = 0.707107;
  tmpvar_34[1].z = -0.707107;
  tmpvar_34[2].x = 0.57735;
  tmpvar_34[2].y = 0.57735;
  tmpvar_34[2].z = 0.57735;
  mediump vec3 normal_35;
  normal_35 = tmpvar_6;
  mediump vec3 scalePerBasisVector_36;
  mediump vec3 lm_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_37 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  scalePerBasisVector_36 = tmpvar_39;
  lm_37 = (lm_37 * dot (clamp ((tmpvar_34 * normal_35), 0.0, 1.0), scalePerBasisVector_36));
  vec3 v_40;
  v_40.x = tmpvar_34[0].x;
  v_40.y = tmpvar_34[1].x;
  v_40.z = tmpvar_34[2].x;
  vec3 v_41;
  v_41.x = tmpvar_34[0].y;
  v_41.y = tmpvar_34[1].y;
  v_41.z = tmpvar_34[2].y;
  vec3 v_42;
  v_42.x = tmpvar_34[0].z;
  v_42.y = tmpvar_34[1].z;
  v_42.z = tmpvar_34[2].z;
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_6, normalize((normalize((((scalePerBasisVector_36.x * v_40) + (scalePerBasisVector_36.y * v_41)) + (scalePerBasisVector_36.z * v_42))) + viewDir_32))));
  nh_33 = tmpvar_43;
  highp vec4 tmpvar_44;
  tmpvar_44.xyz = lm_37;
  tmpvar_44.w = pow (nh_33, 0.0);
  tmpvar_31 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_31);
  light_3 = tmpvar_45;
  lowp vec4 c_46;
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_5 * tmpvar_45.xyz);
  c_46.xyz = tmpvar_47;
  c_46.w = 0.0;
  c_2 = c_46;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_11).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  mediump float trimMask_7;
  highp vec3 bumpMap_8;
  highp vec3 bodyBump_9;
  highp float bodyOcc_10;
  highp vec3 trimBumpTex_11;
  highp vec3 trimDifTex_12;
  highp vec3 mainTex_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_13 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_12 = tmpvar_15;
  lowp vec3 normal_16;
  normal_16.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  trimBumpTex_11 = normal_16;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasScaleX;
  tmpvar_17.y = _AtlasScaleY;
  highp vec2 tmpvar_18;
  tmpvar_18.x = _AtlasOffsetX;
  tmpvar_18.y = _AtlasOffsetY;
  highp vec2 tmpvar_19;
  tmpvar_19 = ((xlv_TEXCOORD0.zw * tmpvar_17) + tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_BodyOcclusionTex, tmpvar_19).x;
  bodyOcc_10 = tmpvar_20;
  lowp vec3 normal_21;
  normal_21.xy = ((texture2D (_BodyBumpTex, tmpvar_19).wy * 2.0) - 1.0);
  normal_21.z = sqrt((1.0 - clamp (dot (normal_21.xy, normal_21.xy), 0.0, 1.0)));
  bodyBump_9 = normal_21;
  lowp vec3 normal_22;
  normal_22.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_22.z = sqrt((1.0 - clamp (dot (normal_22.xy, normal_22.xy), 0.0, 1.0)));
  bumpMap_8 = normal_22;
  highp float tmpvar_23;
  tmpvar_23 = tmpvar_4.x;
  trimMask_7 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mainTex_13 * _Color);
  mainTex_13 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (trimDifTex_12 * _TrimColor);
  trimDifTex_12 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = (mix (tmpvar_24, tmpvar_25, vec3(trimMask_7)) * bodyOcc_10);
  tmpvar_5 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27.z = 0.0;
  tmpvar_27.x = _BumpPower;
  tmpvar_27.y = _BumpPower;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((bodyBump_9 + (mix (bumpMap_8, trimBumpTex_11, vec3(trimMask_7)) * tmpvar_27)));
  tmpvar_6 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD2);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_LightmapInd, xlv_TEXCOORD2);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_33;
  mediump vec3 viewDir_34;
  viewDir_34 = tmpvar_32;
  highp float nh_35;
  mat3 tmpvar_36;
  tmpvar_36[0].x = 0.816497;
  tmpvar_36[0].y = -0.408248;
  tmpvar_36[0].z = -0.408248;
  tmpvar_36[1].x = 0.0;
  tmpvar_36[1].y = 0.707107;
  tmpvar_36[1].z = -0.707107;
  tmpvar_36[2].x = 0.57735;
  tmpvar_36[2].y = 0.57735;
  tmpvar_36[2].z = 0.57735;
  mediump vec3 normal_37;
  normal_37 = tmpvar_6;
  mediump vec3 scalePerBasisVector_38;
  mediump vec3 lm_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((8.0 * tmpvar_30.w) * tmpvar_30.xyz);
  lm_39 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((8.0 * tmpvar_31.w) * tmpvar_31.xyz);
  scalePerBasisVector_38 = tmpvar_41;
  lm_39 = (lm_39 * dot (clamp ((tmpvar_36 * normal_37), 0.0, 1.0), scalePerBasisVector_38));
  vec3 v_42;
  v_42.x = tmpvar_36[0].x;
  v_42.y = tmpvar_36[1].x;
  v_42.z = tmpvar_36[2].x;
  vec3 v_43;
  v_43.x = tmpvar_36[0].y;
  v_43.y = tmpvar_36[1].y;
  v_43.z = tmpvar_36[2].y;
  vec3 v_44;
  v_44.x = tmpvar_36[0].z;
  v_44.y = tmpvar_36[1].z;
  v_44.z = tmpvar_36[2].z;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_6, normalize((normalize((((scalePerBasisVector_38.x * v_42) + (scalePerBasisVector_38.y * v_43)) + (scalePerBasisVector_38.z * v_44))) + viewDir_34))));
  nh_35 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = lm_39;
  tmpvar_46.w = pow (nh_35, 0.0);
  tmpvar_33 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_33);
  light_3 = tmpvar_47;
  lowp vec4 c_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_5 * tmpvar_47.xyz);
  c_48.xyz = tmpvar_49;
  c_48.w = 0.0;
  c_2 = c_48;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 192 // 160 used size, 16 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 25 instructions, 2 temp regs, 0 temp arrays:
// ALU 11 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedidbkdhlhdnnjmfdhkmbjnbjjaflbkmebabaaaaaagmaiaaaaaeaaaaaa
daaaaaaanaacaaaaoiagaaaalaahaaaaebgpgodjjiacaaaajiacaaaaaaacpopp
eaacaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaahaa
adaaabaaaaaaaaaaabaaaeaaacaaaeaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaabaaaafaaakaaaaaaaaaaaaaaaaaaaaacpoppfbaaaaafapaaapkaaaaaaadp
aaaaaaaaaaaaaaaaaaaaaaaabpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabia
abaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapjabpaaaaac
afaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoeja
acaaoekaacaaookaaeaaaaaeaaaaamoaaeaaeejaadaaeekaadaaoekaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaafaaaaadabaaabiaaaaaffiaafaaaakaafaaaaadabaaaiia
abaaaaiaapaaaakaafaaaaadabaaafiaaaaapeiaapaaaakaacaaaaadacaaadoa
abaakkiaabaaomiaaeaaaaaeadaaadoaaeaaoejaabaaoekaabaaookaabaaaaac
abaaahiaaeaaoekaafaaaaadacaaahiaabaaffiaalaaoekaaeaaaaaeabaaalia
akaakekaabaaaaiaacaakeiaaeaaaaaeabaaahiaamaaoekaabaakkiaabaapeia
acaaaaadabaaahiaabaaoeiaanaaoekaaeaaaaaeabaaahiaabaaoeiaaoaappka
aaaaoejbaiaaaaadaeaaaboaabaaoejaabaaoeiaabaaaaacacaaahiaabaaoeja
afaaaaadadaaahiaacaamjiaacaancjaaeaaaaaeacaaahiaacaamjjaacaancia
adaaoeibafaaaaadacaaahiaacaaoeiaabaappjaaiaaaaadaeaaacoaacaaoeia
abaaoeiaaiaaaaadaeaaaeoaacaaoejaabaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaamoaaaaaoeia
abaaaaacabaaapoaafaaoejappppaaaafdeieefcbaaeaaaaeaaaabaaaeabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaa
aiaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
ajaaaaaakgiocaaaaaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaal
dccabaaaaeaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaa
aaaaaaaaahaaaaaadiaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaa
acaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaacaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
laaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaaabaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfcenebemaa
feeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaaaiaaaaaa
jiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
acaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 491
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 495
uniform lowp vec4 unity_Ambient;
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 477
v2f_surf vert_surf( in appdata_full v ) {
    #line 479
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 483
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 487
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.viewDir = (rotation * ObjSpaceViewDir( v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec2(xl_retval.lmap);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 491
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 495
uniform lowp vec4 unity_Ambient;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * _SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 368
    return c;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 496
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 499
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 503
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 507
    o.Gloss = 0.0;
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    #line 511
    light = (-log2(light));
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    #line 515
    mediump vec4 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor);
    light += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 9 [_ProjectionParams]
Vector 10 [unity_SHAr]
Vector 11 [unity_SHAg]
Vector 12 [unity_SHAb]
Vector 13 [unity_SHBr]
Vector 14 [unity_SHBg]
Vector 15 [unity_SHBb]
Vector 16 [unity_SHC]
Matrix 5 [_Object2World]
Vector 17 [unity_Scale]
Vector 18 [_MainTex_ST]
Vector 19 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 30 ALU
PARAM c[20] = { { 0.5, 1 },
		state.matrix.mvp,
		program.local[5..19] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R1.xyz, vertex.normal, c[17].w;
DP3 R2.w, R1, c[6];
DP3 R0.x, R1, c[5];
DP3 R0.z, R1, c[7];
MOV R0.y, R2.w;
MUL R1, R0.xyzz, R0.yzzx;
MOV R0.w, c[0].y;
DP4 R2.z, R0, c[12];
DP4 R2.y, R0, c[11];
DP4 R2.x, R0, c[10];
MUL R0.y, R2.w, R2.w;
DP4 R3.z, R1, c[15];
DP4 R3.y, R1, c[14];
DP4 R3.x, R1, c[13];
DP4 R1.w, vertex.position, c[4];
DP4 R1.z, vertex.position, c[3];
MAD R0.x, R0, R0, -R0.y;
ADD R3.xyz, R2, R3;
MUL R2.xyz, R0.x, c[16];
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
MUL R0.xyz, R1.xyww, c[0].x;
MUL R0.y, R0, c[9].x;
ADD result.texcoord[2].xyz, R3, R2;
ADD result.texcoord[1].xy, R0, R0.z;
MOV result.position, R1;
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R1;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[19].xyxy, c[19];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[18], c[18].zwzw;
END
# 30 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_ProjectionParams]
Vector 9 [_ScreenParams]
Vector 10 [unity_SHAr]
Vector 11 [unity_SHAg]
Vector 12 [unity_SHAb]
Vector 13 [unity_SHBr]
Vector 14 [unity_SHBg]
Vector 15 [unity_SHBb]
Vector 16 [unity_SHC]
Matrix 4 [_Object2World]
Vector 17 [unity_Scale]
Vector 18 [_MainTex_ST]
Vector 19 [_BodyBumpTex_ST]
"vs_2_0
; 30 ALU
def c20, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_texcoord1 v3
dcl_color0 v4
mul r1.xyz, v1, c17.w
dp3 r2.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r2.w
mul r1, r0.xyzz, r0.yzzx
mov r0.w, c20.y
dp4 r2.z, r0, c12
dp4 r2.y, r0, c11
dp4 r2.x, r0, c10
mul r0.y, r2.w, r2.w
dp4 r3.z, r1, c15
dp4 r3.y, r1, c14
dp4 r3.x, r1, c13
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
mad r0.x, r0, r0, -r0.y
add r3.xyz, r2, r3
mul r2.xyz, r0.x, c16
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c20.x
mul r0.y, r0, c8.x
add oT2.xyz, r3, r2
mad oT1.xy, r0.z, c9.zwzw, r0
mov oPos, r1
mov oD0, v4
mov oT1.zw, r1
mad oT0.zw, v3.xyxy, c19.xyxy, c19
mad oT0.xy, v2, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 14 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 29 instructions, 4 temp regs, 0 temp arrays:
// ALU 15 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedoclnopmdmlejhcmolglabhammhbalhefabaaaaaaaiagaaaaadaaaaaa
cmaaaaaapeaaaaaajiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefcgiaeaaaa
eaaaabaabkabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaaeegiocaaa
adaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaa
gfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaa
ahaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
aiaaaaaakgiocaaaaaaaaaaaaiaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
hcaabaaaaaaaaaaaegbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
lcaabaaaaaaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaibaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaa
aaaaaaaaegadbaaaaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaiadp
bbaaaaaibcaabaaaabaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaaaaaaaaaa
bbaaaaaiccaabaaaabaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaaaaaaaaaa
bbaaaaaiecaabaaaabaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaacaaaaaajgacbaaaaaaaaaaaegakbaaaaaaaaaaabbaaaaai
bcaabaaaadaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaacaaaaaabbaaaaai
ccaabaaaadaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaacaaaaaabbaaaaai
ecaabaaaadaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaahccaabaaa
aaaaaaaabkaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaadcaaaaak
hccabaaaaeaaaaaaegiccaaaacaaaaaabiaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp float bodyOcc_7;
  highp vec3 trimDifTex_8;
  highp vec3 mainTex_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_9 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_8 = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12.x = _AtlasScaleX;
  tmpvar_12.y = _AtlasScaleY;
  highp vec2 tmpvar_13;
  tmpvar_13.x = _AtlasOffsetX;
  tmpvar_13.y = _AtlasOffsetY;
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0.zw * tmpvar_12) + tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_BodyOcclusionTex, tmpvar_14).x;
  bodyOcc_7 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = tmpvar_4.x;
  trimMask_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (mainTex_9 * _Color);
  mainTex_9 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (trimDifTex_8 * _TrimColor);
  trimDifTex_8 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (mix (tmpvar_17, tmpvar_18, vec3(trimMask_6)) * bodyOcc_7);
  tmpvar_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_22;
  lowp vec4 c_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_5 * light_3.xyz);
  c_23.xyz = tmpvar_24;
  c_23.w = 0.0;
  c_2 = c_23;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  mediump float trimMask_6;
  highp float bodyOcc_7;
  highp vec3 trimDifTex_8;
  highp vec3 mainTex_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_9 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_8 = tmpvar_11;
  lowp vec3 normal_12;
  normal_12.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_12.z = sqrt((1.0 - clamp (dot (normal_12.xy, normal_12.xy), 0.0, 1.0)));
  highp vec2 tmpvar_13;
  tmpvar_13.x = _AtlasScaleX;
  tmpvar_13.y = _AtlasScaleY;
  highp vec2 tmpvar_14;
  tmpvar_14.x = _AtlasOffsetX;
  tmpvar_14.y = _AtlasOffsetY;
  highp vec2 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD0.zw * tmpvar_13) + tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_BodyOcclusionTex, tmpvar_15).x;
  bodyOcc_7 = tmpvar_16;
  lowp vec3 normal_17;
  normal_17.xy = ((texture2D (_BodyBumpTex, tmpvar_15).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  lowp vec3 normal_18;
  normal_18.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  highp float tmpvar_19;
  tmpvar_19 = tmpvar_4.x;
  trimMask_6 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = (mainTex_9 * _Color);
  mainTex_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (trimDifTex_8 * _TrimColor);
  trimDifTex_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mix (tmpvar_20, tmpvar_21, vec3(trimMask_6)) * bodyOcc_7);
  tmpvar_5 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_24.w;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_25;
  lowp vec4 c_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_5 * light_3.xyz);
  c_26.xyz = tmpvar_27;
  c_26.w = 0.0;
  c_2 = c_26;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 14 vars
Vector 112 [_MainTex_ST] 4
Vector 128 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 400 // 400 used size, 16 vars
Vector 288 [unity_SHAr] 4
Vector 304 [unity_SHAg] 4
Vector 320 [unity_SHAb] 4
Vector 336 [unity_SHBr] 4
Vector 352 [unity_SHBg] 4
Vector 368 [unity_SHBb] 4
Vector 384 [unity_SHC] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 29 instructions, 4 temp regs, 0 temp arrays:
// ALU 15 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedbgdfchpcncijgkcaologjljjmjjnegihabaaaaaaniaiaaaaaeaaaaaa
daaaaaaapmacaaaagmahaaaadeaiaaaaebgpgodjmeacaaaameacaaaaaaacpopp
feacaaaahaaaaaaaagaaceaaaaaagmaaaaaagmaaaaaaceaaabaagmaaaaaaahaa
acaaabaaaaaaaaaaabaaafaaabaaadaaaaaaaaaaacaabcaaahaaaeaaaaaaaaaa
adaaaaaaaeaaalaaaaaaaaaaadaaamaaadaaapaaaaaaaaaaadaabeaaabaabcaa
aaaaaaaaaaaaaaaaaaacpoppfbaaaaafbdaaapkaaaaaaadpaaaaiadpaaaaaaaa
aaaaaaaabpaaaaacafaaaaiaaaaaapjabpaaaaacafaaaciaacaaapjabpaaaaac
afaaadiaadaaapjabpaaaaacafaaaeiaaeaaapjabpaaaaacafaaafiaafaaapja
aeaaaaaeaaaaadoaadaaoejaabaaoekaabaaookaaeaaaaaeaaaaamoaaeaaeeja
acaaeekaacaaoekaafaaaaadaaaaapiaaaaaffjaamaaoekaaeaaaaaeaaaaapia
alaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaanaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaaoaaoekaaaaappjaaaaaoeiaafaaaaadabaaabiaaaaaffia
adaaaakaafaaaaadabaaaiiaabaaaaiabdaaaakaafaaaaadabaaafiaaaaapeia
bdaaaakaacaaaaadacaaadoaabaakkiaabaaomiaafaaaaadabaaahiaacaaoeja
bcaappkaafaaaaadacaaahiaabaaffiabaaaoekaaeaaaaaeabaaaliaapaakeka
abaaaaiaacaakeiaaeaaaaaeabaaahiabbaaoekaabaakkiaabaapeiaabaaaaac
abaaaiiabdaaffkaajaaaaadacaaabiaaeaaoekaabaaoeiaajaaaaadacaaacia
afaaoekaabaaoeiaajaaaaadacaaaeiaagaaoekaabaaoeiaafaaaaadadaaapia
abaacjiaabaakeiaajaaaaadaeaaabiaahaaoekaadaaoeiaajaaaaadaeaaacia
aiaaoekaadaaoeiaajaaaaadaeaaaeiaajaaoekaadaaoeiaacaaaaadacaaahia
acaaoeiaaeaaoeiaafaaaaadabaaaciaabaaffiaabaaffiaaeaaaaaeabaaabia
abaaaaiaabaaaaiaabaaffibaeaaaaaeadaaahoaakaaoekaabaaaaiaacaaoeia
aeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeia
abaaaaacacaaamoaaaaaoeiaabaaaaacabaaapoaafaaoejappppaaaafdeieefc
giaeaaaaeaaaabaabkabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaafjaaaaae
egiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
acaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaad
pcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaal
dccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaa
aaaaaaaaahaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaa
aaaaaaaaaiaaaaaakgiocaaaaaaaaaaaaiaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaafaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaa
aaaaaaaaaaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaihcaabaaaaaaaaaaaegbcbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaaklcaabaaaaaaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaa
egaibaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaa
aaaaiadpbbaaaaaibcaabaaaabaaaaaaegiocaaaacaaaaaabcaaaaaaegaobaaa
aaaaaaaabbaaaaaiccaabaaaabaaaaaaegiocaaaacaaaaaabdaaaaaaegaobaaa
aaaaaaaabbaaaaaiecaabaaaabaaaaaaegiocaaaacaaaaaabeaaaaaaegaobaaa
aaaaaaaadiaaaaahpcaabaaaacaaaaaajgacbaaaaaaaaaaaegakbaaaaaaaaaaa
bbaaaaaibcaabaaaadaaaaaaegiocaaaacaaaaaabfaaaaaaegaobaaaacaaaaaa
bbaaaaaiccaabaaaadaaaaaaegiocaaaacaaaaaabgaaaaaaegaobaaaacaaaaaa
bbaaaaaiecaabaaaadaaaaaaegiocaaaacaaaaaabhaaaaaaegaobaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaa
dcaaaaakhccabaaaaeaaaaaaegiccaaaacaaaaaabiaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojmaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaajfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 473
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 489
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 136
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 140
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 144
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 148
    return ((x1 + x2) + x3);
}
#line 475
v2f_surf vert_surf( in appdata_full v ) {
    #line 477
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 481
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    o.vlight = ShadeSH9( vec4( worldN, 1.0));
    #line 485
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec3 vlight;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 473
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 489
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 368
    return c;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 489
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 493
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 497
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 501
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light.xyz += IN.vlight;
    #line 505
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_ProjectionParams]
Vector 14 [unity_ShadowFadeCenterAndType]
Matrix 9 [_Object2World]
Vector 15 [unity_LightmapST]
Vector 16 [_MainTex_ST]
Vector 17 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 22 ALU
PARAM c[18] = { { 0.5, 1 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		program.local[9..17] };
TEMP R0;
TEMP R1;
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
MUL R1.xyz, R0.xyww, c[0].x;
MUL R1.y, R1, c[13].x;
ADD result.texcoord[1].xy, R1, R1.z;
MOV result.position, R0;
MOV R0.x, c[0].y;
ADD R0.y, R0.x, -c[14].w;
DP4 R0.x, vertex.position, c[3];
DP4 R1.z, vertex.position, c[11];
DP4 R1.x, vertex.position, c[9];
DP4 R1.y, vertex.position, c[10];
ADD R1.xyz, R1, -c[14];
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R0;
MUL result.texcoord[3].xyz, R1, c[14].w;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[17].xyxy, c[17];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[16], c[16].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[1], c[15], c[15].zwzw;
MUL result.texcoord[3].w, -R0.x, R0.y;
END
# 22 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 12 [_ProjectionParams]
Vector 13 [_ScreenParams]
Vector 14 [unity_ShadowFadeCenterAndType]
Matrix 8 [_Object2World]
Vector 15 [unity_LightmapST]
Vector 16 [_MainTex_ST]
Vector 17 [_BodyBumpTex_ST]
"vs_2_0
; 22 ALU
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_texcoord0 v1
dcl_texcoord1 v2
dcl_color0 v3
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r1.xyz, r0.xyww, c18.x
mul r1.y, r1, c12.x
mad oT1.xy, r1.z, c13.zwzw, r1
mov oPos, r0
mov r0.x, c14.w
add r0.y, c18, -r0.x
dp4 r0.x, v0, c2
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r1.xyz, r1, -c14
mov oD0, v3
mov oT1.zw, r0
mul oT3.xyz, r1, c14.w
mad oT0.zw, v2.xyxy, c17.xyxy, c17
mad oT0.xy, v1, c16, c16.zwzw
mad oT2.xy, v2, c15, c15.zwzw
mul oT3.w, -r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 192 // 160 used size, 16 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 416 used size, 8 vars
Vector 400 [unity_ShadowFadeCenterAndType] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 26 instructions, 2 temp regs, 0 temp arrays:
// ALU 10 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedflmjdhnlifflpcbidklkigljfibgmnbiabaaaaaapmafaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefceeaeaaaaeaaaabaabbabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabkaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaa
aeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaadcaaaaal
mccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaajaaaaaakgiocaaa
aaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaa
adaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaaldccabaaaaeaaaaaa
egbabaaaaeaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaabjaaaaaadiaaaaai
hccabaaaafaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabjaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaa
dkiacaiaebaaaaaaacaaaaaabjaaaaaaabeaaaaaaaaaiadpdiaaaaaiiccabaaa
afaaaaaabkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 unity_LightmapFade;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  mediump float trimMask_9;
  highp float bodyOcc_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = _AtlasScaleX;
  tmpvar_15.y = _AtlasScaleY;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasOffsetX;
  tmpvar_16.y = _AtlasOffsetY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD0.zw * tmpvar_15) + tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_BodyOcclusionTex, tmpvar_17).x;
  bodyOcc_10 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = tmpvar_7.x;
  trimMask_9 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (mix (tmpvar_20, tmpvar_21, vec3(trimMask_9)) * bodyOcc_10);
  tmpvar_8 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_27;
  light_6.xyz = (tmpvar_24.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_8 * light_6.xyz);
  c_28.xyz = tmpvar_29;
  c_28.w = 0.0;
  c_2 = c_28;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 unity_LightmapFade;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  mediump float trimMask_9;
  highp float bodyOcc_10;
  highp vec3 trimDifTex_11;
  highp vec3 mainTex_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_11 = tmpvar_14;
  lowp vec3 normal_15;
  normal_15.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_15.z = sqrt((1.0 - clamp (dot (normal_15.xy, normal_15.xy), 0.0, 1.0)));
  highp vec2 tmpvar_16;
  tmpvar_16.x = _AtlasScaleX;
  tmpvar_16.y = _AtlasScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasOffsetX;
  tmpvar_17.y = _AtlasOffsetY;
  highp vec2 tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD0.zw * tmpvar_16) + tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_BodyOcclusionTex, tmpvar_18).x;
  bodyOcc_10 = tmpvar_19;
  lowp vec3 normal_20;
  normal_20.xy = ((texture2D (_BodyBumpTex, tmpvar_18).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (dot (normal_20.xy, normal_20.xy), 0.0, 1.0)));
  lowp vec3 normal_21;
  normal_21.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_21.z = sqrt((1.0 - clamp (dot (normal_21.xy, normal_21.xy), 0.0, 1.0)));
  highp float tmpvar_22;
  tmpvar_22 = tmpvar_7.x;
  trimMask_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (mainTex_12 * _Color);
  mainTex_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (trimDifTex_11 * _TrimColor);
  trimDifTex_11 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (mix (tmpvar_23, tmpvar_24, vec3(trimMask_9)) * bodyOcc_10);
  tmpvar_8 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_27.w;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD2);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_LightmapInd, xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((8.0 * tmpvar_28.w) * tmpvar_28.xyz);
  lmFull_4 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((8.0 * tmpvar_29.w) * tmpvar_29.xyz);
  lmIndirect_3 = tmpvar_32;
  light_6.xyz = (tmpvar_27.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_8 * light_6.xyz);
  c_33.xyz = tmpvar_34;
  c_33.w = 0.0;
  c_2 = c_33;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 192 // 160 used size, 16 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 416 used size, 8 vars
Vector 400 [unity_ShadowFadeCenterAndType] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 26 instructions, 2 temp regs, 0 temp arrays:
// ALU 10 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedfkgennpieecbhiolbkjdacokplhmhekdabaaaaaakaaiaaaaaeaaaaaa
daaaaaaanaacaaaabmahaaaaoeahaaaaebgpgodjjiacaaaajiacaaaaaaacpopp
deacaaaageaaaaaaafaaceaaaaaagaaaaaaagaaaaaaaceaaabaagaaaaaaaahaa
adaaabaaaaaaaaaaabaaafaaabaaaeaaaaaaaaaaacaabjaaabaaafaaaaaaaaaa
adaaaaaaaiaaagaaaaaaaaaaadaaamaaaeaaaoaaaaaaaaaaaaaaaaaaaaacpopp
fbaaaaafbcaaapkaaaaaaadpaaaaiadpaaaaaaaaaaaaaaaabpaaaaacafaaaaia
aaaaapjabpaaaaacafaaadiaadaaapjabpaaaaacafaaaeiaaeaaapjabpaaaaac
afaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoejaacaaoekaacaaookaaeaaaaae
aaaaamoaaeaaeejaadaaeekaadaaoekaafaaaaadaaaaapiaaaaaffjaahaaoeka
aeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaiaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoekaaaaappjaaaaaoeiaafaaaaad
abaaabiaaaaaffiaaeaaaakaafaaaaadabaaaiiaabaaaaiabcaaaakaafaaaaad
abaaafiaaaaapeiabcaaaakaacaaaaadacaaadoaabaakkiaabaaomiaaeaaaaae
adaaadoaaeaaoejaabaaoekaabaaookaafaaaaadabaaahiaaaaaffjaapaaoeka
aeaaaaaeabaaahiaaoaaoekaaaaaaajaabaaoeiaaeaaaaaeabaaahiabaaaoeka
aaaakkjaabaaoeiaaeaaaaaeabaaahiabbaaoekaaaaappjaabaaoeiaacaaaaad
abaaahiaabaaoeiaafaaoekbafaaaaadaeaaahoaabaaoeiaafaappkaafaaaaad
abaaabiaaaaaffjaalaakkkaaeaaaaaeabaaabiaakaakkkaaaaaaajaabaaaaia
aeaaaaaeabaaabiaamaakkkaaaaakkjaabaaaaiaaeaaaaaeabaaabiaanaakkka
aaaappjaabaaaaiaabaaaaacabaaaiiaafaappkaacaaaaadabaaaciaabaappib
bcaaffkaafaaaaadaeaaaioaabaaffiaabaaaaibaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaamoaaaaaoeia
abaaaaacabaaapoaafaaoejappppaaaafdeieefceeaeaaaaeaaaabaabbabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabkaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fpaaaaadpcbabaaaaaaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaa
aeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaadcaaaaal
mccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaaajaaaaaakgiocaaa
aaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaafaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaa
adaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaaldccabaaaaeaaaaaa
egbabaaaaeaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaaaaaaaaaaahaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaabjaaaaaadiaaaaai
hccabaaaafaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabjaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaa
dkiacaiaebaaaaaaacaaaaaabjaaaaaaabeaaaaaaaaaiadpdiaaaaaiiccabaaa
afaaaaaabkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaabejfdeheo
maaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apapaaaakbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaakjaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaaaaaalaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapadaaaalaaaaaaaabaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apadaaaaljaaaaaaaaaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafaepfdej
feejepeoaafeebeoehefeofeaaeoepfcenebemaafeeffiedepepfceeaaedepem
epfcaaklepfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
apaaaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapaaaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadamaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl
"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 491
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 495
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 477
v2f_surf vert_surf( in appdata_full v ) {
    #line 479
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 483
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    o.lmapFadePos.xyz = (((_Object2World * v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
    #line 487
    o.lmapFadePos.w = ((-(glstate_matrix_modelview0 * v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec2(xl_retval.lmap);
    xlv_TEXCOORD3 = vec4(xl_retval.lmapFadePos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
uniform sampler2D _LightBuffer;
#line 491
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
uniform lowp vec4 unity_Ambient;
#line 495
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 368
    return c;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 495
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 499
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 503
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 507
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    #line 511
    lowp vec4 lmtex2 = texture( unity_LightmapInd, IN.lmap.xy);
    mediump float lmFade = ((length(IN.lmapFadePos) * unity_LightmapFade.z) + unity_LightmapFade.w);
    mediump vec3 lmFull = DecodeLightmap( lmtex);
    mediump vec3 lmIndirect = DecodeLightmap( lmtex2);
    #line 515
    mediump vec3 lm = mix( lmIndirect, lmFull, vec3( xll_saturate_f(lmFade)));
    light.xyz += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.lmapFadePos = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 9 [_WorldSpaceCameraPos]
Vector 10 [_ProjectionParams]
Matrix 5 [_World2Object]
Vector 11 [unity_Scale]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"!!ARBvp1.0
# 26 ALU
PARAM c[15] = { { 0.5, 1 },
		state.matrix.mvp,
		program.local[5..14] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MOV R0.xyz, vertex.attrib[14];
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R0.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R3.xyz, R0, vertex.attrib[14].w;
MOV R1.xyz, c[9];
MOV R1.w, c[0].y;
DP4 R2.z, R1, c[7];
DP4 R2.x, R1, c[5];
DP4 R2.y, R1, c[6];
MAD R1.xyz, R2, c[11].w, -vertex.position;
DP4 R0.w, vertex.position, c[4];
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R2.xyz, R0.xyww, c[0].x;
MUL R2.y, R2, c[10].x;
DP3 result.texcoord[3].y, R1, R3;
ADD result.texcoord[1].xy, R2, R2.z;
DP3 result.texcoord[3].z, vertex.normal, R1;
DP3 result.texcoord[3].x, R1, vertex.attrib[14];
MOV result.position, R0;
MOV result.color, vertex.color;
MOV result.texcoord[1].zw, R0;
MAD result.texcoord[0].zw, vertex.texcoord[1].xyxy, c[14].xyxy, c[14];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[13], c[13].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[1], c[12], c[12].zwzw;
END
# 26 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_World2Object]
Vector 11 [unity_Scale]
Vector 12 [unity_LightmapST]
Vector 13 [_MainTex_ST]
Vector 14 [_BodyBumpTex_ST]
"vs_2_0
; 27 ALU
def c15, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mov r0.xyz, v1
mul r1.xyz, v2.zxyw, r0.yzxw
mov r0.xyz, v1
mad r0.xyz, v2.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v1.w
mov r1.xyz, c8
mov r1.w, c15.y
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mad r1.xyz, r2, c11.w, -v0
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c15.x
mul r2.y, r2, c9.x
dp3 oT3.y, r1, r3
mad oT1.xy, r2.z, c10.zwzw, r2
dp3 oT3.z, v2, r1
dp3 oT3.x, r1, v1
mov oPos, r0
mov oD0, v5
mov oT1.zw, r0
mad oT0.zw, v4.xyxy, c14.xyxy, c14
mad oT0.xy, v3, c13, c13.zwzw
mad oT2.xy, v4, c12, c12.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 192 // 160 used size, 16 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 25 instructions, 2 temp regs, 0 temp arrays:
// ALU 11 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedapbpnaaanohbcphkddpljeihjhinmebeabaaaaaamiafaaaaadaaaaaa
cmaaaaaapeaaaaaalaabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcbaaeaaaaeaaaabaaaeabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaa
aiaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
ajaaaaaakgiocaaaaaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaal
dccabaaaaeaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaa
aaaaaaaaahaaaaaadiaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaa
acaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaacaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_11).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  mediump float trimMask_7;
  highp vec3 bumpMap_8;
  highp vec3 bodyBump_9;
  highp float bodyOcc_10;
  highp vec3 trimBumpTex_11;
  highp vec3 trimDifTex_12;
  highp vec3 mainTex_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_13 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_12 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  trimBumpTex_11 = tmpvar_16;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasScaleX;
  tmpvar_17.y = _AtlasScaleY;
  highp vec2 tmpvar_18;
  tmpvar_18.x = _AtlasOffsetX;
  tmpvar_18.y = _AtlasOffsetY;
  highp vec2 tmpvar_19;
  tmpvar_19 = ((xlv_TEXCOORD0.zw * tmpvar_17) + tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_BodyOcclusionTex, tmpvar_19).x;
  bodyOcc_10 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BodyBumpTex, tmpvar_19).xyz * 2.0) - 1.0);
  bodyBump_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  bumpMap_8 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = tmpvar_4.x;
  trimMask_7 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mainTex_13 * _Color);
  mainTex_13 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (trimDifTex_12 * _TrimColor);
  trimDifTex_12 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = (mix (tmpvar_24, tmpvar_25, vec3(trimMask_7)) * bodyOcc_10);
  tmpvar_5 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27.z = 0.0;
  tmpvar_27.x = _BumpPower;
  tmpvar_27.y = _BumpPower;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((bodyBump_9 + (mix (bumpMap_8, trimBumpTex_11, vec3(trimMask_7)) * tmpvar_27)));
  tmpvar_6 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_31;
  mediump vec3 viewDir_32;
  viewDir_32 = tmpvar_30;
  highp float nh_33;
  mat3 tmpvar_34;
  tmpvar_34[0].x = 0.816497;
  tmpvar_34[0].y = -0.408248;
  tmpvar_34[0].z = -0.408248;
  tmpvar_34[1].x = 0.0;
  tmpvar_34[1].y = 0.707107;
  tmpvar_34[1].z = -0.707107;
  tmpvar_34[2].x = 0.57735;
  tmpvar_34[2].y = 0.57735;
  tmpvar_34[2].z = 0.57735;
  mediump vec3 normal_35;
  normal_35 = tmpvar_6;
  mediump vec3 scalePerBasisVector_36;
  mediump vec3 lm_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_37 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  scalePerBasisVector_36 = tmpvar_39;
  lm_37 = (lm_37 * dot (clamp ((tmpvar_34 * normal_35), 0.0, 1.0), scalePerBasisVector_36));
  vec3 v_40;
  v_40.x = tmpvar_34[0].x;
  v_40.y = tmpvar_34[1].x;
  v_40.z = tmpvar_34[2].x;
  vec3 v_41;
  v_41.x = tmpvar_34[0].y;
  v_41.y = tmpvar_34[1].y;
  v_41.z = tmpvar_34[2].y;
  vec3 v_42;
  v_42.x = tmpvar_34[0].z;
  v_42.y = tmpvar_34[1].z;
  v_42.z = tmpvar_34[2].z;
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_6, normalize((normalize((((scalePerBasisVector_36.x * v_40) + (scalePerBasisVector_36.y * v_41)) + (scalePerBasisVector_36.z * v_42))) + viewDir_32))));
  nh_33 = tmpvar_43;
  highp vec4 tmpvar_44;
  tmpvar_44.xyz = lm_37;
  tmpvar_44.w = pow (nh_33, 0.0);
  tmpvar_31 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_31);
  light_3 = tmpvar_45;
  lowp vec4 c_46;
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_5 * tmpvar_45.xyz);
  c_46.xyz = tmpvar_47;
  c_46.w = 0.0;
  c_2 = c_46;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _BodyBumpTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_10 * (((_World2Object * tmpvar_11).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _Color;
uniform highp float _AtlasScaleY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasOffsetX;
uniform highp float _BumpPower;
uniform sampler2D _DiffuseTrimTex;
uniform sampler2D _BumpTrimTex;
uniform sampler2D _BodyOcclusionTex;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  mediump float trimMask_7;
  highp vec3 bumpMap_8;
  highp vec3 bodyBump_9;
  highp float bodyOcc_10;
  highp vec3 trimBumpTex_11;
  highp vec3 trimDifTex_12;
  highp vec3 mainTex_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz;
  mainTex_13 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_DiffuseTrimTex, xlv_TEXCOORD0.xy).xyz;
  trimDifTex_12 = tmpvar_15;
  lowp vec3 normal_16;
  normal_16.xy = ((texture2D (_BumpTrimTex, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  trimBumpTex_11 = normal_16;
  highp vec2 tmpvar_17;
  tmpvar_17.x = _AtlasScaleX;
  tmpvar_17.y = _AtlasScaleY;
  highp vec2 tmpvar_18;
  tmpvar_18.x = _AtlasOffsetX;
  tmpvar_18.y = _AtlasOffsetY;
  highp vec2 tmpvar_19;
  tmpvar_19 = ((xlv_TEXCOORD0.zw * tmpvar_17) + tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_BodyOcclusionTex, tmpvar_19).x;
  bodyOcc_10 = tmpvar_20;
  lowp vec3 normal_21;
  normal_21.xy = ((texture2D (_BodyBumpTex, tmpvar_19).wy * 2.0) - 1.0);
  normal_21.z = sqrt((1.0 - clamp (dot (normal_21.xy, normal_21.xy), 0.0, 1.0)));
  bodyBump_9 = normal_21;
  lowp vec3 normal_22;
  normal_22.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_22.z = sqrt((1.0 - clamp (dot (normal_22.xy, normal_22.xy), 0.0, 1.0)));
  bumpMap_8 = normal_22;
  highp float tmpvar_23;
  tmpvar_23 = tmpvar_4.x;
  trimMask_7 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (mainTex_13 * _Color);
  mainTex_13 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (trimDifTex_12 * _TrimColor);
  trimDifTex_12 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = (mix (tmpvar_24, tmpvar_25, vec3(trimMask_7)) * bodyOcc_10);
  tmpvar_5 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27.z = 0.0;
  tmpvar_27.x = _BumpPower;
  tmpvar_27.y = _BumpPower;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((bodyBump_9 + (mix (bumpMap_8, trimBumpTex_11, vec3(trimMask_7)) * tmpvar_27)));
  tmpvar_6 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD2);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_LightmapInd, xlv_TEXCOORD2);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_33;
  mediump vec3 viewDir_34;
  viewDir_34 = tmpvar_32;
  highp float nh_35;
  mat3 tmpvar_36;
  tmpvar_36[0].x = 0.816497;
  tmpvar_36[0].y = -0.408248;
  tmpvar_36[0].z = -0.408248;
  tmpvar_36[1].x = 0.0;
  tmpvar_36[1].y = 0.707107;
  tmpvar_36[1].z = -0.707107;
  tmpvar_36[2].x = 0.57735;
  tmpvar_36[2].y = 0.57735;
  tmpvar_36[2].z = 0.57735;
  mediump vec3 normal_37;
  normal_37 = tmpvar_6;
  mediump vec3 scalePerBasisVector_38;
  mediump vec3 lm_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((8.0 * tmpvar_30.w) * tmpvar_30.xyz);
  lm_39 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((8.0 * tmpvar_31.w) * tmpvar_31.xyz);
  scalePerBasisVector_38 = tmpvar_41;
  lm_39 = (lm_39 * dot (clamp ((tmpvar_36 * normal_37), 0.0, 1.0), scalePerBasisVector_38));
  vec3 v_42;
  v_42.x = tmpvar_36[0].x;
  v_42.y = tmpvar_36[1].x;
  v_42.z = tmpvar_36[2].x;
  vec3 v_43;
  v_43.x = tmpvar_36[0].y;
  v_43.y = tmpvar_36[1].y;
  v_43.z = tmpvar_36[2].y;
  vec3 v_44;
  v_44.x = tmpvar_36[0].z;
  v_44.y = tmpvar_36[1].z;
  v_44.z = tmpvar_36[2].z;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_6, normalize((normalize((((scalePerBasisVector_38.x * v_42) + (scalePerBasisVector_38.y * v_43)) + (scalePerBasisVector_38.z * v_44))) + viewDir_34))));
  nh_35 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = lm_39;
  tmpvar_46.w = pow (nh_35, 0.0);
  tmpvar_33 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_33);
  light_3 = tmpvar_47;
  lowp vec4 c_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_5 * tmpvar_47.xyz);
  c_48.xyz = tmpvar_49;
  c_48.w = 0.0;
  c_2 = c_48;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 192 // 160 used size, 16 vars
Vector 112 [unity_LightmapST] 4
Vector 128 [_MainTex_ST] 4
Vector 144 [_BodyBumpTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 25 instructions, 2 temp regs, 0 temp arrays:
// ALU 11 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedidbkdhlhdnnjmfdhkmbjnbjjaflbkmebabaaaaaagmaiaaaaaeaaaaaa
daaaaaaanaacaaaaoiagaaaalaahaaaaebgpgodjjiacaaaajiacaaaaaaacpopp
eaacaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaahaa
adaaabaaaaaaaaaaabaaaeaaacaaaeaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaabaaaafaaakaaaaaaaaaaaaaaaaaaaaacpoppfbaaaaafapaaapkaaaaaaadp
aaaaaaaaaaaaaaaaaaaaaaaabpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabia
abaaapjabpaaaaacafaaaciaacaaapjabpaaaaacafaaadiaadaaapjabpaaaaac
afaaaeiaaeaaapjabpaaaaacafaaafiaafaaapjaaeaaaaaeaaaaadoaadaaoeja
acaaoekaacaaookaaeaaaaaeaaaaamoaaeaaeejaadaaeekaadaaoekaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaafaaaaadabaaabiaaaaaffiaafaaaakaafaaaaadabaaaiia
abaaaaiaapaaaakaafaaaaadabaaafiaaaaapeiaapaaaakaacaaaaadacaaadoa
abaakkiaabaaomiaaeaaaaaeadaaadoaaeaaoejaabaaoekaabaaookaabaaaaac
abaaahiaaeaaoekaafaaaaadacaaahiaabaaffiaalaaoekaaeaaaaaeabaaalia
akaakekaabaaaaiaacaakeiaaeaaaaaeabaaahiaamaaoekaabaakkiaabaapeia
acaaaaadabaaahiaabaaoeiaanaaoekaaeaaaaaeabaaahiaabaaoeiaaoaappka
aaaaoejbaiaaaaadaeaaaboaabaaoejaabaaoeiaabaaaaacacaaahiaabaaoeja
afaaaaadadaaahiaacaamjiaacaancjaaeaaaaaeacaaahiaacaamjjaacaancia
adaaoeibafaaaaadacaaahiaacaaoeiaabaappjaaiaaaaadaeaaacoaacaaoeia
abaaoeiaaiaaaaadaeaaaeoaacaaoejaabaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaamoaaaaaoeia
abaaaaacabaaapoaafaaoejappppaaaafdeieefcbaaeaaaaeaaaabaaaeabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadpcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaaldccabaaa
abaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaa
aiaaaaaadcaaaaalmccabaaaabaaaaaaagbebaaaaeaaaaaaagiecaaaaaaaaaaa
ajaaaaaakgiocaaaaaaaaaaaajaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
afaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaa
aaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadcaaaaal
dccabaaaaeaaaaaaegbabaaaaeaaaaaaegiacaaaaaaaaaaaahaaaaaaogikcaaa
aaaaaaaaahaaaaaadiaaaaahhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaa
acaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaaacaaaaaacgbjbaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgbpbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaa
bdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaacaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahcccabaaaafaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahbccabaaaafaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaaheccabaaaafaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaadoaaaaabejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
laaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaaabaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapapaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfcenebemaa
feeffiedepepfceeaaedepemepfcaaklepfdeheoleaaaaaaagaaaaaaaiaaaaaa
jiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaabaaaaaaapaaaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
acaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaedepemepfcaakl"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 491
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 495
uniform lowp vec4 unity_Ambient;
#line 283
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 285
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 90
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 477
v2f_surf vert_surf( in appdata_full v ) {
    #line 479
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord1.xy * _BodyBumpTex_ST.xy) + _BodyBumpTex_ST.zw);
    #line 483
    o.color = v.color;
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 487
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.viewDir = (rotation * ObjSpaceViewDir( v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.screen);
    xlv_TEXCOORD2 = vec2(xl_retval.lmap);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 150
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 186
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 180
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 306
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv2_BodyBumpTex;
    highp vec4 color;
};
#line 464
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    lowp vec4 color;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
#line 66
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[4];
uniform highp vec4 unity_LightPosition[4];
uniform highp vec4 unity_LightAtten[4];
#line 19
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 23
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
#line 27
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 31
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 35
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
#line 39
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
uniform highp mat4 glstate_matrix_texture0;
#line 43
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
uniform highp mat4 glstate_matrix_projection;
#line 47
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform lowp vec4 unity_ColorSpaceGrey;
#line 76
#line 81
#line 86
#line 90
#line 95
#line 119
#line 136
#line 157
#line 165
#line 192
#line 205
#line 214
#line 219
#line 228
#line 233
#line 242
#line 259
#line 264
#line 290
#line 298
#line 302
#line 316
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 329
#line 337
#line 351
#line 389
#line 409
#line 425
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _BodyBumpTex;
uniform sampler2D _BodyOcclusionTex;
#line 429
uniform sampler2D _BumpTrimTex;
uniform sampler2D _DiffuseTrimTex;
uniform highp float _BumpPower;
uniform highp float _AtlasOffsetX;
#line 433
uniform highp float _AtlasOffsetY;
uniform highp float _AtlasScaleX;
uniform highp float _AtlasScaleY;
uniform mediump vec3 _Color;
#line 437
uniform mediump vec3 _TrimColor;
uniform mediump vec3 _VertexMaskColor;
#line 446
#line 474
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BodyBumpTex_ST;
#line 491
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 495
uniform lowp vec4 unity_Ambient;
#line 176
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 178
    return (2.0 * color.xyz);
}
#line 316
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 320
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 325
    return lm;
}
#line 370
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 372
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 376
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * _SpecColor.xyz) * s.Gloss) * spec);
    #line 380
    return vec4( lm, spec);
}
#line 362
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 364
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 368
    return c;
}
#line 382
highp vec3 CombineNormalmap( in highp vec3 normalA, in highp vec3 normalB, in highp float normalPower ) {
    #line 384
    highp vec3 OUT;
    OUT = (normalA + (normalB * vec3( normalPower, normalPower, 0.0)));
    OUT = normalize(OUT);
    return OUT;
}
#line 271
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 273
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 446
void surf( in Input IN, inout SurfaceOutput o ) {
    highp vec3 mainTex = vec3( texture( _MainTex, IN.uv_MainTex));
    highp vec3 trimDifTex = vec3( texture( _DiffuseTrimTex, IN.uv_MainTex));
    #line 450
    highp vec3 trimBumpTex = UnpackNormal( texture( _BumpTrimTex, IN.uv_MainTex));
    highp vec2 atlasUv = ((IN.uv2_BodyBumpTex * vec2( _AtlasScaleX, _AtlasScaleY)) + vec2( _AtlasOffsetX, _AtlasOffsetY));
    highp float bodyOcc = float( texture( _BodyOcclusionTex, atlasUv));
    highp vec3 bodyBump = UnpackNormal( texture( _BodyBumpTex, atlasUv));
    #line 454
    highp vec3 bumpMap = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    mediump float trimMask = IN.color.x;
    mediump vec3 mainTrimVertexColor = mix( _Color, _VertexMaskColor, vec3( trimMask));
    mainTex = (mainTex * _Color);
    #line 458
    trimDifTex = (trimDifTex * _TrimColor);
    highp vec3 mainTrimDiff = mix( mainTex, trimDifTex, vec3( trimMask));
    highp vec3 mainTrimBump = mix( bumpMap, trimBumpTex, vec3( trimMask));
    o.Albedo = (mainTrimDiff * bodyOcc);
    #line 462
    o.Normal = CombineNormalmap( bodyBump, mainTrimBump, _BumpPower);
}
#line 496
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 499
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv2_BodyBumpTex = IN.pack0.zw;
    surfIN.color = IN.color;
    SurfaceOutput o;
    #line 503
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 507
    o.Gloss = 0.0;
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    #line 511
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    mediump vec4 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor);
    #line 515
    light += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.screen = vec4(xlv_TEXCOORD1);
    xlt_IN.lmap = vec2(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 6
//   opengl - ALU: 16 to 58, TEX: 4 to 9
//   d3d9 - ALU: 15 to 56, TEX: 4 to 9
//   d3d11 - ALU: 8 to 32, TEX: 4 to 9, FLOW: 1 to 1
//   d3d11_9x - ALU: 8 to 32, TEX: 4 to 9, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_LightBuffer] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 19 ALU, 4 TEX
PARAM c[8] = { program.local[0..6],
		{ 0 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TXP R2.xyz, fragment.texcoord[1], texture[6], 2D;
TEX R1.xyz, fragment.texcoord[0], texture[1], 2D;
MOV R0.z, c[3].x;
MOV R0.w, c[4].x;
MOV R0.y, c[2].x;
MOV R0.x, c[1];
MAD R0.xy, fragment.texcoord[0].zwzw, R0.zwzw, R0;
MOV result.color.w, c[7].x;
TEX R3.x, R0, texture[3], 2D;
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R0.xyz, R0, c[5];
MAD R1.xyz, R1, c[6], -R0;
MAD R0.xyz, fragment.color.primary.x, R1, R0;
LG2 R1.x, R2.x;
LG2 R1.z, R2.z;
LG2 R1.y, R2.y;
ADD R1.xyz, -R1, fragment.texcoord[2];
MUL R0.xyz, R0, R3.x;
MUL result.color.xyz, R0, R1;
END
# 19 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Float 0 [_AtlasOffsetX]
Float 1 [_AtlasOffsetY]
Float 2 [_AtlasScaleX]
Float 3 [_AtlasScaleY]
Vector 4 [_Color]
Vector 5 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_LightBuffer] 2D
"ps_2_0
; 18 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
def c6, 0.00000000, 0, 0, 0
dcl t0
dcl v0.x
dcl t1
dcl t2.xyz
mov r2.x, c2
mov r2.y, c3.x
mov r1.y, c1.x
mov r1.x, c0
mov r0.x, t0.z
mov r0.y, t0.w
mad r0.xy, r0, r2, r1
texld r3, r0, s3
texldp r0, t1, s6
texld r2, t0, s0
texld r1, t0, s1
mul r2.xyz, r2, c4
mad r1.xyz, r1, c5, -r2
mad r1.xyz, v0.x, r1, r2
log_pp r0.x, r0.x
log_pp r0.z, r0.z
log_pp r0.y, r0.y
add_pp r0.xyz, -r0, t2
mul r1.xyz, r1, r3.x
mul_pp r0.xyz, r1, r0
mov_pp r0.w, c6.x
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
ConstBuffer "$Globals" 160 // 92 used size, 14 vars
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 2
SetTexture 2 [_BodyOcclusionTex] 2D 1
SetTexture 3 [_LightBuffer] 2D 3
// 17 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfjmbjlempcgfiohjenmgpkgknlbobflaabaaaaaaniadaaaaadaaaaaa
cmaaaaaanaaaaaaaaeabaaaaejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefcmmacaaaaeaaaaaaaldaaaaaafjaaaaaeegiocaaaaaaaaaaa
agaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaaefaaaaajpcaabaaa
aaaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaajgihcaaaaaaaaaaaaeaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaafaaaaaa
egacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaa
abaaaaaadkiacaaaaaaaaaaaadaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaa
abaaaaaaakiacaaaaaaaaaaaaeaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaajgifcaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
adaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaacpaaaaafhcaabaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
ConstBuffer "$Globals" 160 // 92 used size, 14 vars
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 2
SetTexture 2 [_BodyOcclusionTex] 2D 1
SetTexture 3 [_LightBuffer] 2D 3
// 17 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedbdccinncgcndnhefehlbgkchfoohegiiabaaaaaaoeafaaaaaeaaaaaa
daaaaaaadiacaaaaamafaaaalaafaaaaebgpgodjaaacaaaaaaacaaaaaaacpppp
maabaaaaeaaaaaaaabaadeaaaaaaeaaaaaaaeaaaaeaaceaaaaaaeaaaaaaaaaaa
acababaaabacacaaadadadaaaaaaadaaadaaaaaaaaaaaaaaaaacppppfbaaaaaf
adaaapkaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabpaaaaacaaaaaaiaaaaaapla
bpaaaaacaaaaaaiaabaaaplabpaaaaacaaaaaaiaacaaaplabpaaaaacaaaaaaia
adaaahlabpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaac
aaaaaajaacaiapkabpaaaaacaaaaaajaadaiapkaafaaaaadaaaaabiaaaaakkla
aaaappkaafaaaaadaaaaaciaaaaapplaabaaaakaacaaaaadaaaaadiaaaaaoeia
aaaamjkaagaaaaacaaaaaeiaacaapplaafaaaaadabaaadiaaaaakkiaacaaoela
ecaaaaadacaaapiaaaaaoelaacaioekaecaaaaadadaaapiaaaaaoelaaaaioeka
ecaaaaadaaaaapiaaaaaoeiaabaioekaecaaaaadabaacpiaabaaoeiaadaioeka
afaaaaadaeaaadiaadaaoeiaabaamjkaafaaaaadaeaaaeiaadaakkiaabaappka
aeaaaaaeaaaaaoiaacaabliaacaablkaaeaablibaeaaaaaeaaaaaoiaabaaaala
aaaaoeiaaeaabliaafaaaaadaaaachiaaaaaaaiaaaaabliaapaaaaacacaacbia
abaaaaiaapaaaaacacaacciaabaaffiaapaaaaacacaaceiaabaakkiaacaaaaad
abaachiaacaaoeibadaaoelaafaaaaadaaaachiaaaaaoeiaabaaoeiaabaaaaac
aaaaciiaadaaaakaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefcmmacaaaa
eaaaaaaaldaaaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaa
gcbaaaadlcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacacaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaajgihcaaaaaaaaaaaaeaaaaaadcaaaaalhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaafaaaaaaegacbaiaebaaaaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaa
aeaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaa
adaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaacpaaaaafhcaabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaaeaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaaaaadoaaaaabejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
Vector 7 [unity_LightmapFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_LightBuffer] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 30 ALU, 6 TEX
PARAM c[9] = { program.local[0..7],
		{ 0, 8 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R1, fragment.texcoord[2], texture[7], 2D;
TEX R2.xyz, fragment.texcoord[0], texture[0], 2D;
TEX R3.xyz, fragment.texcoord[0], texture[1], 2D;
TXP R4.xyz, fragment.texcoord[1], texture[6], 2D;
MOV R0.z, c[3].x;
MOV R0.w, c[4].x;
MUL R2.xyz, R2, c[5];
MOV R0.y, c[2].x;
MOV R0.x, c[1];
MAD R0.xy, fragment.texcoord[0].zwzw, R0.zwzw, R0;
MUL R1.xyz, R1.w, R1;
MOV result.color.w, c[8].x;
TEX R5.x, R0, texture[3], 2D;
TEX R0, fragment.texcoord[2], texture[8], 2D;
MUL R0.xyz, R0.w, R0;
MUL R0.xyz, R0, c[8].y;
DP4 R0.w, fragment.texcoord[3], fragment.texcoord[3];
RSQ R0.w, R0.w;
RCP R0.w, R0.w;
MAD R1.xyz, R1, c[8].y, -R0;
MAD_SAT R0.w, R0, c[7].z, c[7];
MAD R0.xyz, R0.w, R1, R0;
MAD R1.xyz, R3, c[6], -R2;
MAD R1.xyz, fragment.color.primary.x, R1, R2;
LG2 R3.x, R4.x;
LG2 R3.y, R4.y;
LG2 R3.z, R4.z;
ADD R0.xyz, -R3, R0;
MUL R1.xyz, R1, R5.x;
MUL result.color.xyz, R1, R0;
END
# 30 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Float 0 [_AtlasOffsetX]
Float 1 [_AtlasOffsetY]
Float 2 [_AtlasScaleX]
Float 3 [_AtlasScaleY]
Vector 4 [_Color]
Vector 5 [_TrimColor]
Vector 6 [unity_LightmapFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_LightBuffer] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"ps_2_0
; 27 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c7, 8.00000000, 0.00000000, 0, 0
dcl t0
dcl v0.x
dcl t1
dcl t2.xy
dcl t3
texld r3, t0, s0
texld r4, t2, s8
mul_pp r4.xyz, r4.w, r4
mov r2.x, c2
mov r2.y, c3.x
mov r1.y, c1.x
mov r1.x, c0
mul_pp r4.xyz, r4, c7.x
mov r0.x, t0.z
mov r0.y, t0.w
mad r0.xy, r0, r2, r1
texld r6, r0, s3
texld r2, t0, s1
texldp r1, t1, s6
texld r0, t2, s7
mul_pp r5.xyz, r0.w, r0
dp4 r0.x, t3, t3
rsq r0.x, r0.x
rcp r0.x, r0.x
log_pp r1.x, r1.x
log_pp r1.y, r1.y
log_pp r1.z, r1.z
mad_pp r5.xyz, r5, c7.x, -r4
mad_sat r0.x, r0, c6.z, c6.w
mad_pp r0.xyz, r0.x, r5, r4
add_pp r0.xyz, -r1, r0
mul r1.xyz, r3, c4
mad r2.xyz, r2, c5, -r1
mad r1.xyz, v0.x, r2, r1
mul r1.xyz, r1, r6.x
mul_pp r0.xyz, r1, r0
mov_pp r0.w, c7.y
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
ConstBuffer "$Globals" 192 // 176 used size, 16 vars
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
Vector 160 [unity_LightmapFade] 4
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 2
SetTexture 2 [_BodyOcclusionTex] 2D 1
SetTexture 3 [_LightBuffer] 2D 3
SetTexture 4 [unity_Lightmap] 2D 4
SetTexture 5 [unity_LightmapInd] 2D 5
// 27 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjcbhkgjoflaeopbdghhlkmeajcoeopmeabaaaaaahiafaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
feaeaaaaeaaaaaaabfabaaaafjaaaaaeegiocaaaaaaaaaaaalaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
lcbabaaaadaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabbaaaaahbcaabaaaaaaaaaaa
egbobaaaafaaaaaaegbobaaaafaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadccaaaalbcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaaaaaaaaa
akaaaaaadkiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
aeaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaadiaaaaahccaabaaaaaaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaaaebdiaaaaahocaabaaaaaaaaaaaagajbaaa
abaaaaaafgafbaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaaaebdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaajgahbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaajgahbaaaaaaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaacpaaaaafhcaabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaajgihcaaaaaaaaaaaaeaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagbabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaadiaaaaaibcaabaaaacaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaa
adaaaaaadiaaaaaiccaabaaaacaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaa
aeaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaajgifcaaaaaaaaaaa
adaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaagaabaaa
acaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
ConstBuffer "$Globals" 192 // 176 used size, 16 vars
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
Vector 160 [unity_LightmapFade] 4
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 2
SetTexture 2 [_BodyOcclusionTex] 2D 1
SetTexture 3 [_LightBuffer] 2D 3
SetTexture 4 [unity_Lightmap] 2D 4
SetTexture 5 [unity_LightmapInd] 2D 5
// 27 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedkhedpdgbddbkeagngghjpalddmglelejabaaaaaahaaiaaaaaeaaaaaa
daaaaaaaceadaaaaiaahaaaadmaiaaaaebgpgodjomacaaaaomacaaaaaaacpppp
jiacaaaafeaaaaaaacaadmaaaaaafeaaaaaafeaaagaaceaaaaaafeaaaaaaaaaa
acababaaabacacaaadadadaaaeaeaeaaafafafaaaaaaadaaadaaaaaaaaaaaaaa
aaaaakaaabaaadaaaaaaaaaaaaacppppfbaaaaafaeaaapkaaaaaaaebaaaaaaaa
aaaaaaaaaaaaaaaabpaaaaacaaaaaaiaaaaaaplabpaaaaacaaaaaaiaabaaapla
bpaaaaacaaaaaaiaacaaaplabpaaaaacaaaaaaiaadaaadlabpaaaaacaaaaaaia
aeaaaplabpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaac
aaaaaajaacaiapkabpaaaaacaaaaaajaadaiapkabpaaaaacaaaaaajaaeaiapka
bpaaaaacaaaaaajaafaiapkaagaaaaacaaaaaiiaacaapplaafaaaaadaaaaadia
aaaappiaacaaoelaafaaaaadabaaabiaaaaakklaaaaappkaafaaaaadabaaacia
aaaapplaabaaaakaacaaaaadabaaadiaabaaoeiaaaaamjkaecaaaaadacaacpia
adaaoelaafaioekaecaaaaadadaacpiaadaaoelaaeaioekaecaaaaadaaaacpia
aaaaoeiaadaioekaecaaaaadaeaaapiaaaaaoelaacaioekaecaaaaadafaaapia
aaaaoelaaaaioekaecaaaaadabaaapiaabaaoeiaabaioekaajaaaaadaaaaaiia
aeaaoelaaeaaoelaahaaaaacaaaaaiiaaaaappiaagaaaaacaaaaaiiaaaaappia
aeaaaaaeaaaadiiaaaaappiaadaakkkaadaappkaafaaaaadacaaciiaacaappia
aeaaaakaafaaaaadabaacoiaacaabliaacaappiaafaaaaadadaaciiaadaappia
aeaaaakaaeaaaaaeacaachiaadaappiaadaaoeiaabaablibaeaaaaaeabaacoia
aaaappiaacaabliaabaaoeiaapaaaaacacaacbiaaaaaaaiaapaaaaacacaaccia
aaaaffiaapaaaaacacaaceiaaaaakkiaacaaaaadaaaachiaabaabliaacaaoeib
afaaaaadacaaadiaafaaoeiaabaamjkaafaaaaadacaaaeiaafaakkiaabaappka
aeaaaaaeabaaaoiaaeaabliaacaablkaacaablibaeaaaaaeabaaaoiaabaaaala
abaaoeiaacaabliaafaaaaadabaachiaabaaaaiaabaabliaafaaaaadaaaachia
aaaaoeiaabaaoeiaabaaaaacaaaaciiaaeaaffkaabaaaaacaaaicpiaaaaaoeia
ppppaaaafdeieefcfeaeaaaaeaaaaaaabfabaaaafjaaaaaeegiocaaaaaaaaaaa
alaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaae
aahabaaaafaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaa
acaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaad
pcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabbaaaaah
bcaabaaaaaaaaaaaegbobaaaafaaaaaaegbobaaaafaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadccaaaalbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
ckiacaaaaaaaaaaaakaaaaaadkiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaadiaaaaah
ccaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaebdiaaaaahocaabaaa
aaaaaaaaagajbaaaabaaaaaafgafbaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaebdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaajgahbaiaebaaaaaaaaaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaajgahbaaaaaaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaa
cpaaaaafhcaabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaajgihcaaaaaaaaaaaaeaaaaaadcaaaaal
hcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaegacbaia
ebaaaaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagbabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaadiaaaaaibcaabaaaacaaaaaackbabaaaabaaaaaa
dkiacaaaaaaaaaaaadaaaaaadiaaaaaiccaabaaaacaaaaaadkbabaaaabaaaaaa
akiacaaaaaaaaaaaaeaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
jgifcaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaagaabaaaacaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab
ejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaa
knaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapabaaaakeaaaaaaabaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaa
aeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaa
fdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Float 0 [_BumpPower]
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightBuffer] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 58 ALU, 9 TEX
PARAM c[11] = { program.local[0..6],
		{ 0, 2, 1, 8 },
		{ -0.40824828, -0.70710677, 0.57735026 },
		{ -0.40824831, 0.70710677, 0.57735026 },
		{ 0.81649655, 0, 0.57735026 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEMP R7;
TEX R1, fragment.texcoord[2], texture[8], 2D;
TEX R7.yw, fragment.texcoord[0], texture[2], 2D;
TEX R6.yw, fragment.texcoord[0], texture[5], 2D;
TEX R3.xyz, fragment.texcoord[0], texture[1], 2D;
TEX R4.xyz, fragment.texcoord[0], texture[0], 2D;
MAD R6.xy, R6.wyzw, c[7].y, -c[7].z;
MUL R6.zw, R6.xyxy, R6.xyxy;
ADD_SAT R3.w, R6.z, R6;
ADD R3.w, -R3, c[7].z;
RSQ R3.w, R3.w;
MAD R7.yz, R7.xwyw, c[7].y, -c[7].z;
MOV R0.x, c[3];
MOV R0.y, c[4].x;
MOV R0.w, c[2].x;
MOV R0.z, c[1].x;
MAD R2.xy, fragment.texcoord[0].zwzw, R0, R0.zwzw;
RCP R6.z, R3.w;
MUL R1.xyz, R1.w, R1;
MOV result.color.w, c[7].x;
TEX R5.yw, R2, texture[4], 2D;
TEX R7.x, R2, texture[3], 2D;
TXP R2.xyz, fragment.texcoord[1], texture[6], 2D;
TEX R0, fragment.texcoord[2], texture[7], 2D;
MAD R5.xy, R5.wyzw, c[7].y, -c[7].z;
MUL R5.zw, R5.xyxy, R5.xyxy;
ADD_SAT R2.w, R5.z, R5;
MUL R5.zw, R7.xyyz, R7.xyyz;
ADD_SAT R4.w, R5.z, R5;
ADD R2.w, -R2, c[7].z;
RSQ R2.w, R2.w;
ADD R4.w, -R4, c[7].z;
RSQ R4.w, R4.w;
RCP R7.w, R4.w;
ADD R7.yzw, R7, -R6.xxyz;
MAD R6.xyz, fragment.color.primary.x, R7.yzww, R6;
RCP R5.z, R2.w;
MOV R7.yz, c[0].x;
MOV R7.w, c[7].x;
MAD R5.xyz, R6, R7.yzww, R5;
DP3 R2.w, R5, R5;
RSQ R2.w, R2.w;
MUL R6.xyz, R2.w, R5;
DP3_SAT R5.z, R6, c[8];
DP3_SAT R5.y, R6, c[9];
DP3_SAT R5.x, R6, c[10];
MUL R1.xyz, R1, R5;
DP3 R1.w, R1, c[7].w;
MUL R1.xyz, R4, c[5];
MUL R0.xyz, R0.w, R0;
MAD R3.xyz, R3, c[6], -R1;
MAD R1.xyz, fragment.color.primary.x, R3, R1;
MUL R0.xyz, R0, R1.w;
LG2 R2.x, R2.x;
LG2 R2.z, R2.z;
LG2 R2.y, R2.y;
MAD R0.xyz, R0, c[7].w, -R2;
MUL R1.xyz, R1, R7.x;
MUL result.color.xyz, R1, R0;
END
# 58 instructions, 8 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Float 0 [_BumpPower]
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightBuffer] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"ps_2_0
; 56 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c7, 2.00000000, -1.00000000, 1.00000000, 0.00000000
def c8, -0.40824828, -0.70710677, 0.57735026, 8.00000000
def c9, -0.40824831, 0.70710677, 0.57735026, 0
def c10, 0.81649655, 0.00000000, 0.57735026, 0
dcl t0
dcl v0.x
dcl t1
dcl t2.xy
texld r7, t0, s1
texld r6, t0, s0
texldp r5, t1, s6
texld r4, t2, s7
texld r3, t2, s8
mov r1.x, t0.z
mov r1.y, t0.w
mov r2.x, c3
mov r2.y, c4.x
mov r0.y, c2.x
mov r0.x, c1
mad r0.xy, r1, r2, r0
texld r2, r0, s4
texld r11, r0, s3
texld r1, t0, s2
texld r0, t0, s5
mov r2.x, r2.w
mad_pp r8.xy, r2, c7.x, c7.y
mul_pp r2.xy, r8, r8
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c7.z
mov r2.x, r0.w
mov r2.y, r0
mov r1.x, r1.w
rsq_pp r0.x, r0.x
rcp_pp r8.z, r0.x
mad_pp r9.xy, r2, c7.x, c7.y
mad_pp r10.xy, r1, c7.x, c7.y
mul_pp r1.xy, r9, r9
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r10, r10
add_pp_sat r2.x, r2, r2.y
add_pp r1.x, -r1, c7.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c7.z
rsq_pp r2.x, r2.x
rcp_pp r9.z, r1.x
rcp_pp r10.z, r2.x
add r1.xyz, r10, -r9
mov r0.xy, c0.x
mov r0.z, c7.w
mad r1.xyz, v0.x, r1, r9
mad r1.xyz, r1, r0, r8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul r1.xyz, r0.x, r1
dp3_pp_sat r0.z, r1, c8
dp3_pp_sat r0.y, r1, c9
dp3_pp_sat r0.x, r1, c10
mul_pp r1.xyz, r3.w, r3
mul_pp r0.xyz, r1, r0
mul_pp r1.xyz, r4.w, r4
dp3_pp r0.x, r0, c8.w
mul_pp r0.xyz, r1, r0.x
log_pp r1.x, r5.x
log_pp r1.z, r5.z
log_pp r1.y, r5.y
mad_pp r0.xyz, r0, c8.w, -r1
mul r1.xyz, r6, c5
mad r2.xyz, r7, c6, -r1
mad r1.xyz, v0.x, r2, r1
mul r1.xyz, r1, r11.x
mul_pp r0.xyz, r1, r0
mov_pp r0.w, c7
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
ConstBuffer "$Globals" 192 // 92 used size, 16 vars
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 5
SetTexture 2 [_BumpTrimTex] 2D 4
SetTexture 3 [_BodyOcclusionTex] 2D 3
SetTexture 4 [_BodyBumpTex] 2D 2
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [_LightBuffer] 2D 6
SetTexture 7 [unity_Lightmap] 2D 7
SetTexture 8 [unity_LightmapInd] 2D 8
// 53 instructions, 4 temp regs, 0 temp arrays:
// ALU 32 float, 0 int, 0 uint
// TEX 9 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediblbggapfbbenmlnjjghjnabecodaheaabaaaaaabeajaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
paahaaaaeaaaaaaapmabaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaad
aagabaaaaiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaa
ahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadpcbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaad
dcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
dcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaadaaaaaadiaaaaaiccaabaaa
abaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaaaaaaaaaidcaabaaa
abaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaaaaaaaaaaadaaaaaa
dgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaapcaaaakbcaabaaaacaaaaaaaceaaaaaolaffbdpdkmnbddpaaaaaaaa
aaaaaaaaigaabaaaaaaaaaaabacaaaakccaabaaaacaaaaaaaceaaaaaomafnblo
pdaedfdpdkmnbddpaaaaaaaaegacbaaaaaaaaaaabacaaaakecaabaaaacaaaaaa
aceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaaegacbaaaaaaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegbabaaaaeaaaaaaeghobaaaaiaaaaaaaagabaaaaiaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaebdiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaaaoaaaaahgcaabaaaaaaaaaaa
agbbbaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaacaaaaaajgafbaaa
aaaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaacpaaaaafocaabaaaaaaaaaaa
agajbaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaa
ahaaaaaaaagabaaaahaaaaaadiaaaaahccaabaaaabaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaaebdiaaaaahocaabaaaabaaaaaaagajbaaaacaaaaaafgafbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaajgahbaaaabaaaaaaagaabaaaaaaaaaaa
jgahbaiaebaaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaiocaabaaaabaaaaaa
agajbaaaadaaaaaafgiocaaaaaaaaaaaaeaaaaaadcaaaaalhcaabaaaacaaaaaa
egacbaaaacaaaaaaegiccaaaaaaaaaaaafaaaaaajgahbaiaebaaaaaaabaaaaaa
dcaaaaajocaabaaaabaaaaaaagbabaaaacaaaaaaagajbaaaacaaaaaafgaobaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaajgahbaaaabaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
ConstBuffer "$Globals" 192 // 92 used size, 16 vars
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 5
SetTexture 2 [_BumpTrimTex] 2D 4
SetTexture 3 [_BodyOcclusionTex] 2D 3
SetTexture 4 [_BodyBumpTex] 2D 2
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [_LightBuffer] 2D 6
SetTexture 7 [unity_Lightmap] 2D 7
SetTexture 8 [unity_LightmapInd] 2D 8
// 53 instructions, 4 temp regs, 0 temp arrays:
// ALU 32 float, 0 int, 0 uint
// TEX 9 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedhdkboakpbpfkenclbdcgkkjkechjhjgaabaaaaaaimanaaaaaeaaaaaa
daaaaaaakeaeaaaajmamaaaafianaaaaebgpgodjgmaeaaaagmaeaaaaaaacpppp
biaeaaaafeaaaaaaabaaeiaaaaaafeaaaaaafeaaajaaceaaaaaafeaaaaaaaaaa
afababaaaeacacaaadadadaaacaeaeaaabafafaaagagagaaahahahaaaiaiaiaa
aaaaadaaadaaaaaaaaaaaaaaaaacppppfbaaaaafadaaapkaaaaaaaeaaaaaialp
aaaaaaaaaaaaiadpfbaaaaafaeaaapkaaaaaaaebdkmnbddpaaaaaaaaolaffbdp
fbaaaaafafaaapkaomafnblopdaedfdpdkmnbddpaaaaaaaafbaaaaafagaaapka
olafnblopdaedflpdkmnbddpaaaaaaaabpaaaaacaaaaaaiaaaaaaplabpaaaaac
aaaaaaiaabaaaplabpaaaaacaaaaaaiaacaaaplabpaaaaacaaaaaaiaadaaadla
bpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaacaaaaaaja
acaiapkabpaaaaacaaaaaajaadaiapkabpaaaaacaaaaaajaaeaiapkabpaaaaac
aaaaaajaafaiapkabpaaaaacaaaaaajaagaiapkabpaaaaacaaaaaajaahaiapka
bpaaaaacaaaaaajaaiaiapkaecaaaaadaaaacpiaaaaaoelaaeaioekaecaaaaad
abaacpiaaaaaoelaabaioekaecaaaaadacaacpiaadaaoelaaiaioekaecaaaaad
adaacpiaadaaoelaahaioekaecaaaaadaeaaapiaaaaaoelaafaioekaecaaaaad
afaaapiaaaaaoelaaaaioekaaeaaaaaeagaacbiaaaaappiaadaaaakaadaaffka
aeaaaaaeagaacciaaaaaffiaadaaaakaadaaffkaaeaaaaaeaaaacbiaabaappia
adaaaakaadaaffkaaeaaaaaeaaaacciaabaaffiaadaaaakaadaaffkabcaaaaae
abaaadiaabaaaalaagaaoeiaaaaaoeiaafaaaaadaaaaadiaabaaoeiaaaaaaaka
afaaaaadabaaabiaaaaakklaaaaappkaafaaaaadabaaaciaaaaapplaabaaaaka
acaaaaadabaaadiaabaaoeiaaaaamjkaagaaaaacaaaaaiiaacaapplaafaaaaad
agaaadiaaaaappiaacaaoelaecaaaaadahaacpiaabaaoeiaacaioekaecaaaaad
abaaapiaabaaoeiaadaioekaecaaaaadagaacpiaagaaoeiaagaioekaaeaaaaae
aiaacbiaahaappiaadaaaakaadaaffkaaeaaaaaeaiaacciaahaaffiaadaaaaka
adaaffkafkaaaaaeaaaadiiaaiaaoeiaaiaaoeiaadaakkkaacaaaaadaaaaciia
aaaappibadaappkaahaaaaacaaaaciiaaaaappiaagaaaaacaiaaceiaaaaappia
abaaaaacaaaaaeiaadaakkkaacaaaaadaaaaahiaaaaaoeiaaiaaoeiaceaaaaac
ahaaahiaaaaaoeiaaiaaaaadaaaadbiaaeaablkaahaaoeiaaiaaaaadaaaadcia
afaaoekaahaaoeiaaiaaaaadaaaadeiaagaaoekaahaaoeiaafaaaaadaaaaciia
acaappiaaeaaaakaafaaaaadacaachiaacaaoeiaaaaappiaaiaaaaadaeaaciia
aaaaoeiaacaaoeiaafaaaaadadaaciiaadaappiaaeaaaakaafaaaaadaaaachia
adaaoeiaadaappiaapaaaaacacaacbiaagaaaaiaapaaaaacacaacciaagaaffia
apaaaaacacaaceiaagaakkiaaeaaaaaeaaaachiaaaaaoeiaaeaappiaacaaoeib
afaaaaadacaaadiaafaaoeiaabaamjkaafaaaaadacaaaeiaafaakkiaabaappka
aeaaaaaeabaaaoiaaeaabliaacaablkaacaablibaeaaaaaeabaaaoiaabaaaala
abaaoeiaacaabliaafaaaaadabaachiaabaaaaiaabaabliaafaaaaadaaaachia
aaaaoeiaabaaoeiaabaaaaacaaaaciiaadaakkkaabaaaaacaaaicpiaaaaaoeia
ppppaaaafdeieefcpaahaaaaeaaaaaaapmabaaaafjaaaaaeegiocaaaaaaaaaaa
agaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaa
ahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fibiaaaeaahabaaaahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaa
gcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadlcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaabaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaa
abaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaadaaaaaa
diaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaa
aaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
ddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaa
aaaaaaaaadaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaaapcaaaakbcaabaaaacaaaaaaaceaaaaaolaffbdp
dkmnbddpaaaaaaaaaaaaaaaaigaabaaaaaaaaaaabacaaaakccaabaaaacaaaaaa
aceaaaaaomafnblopdaedfdpdkmnbddpaaaaaaaaegacbaaaaaaaaaaabacaaaak
ecaabaaaacaaaaaaaceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaaeaaaaaaeghobaaaaiaaaaaa
aagabaaaaiaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaebdiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaaaoaaaaah
gcaabaaaaaaaaaaaagbbbaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaa
acaaaaaajgafbaaaaaaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaacpaaaaaf
ocaabaaaaaaaaaaaagajbaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
aeaaaaaaeghobaaaahaaaaaaaagabaaaahaaaaaadiaaaaahccaabaaaabaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaaebdiaaaaahocaabaaaabaaaaaaagajbaaa
acaaaaaafgafbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaajgahbaaaabaaaaaa
agaabaaaaaaaaaaajgahbaiaebaaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaai
ocaabaaaabaaaaaaagajbaaaadaaaaaafgiocaaaaaaaaaaaaeaaaaaadcaaaaal
hcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaafaaaaaajgahbaia
ebaaaaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbabaaaacaaaaaaagajbaaa
acaaaaaafgaobaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
jgahbaaaabaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaabejfdeheo
leaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaaknaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapabaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapalaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
adadaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaa
abaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaa
fdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_LightBuffer] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 16 ALU, 4 TEX
PARAM c[8] = { program.local[0..6],
		{ 0 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TXP R2.xyz, fragment.texcoord[1], texture[6], 2D;
TEX R1.xyz, fragment.texcoord[0], texture[1], 2D;
MOV R0.z, c[3].x;
MOV R0.w, c[4].x;
MOV R0.y, c[2].x;
MOV R0.x, c[1];
MAD R0.xy, fragment.texcoord[0].zwzw, R0.zwzw, R0;
MOV result.color.w, c[7].x;
TEX R3.x, R0, texture[3], 2D;
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R0.xyz, R0, c[5];
MAD R1.xyz, R1, c[6], -R0;
MAD R0.xyz, fragment.color.primary.x, R1, R0;
ADD R1.xyz, R2, fragment.texcoord[2];
MUL R0.xyz, R0, R3.x;
MUL result.color.xyz, R0, R1;
END
# 16 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Float 0 [_AtlasOffsetX]
Float 1 [_AtlasOffsetY]
Float 2 [_AtlasScaleX]
Float 3 [_AtlasScaleY]
Vector 4 [_Color]
Vector 5 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_LightBuffer] 2D
"ps_2_0
; 15 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
def c6, 0.00000000, 0, 0, 0
dcl t0
dcl v0.x
dcl t1
dcl t2.xyz
mov r2.x, c2
mov r2.y, c3.x
mov r1.y, c1.x
mov r1.x, c0
mov r0.x, t0.z
mov r0.y, t0.w
mad r0.xy, r0, r2, r1
texld r3, r0, s3
texldp r0, t1, s6
texld r2, t0, s0
texld r1, t0, s1
mul r2.xyz, r2, c4
mad r1.xyz, r1, c5, -r2
mad r1.xyz, v0.x, r1, r2
add_pp r0.xyz, r0, t2
mul r1.xyz, r1, r3.x
mul_pp r0.xyz, r1, r0
mov_pp r0.w, c6.x
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
ConstBuffer "$Globals" 160 // 92 used size, 14 vars
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 2
SetTexture 2 [_BodyOcclusionTex] 2D 1
SetTexture 3 [_LightBuffer] 2D 3
// 16 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedccpkkmkkfiakjnmjgdlckeopjohpmfmdabaaaaaamaadaaaaadaaaaaa
cmaaaaaanaaaaaaaaeabaaaaejfdeheojmaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefcleacaaaaeaaaaaaaknaaaaaafjaaaaaeegiocaaaaaaaaaaa
agaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaaefaaaaajpcaabaaa
aaaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaajgihcaaaaaaaaaaaaeaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaafaaaaaa
egacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaackbabaaa
abaaaaaadkiacaaaaaaaaaaaadaaaaaadiaaaaaiccaabaaaabaaaaaadkbabaaa
abaaaaaaakiacaaaaaaaaaaaaeaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaajgifcaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
adaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
ConstBuffer "$Globals" 160 // 92 used size, 14 vars
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 2
SetTexture 2 [_BodyOcclusionTex] 2D 1
SetTexture 3 [_LightBuffer] 2D 3
// 16 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedaicnengkjkjmngdadagblbdfbongbeonabaaaaaakiafaaaaaeaaaaaa
daaaaaaabeacaaaanaaeaaaaheafaaaaebgpgodjnmabaaaanmabaaaaaaacpppp
jmabaaaaeaaaaaaaabaadeaaaaaaeaaaaaaaeaaaaeaaceaaaaaaeaaaaaaaaaaa
acababaaabacacaaadadadaaaaaaadaaadaaaaaaaaaaaaaaaaacppppfbaaaaaf
adaaapkaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabpaaaaacaaaaaaiaaaaaapla
bpaaaaacaaaaaaiaabaaaplabpaaaaacaaaaaaiaacaaaplabpaaaaacaaaaaaia
adaaahlabpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaac
aaaaaajaacaiapkabpaaaaacaaaaaajaadaiapkaafaaaaadaaaaabiaaaaakkla
aaaappkaafaaaaadaaaaaciaaaaapplaabaaaakaacaaaaadaaaaadiaaaaaoeia
aaaamjkaagaaaaacaaaaaeiaacaapplaafaaaaadabaaadiaaaaakkiaacaaoela
ecaaaaadacaaapiaaaaaoelaacaioekaecaaaaadadaaapiaaaaaoelaaaaioeka
ecaaaaadaaaaapiaaaaaoeiaabaioekaecaaaaadabaacpiaabaaoeiaadaioeka
afaaaaadaeaaadiaadaaoeiaabaamjkaafaaaaadaeaaaeiaadaakkiaabaappka
aeaaaaaeaaaaaoiaacaabliaacaablkaaeaablibaeaaaaaeaaaaaoiaabaaaala
aaaaoeiaaeaabliaafaaaaadaaaachiaaaaaaaiaaaaabliaacaaaaadabaachia
abaaoeiaadaaoelaafaaaaadaaaachiaaaaaoeiaabaaoeiaabaaaaacaaaaciia
adaaaakaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefcleacaaaaeaaaaaaa
knaaaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafkaaaaadaagabaaaaaaaaaaa
fkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaa
adaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
lcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacacaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaajgihcaaaaaaaaaaaaeaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaafaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaadaaaaaa
diaaaaaiccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaa
aaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaagaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaaaaadoaaaaabejfdeheojmaaaaaaafaaaaaaaiaaaaaa
iaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaabaaaaaaapapaaaajfaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
acaaaaaaapabaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaa
imaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
Vector 7 [unity_LightmapFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_LightBuffer] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 27 ALU, 6 TEX
PARAM c[9] = { program.local[0..7],
		{ 0, 8 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R1, fragment.texcoord[2], texture[7], 2D;
TEX R2.xyz, fragment.texcoord[0], texture[0], 2D;
TXP R4.xyz, fragment.texcoord[1], texture[6], 2D;
TEX R3.xyz, fragment.texcoord[0], texture[1], 2D;
MOV R0.z, c[3].x;
MOV R0.w, c[4].x;
MUL R2.xyz, R2, c[5];
MOV R0.y, c[2].x;
MOV R0.x, c[1];
MAD R0.xy, fragment.texcoord[0].zwzw, R0.zwzw, R0;
MUL R1.xyz, R1.w, R1;
MOV result.color.w, c[8].x;
TEX R5.x, R0, texture[3], 2D;
TEX R0, fragment.texcoord[2], texture[8], 2D;
MUL R0.xyz, R0.w, R0;
MUL R0.xyz, R0, c[8].y;
DP4 R0.w, fragment.texcoord[3], fragment.texcoord[3];
RSQ R0.w, R0.w;
RCP R0.w, R0.w;
MAD R1.xyz, R1, c[8].y, -R0;
MAD_SAT R0.w, R0, c[7].z, c[7];
MAD R0.xyz, R0.w, R1, R0;
MAD R1.xyz, R3, c[6], -R2;
MAD R1.xyz, fragment.color.primary.x, R1, R2;
ADD R0.xyz, R4, R0;
MUL R1.xyz, R1, R5.x;
MUL result.color.xyz, R1, R0;
END
# 27 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Float 0 [_AtlasOffsetX]
Float 1 [_AtlasOffsetY]
Float 2 [_AtlasScaleX]
Float 3 [_AtlasScaleY]
Vector 4 [_Color]
Vector 5 [_TrimColor]
Vector 6 [unity_LightmapFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 6 [_LightBuffer] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"ps_2_0
; 24 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s3
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c7, 8.00000000, 0.00000000, 0, 0
dcl t0
dcl v0.x
dcl t1
dcl t2.xy
dcl t3
texld r3, t0, s0
texld r4, t2, s8
mul_pp r4.xyz, r4.w, r4
mov r2.x, c2
mov r2.y, c3.x
mov r1.y, c1.x
mov r1.x, c0
mul_pp r4.xyz, r4, c7.x
mov r0.x, t0.z
mov r0.y, t0.w
mad r0.xy, r0, r2, r1
texld r6, r0, s3
texld r2, t0, s1
texldp r1, t1, s6
texld r0, t2, s7
mul_pp r5.xyz, r0.w, r0
dp4 r0.x, t3, t3
rsq r0.x, r0.x
rcp r0.x, r0.x
mad_pp r5.xyz, r5, c7.x, -r4
mad_sat r0.x, r0, c6.z, c6.w
mad_pp r0.xyz, r0.x, r5, r4
add_pp r0.xyz, r1, r0
mul r1.xyz, r3, c4
mad r2.xyz, r2, c5, -r1
mad r1.xyz, v0.x, r2, r1
mul r1.xyz, r1, r6.x
mul_pp r0.xyz, r1, r0
mov_pp r0.w, c7.y
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
ConstBuffer "$Globals" 192 // 176 used size, 16 vars
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
Vector 160 [unity_LightmapFade] 4
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 2
SetTexture 2 [_BodyOcclusionTex] 2D 1
SetTexture 3 [_LightBuffer] 2D 3
SetTexture 4 [unity_Lightmap] 2D 4
SetTexture 5 [unity_LightmapInd] 2D 5
// 26 instructions, 3 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedifnchmbalfbfmacdhknmgmhkndbhogfgabaaaaaagaafaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
dmaeaaaaeaaaaaaaapabaaaafjaaaaaeegiocaaaaaaaaaaaalaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
lcbabaaaadaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabbaaaaahbcaabaaaaaaaaaaa
egbobaaaafaaaaaaegbobaaaafaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadccaaaalbcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaaaaaaaaa
akaaaaaadkiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
aeaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaadiaaaaahccaabaaaaaaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaaaebdiaaaaahocaabaaaaaaaaaaaagajbaaa
abaaaaaafgafbaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaaaebdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaajgahbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaajgahbaaaaaaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaaaaaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaajgihcaaaaaaaaaaaaeaaaaaadcaaaaal
hcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaegacbaia
ebaaaaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagbabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaadiaaaaaibcaabaaaacaaaaaackbabaaaabaaaaaa
dkiacaaaaaaaaaaaadaaaaaadiaaaaaiccaabaaaacaaaaaadkbabaaaabaaaaaa
akiacaaaaaaaaaaaaeaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
jgifcaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaagaabaaaacaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
ConstBuffer "$Globals" 192 // 176 used size, 16 vars
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
Vector 160 [unity_LightmapFade] 4
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 2
SetTexture 2 [_BodyOcclusionTex] 2D 1
SetTexture 3 [_LightBuffer] 2D 3
SetTexture 4 [unity_Lightmap] 2D 4
SetTexture 5 [unity_LightmapInd] 2D 5
// 26 instructions, 3 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedebpdfiengfhpgcammdmmheeggjkfaiffabaaaaaadeaiaaaaaeaaaaaa
daaaaaaaaaadaaaaeeahaaaaaaaiaaaaebgpgodjmiacaaaamiacaaaaaaacpppp
heacaaaafeaaaaaaacaadmaaaaaafeaaaaaafeaaagaaceaaaaaafeaaaaaaaaaa
acababaaabacacaaadadadaaaeaeaeaaafafafaaaaaaadaaadaaaaaaaaaaaaaa
aaaaakaaabaaadaaaaaaaaaaaaacppppfbaaaaafaeaaapkaaaaaaaebaaaaaaaa
aaaaaaaaaaaaaaaabpaaaaacaaaaaaiaaaaaaplabpaaaaacaaaaaaiaabaaapla
bpaaaaacaaaaaaiaacaaaplabpaaaaacaaaaaaiaadaaadlabpaaaaacaaaaaaia
aeaaaplabpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaac
aaaaaajaacaiapkabpaaaaacaaaaaajaadaiapkabpaaaaacaaaaaajaaeaiapka
bpaaaaacaaaaaajaafaiapkaagaaaaacaaaaaiiaacaapplaafaaaaadaaaaadia
aaaappiaacaaoelaafaaaaadabaaabiaaaaakklaaaaappkaafaaaaadabaaacia
aaaapplaabaaaakaacaaaaadabaaadiaabaaoeiaaaaamjkaecaaaaadacaacpia
adaaoelaafaioekaecaaaaadadaacpiaadaaoelaaeaioekaecaaaaadaaaacpia
aaaaoeiaadaioekaecaaaaadaeaaapiaaaaaoelaacaioekaecaaaaadafaaapia
aaaaoelaaaaioekaecaaaaadabaaapiaabaaoeiaabaioekaajaaaaadaaaaaiia
aeaaoelaaeaaoelaahaaaaacaaaaaiiaaaaappiaagaaaaacaaaaaiiaaaaappia
aeaaaaaeaaaadiiaaaaappiaadaakkkaadaappkaafaaaaadacaaciiaacaappia
aeaaaakaafaaaaadabaacoiaacaabliaacaappiaafaaaaadadaaciiaadaappia
aeaaaakaaeaaaaaeacaachiaadaappiaadaaoeiaabaablibaeaaaaaeabaacoia
aaaappiaacaabliaabaaoeiaacaaaaadaaaachiaaaaaoeiaabaabliaafaaaaad
acaaadiaafaaoeiaabaamjkaafaaaaadacaaaeiaafaakkiaabaappkaaeaaaaae
abaaaoiaaeaabliaacaablkaacaablibaeaaaaaeabaaaoiaabaaaalaabaaoeia
acaabliaafaaaaadabaachiaabaaaaiaabaabliaafaaaaadaaaachiaaaaaoeia
abaaoeiaabaaaaacaaaaciiaaeaaffkaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcdmaeaaaaeaaaaaaaapabaaaafjaaaaaeegiocaaaaaaaaaaaalaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaa
gcbaaaadlcbabaaaadaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadpcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabbaaaaahbcaabaaa
aaaaaaaaegbobaaaafaaaaaaegbobaaaafaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadccaaaalbcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaa
aaaaaaaaakaaaaaadkiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaadiaaaaahccaabaaa
aaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaebdiaaaaahocaabaaaaaaaaaaa
agajbaaaabaaaaaafgafbaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
aeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaaaebdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaajgahbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaajgahbaaaaaaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaaaaaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaefaaaaajpcaabaaa
abaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
diaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaajgihcaaaaaaaaaaaaeaaaaaa
dcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagbabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaibcaabaaaacaaaaaackbabaaa
abaaaaaadkiacaaaaaaaaaaaadaaaaaadiaaaaaiccaabaaaacaaaaaadkbabaaa
abaaaaaaakiacaaaaaaaaaaaaeaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaaa
acaaaaaajgifcaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaaagaabaaaacaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaa
doaaaaabejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
apapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapabaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Float 0 [_BumpPower]
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightBuffer] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"!!ARBfp1.0
OPTION ARB_precision_hint_fastest;
# 55 ALU, 9 TEX
PARAM c[11] = { program.local[0..6],
		{ 0, 2, 1, 8 },
		{ -0.40824828, -0.70710677, 0.57735026 },
		{ -0.40824831, 0.70710677, 0.57735026 },
		{ 0.81649655, 0, 0.57735026 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEMP R7;
TEX R1, fragment.texcoord[2], texture[8], 2D;
TEX R7.yw, fragment.texcoord[0], texture[2], 2D;
TEX R6.yw, fragment.texcoord[0], texture[5], 2D;
TEX R3.xyz, fragment.texcoord[0], texture[1], 2D;
TEX R4.xyz, fragment.texcoord[0], texture[0], 2D;
MAD R6.xy, R6.wyzw, c[7].y, -c[7].z;
MUL R6.zw, R6.xyxy, R6.xyxy;
ADD_SAT R3.w, R6.z, R6;
ADD R3.w, -R3, c[7].z;
RSQ R3.w, R3.w;
MAD R7.yz, R7.xwyw, c[7].y, -c[7].z;
MOV R0.x, c[3];
MOV R0.y, c[4].x;
MOV R0.w, c[2].x;
MOV R0.z, c[1].x;
MAD R2.xy, fragment.texcoord[0].zwzw, R0, R0.zwzw;
RCP R6.z, R3.w;
MUL R1.xyz, R1.w, R1;
MOV result.color.w, c[7].x;
TEX R5.yw, R2, texture[4], 2D;
TEX R7.x, R2, texture[3], 2D;
TEX R0, fragment.texcoord[2], texture[7], 2D;
TXP R2.xyz, fragment.texcoord[1], texture[6], 2D;
MAD R5.xy, R5.wyzw, c[7].y, -c[7].z;
MUL R5.zw, R5.xyxy, R5.xyxy;
ADD_SAT R2.w, R5.z, R5;
MUL R5.zw, R7.xyyz, R7.xyyz;
ADD_SAT R4.w, R5.z, R5;
ADD R2.w, -R2, c[7].z;
RSQ R2.w, R2.w;
ADD R4.w, -R4, c[7].z;
RSQ R4.w, R4.w;
RCP R7.w, R4.w;
ADD R7.yzw, R7, -R6.xxyz;
MAD R6.xyz, fragment.color.primary.x, R7.yzww, R6;
RCP R5.z, R2.w;
MOV R7.yz, c[0].x;
MOV R7.w, c[7].x;
MAD R5.xyz, R6, R7.yzww, R5;
DP3 R2.w, R5, R5;
RSQ R2.w, R2.w;
MUL R6.xyz, R2.w, R5;
DP3_SAT R5.z, R6, c[8];
DP3_SAT R5.y, R6, c[9];
DP3_SAT R5.x, R6, c[10];
MUL R1.xyz, R1, R5;
DP3 R1.w, R1, c[7].w;
MUL R1.xyz, R4, c[5];
MUL R0.xyz, R0.w, R0;
MUL R0.xyz, R0, R1.w;
MAD R3.xyz, R3, c[6], -R1;
MAD R1.xyz, fragment.color.primary.x, R3, R1;
MAD R0.xyz, R0, c[7].w, R2;
MUL R1.xyz, R1, R7.x;
MUL result.color.xyz, R1, R0;
END
# 55 instructions, 8 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Float 0 [_BumpPower]
Float 1 [_AtlasOffsetX]
Float 2 [_AtlasOffsetY]
Float 3 [_AtlasScaleX]
Float 4 [_AtlasScaleY]
Vector 5 [_Color]
Vector 6 [_TrimColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DiffuseTrimTex] 2D
SetTexture 2 [_BumpTrimTex] 2D
SetTexture 3 [_BodyOcclusionTex] 2D
SetTexture 4 [_BodyBumpTex] 2D
SetTexture 5 [_BumpMap] 2D
SetTexture 6 [_LightBuffer] 2D
SetTexture 7 [unity_Lightmap] 2D
SetTexture 8 [unity_LightmapInd] 2D
"ps_2_0
; 53 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c7, 2.00000000, -1.00000000, 1.00000000, 0.00000000
def c8, -0.40824828, -0.70710677, 0.57735026, 8.00000000
def c9, -0.40824831, 0.70710677, 0.57735026, 0
def c10, 0.81649655, 0.00000000, 0.57735026, 0
dcl t0
dcl v0.x
dcl t1
dcl t2.xy
texld r7, t0, s1
texld r6, t0, s0
texldp r5, t1, s6
texld r4, t2, s7
texld r3, t2, s8
mov r1.x, t0.z
mov r1.y, t0.w
mov r2.x, c3
mov r2.y, c4.x
mov r0.y, c2.x
mov r0.x, c1
mad r0.xy, r1, r2, r0
texld r2, r0, s4
texld r11, r0, s3
texld r1, t0, s2
texld r0, t0, s5
mov r2.x, r2.w
mad_pp r8.xy, r2, c7.x, c7.y
mul_pp r2.xy, r8, r8
add_pp_sat r0.x, r2, r2.y
add_pp r0.x, -r0, c7.z
mov r2.x, r0.w
mov r2.y, r0
mov r1.x, r1.w
rsq_pp r0.x, r0.x
rcp_pp r8.z, r0.x
mad_pp r9.xy, r2, c7.x, c7.y
mad_pp r10.xy, r1, c7.x, c7.y
mul_pp r1.xy, r9, r9
add_pp_sat r1.x, r1, r1.y
mul_pp r2.xy, r10, r10
add_pp_sat r2.x, r2, r2.y
add_pp r1.x, -r1, c7.z
rsq_pp r1.x, r1.x
add_pp r2.x, -r2, c7.z
rsq_pp r2.x, r2.x
rcp_pp r9.z, r1.x
rcp_pp r10.z, r2.x
add r1.xyz, r10, -r9
mov r0.xy, c0.x
mov r0.z, c7.w
mad r1.xyz, v0.x, r1, r9
mad r1.xyz, r1, r0, r8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul r1.xyz, r0.x, r1
dp3_pp_sat r0.z, r1, c8
dp3_pp_sat r0.y, r1, c9
dp3_pp_sat r0.x, r1, c10
mul_pp r1.xyz, r3.w, r3
mul_pp r0.xyz, r1, r0
mul_pp r1.xyz, r4.w, r4
dp3_pp r0.x, r0, c8.w
mul_pp r0.xyz, r1, r0.x
mul r1.xyz, r6, c5
mad r2.xyz, r7, c6, -r1
mad_pp r0.xyz, r0, c8.w, r5
mad r1.xyz, v0.x, r2, r1
mul r1.xyz, r1, r11.x
mul_pp r0.xyz, r1, r0
mov_pp r0.w, c7
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
ConstBuffer "$Globals" 192 // 92 used size, 16 vars
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 5
SetTexture 2 [_BumpTrimTex] 2D 4
SetTexture 3 [_BodyOcclusionTex] 2D 3
SetTexture 4 [_BodyBumpTex] 2D 2
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [_LightBuffer] 2D 6
SetTexture 7 [unity_Lightmap] 2D 7
SetTexture 8 [unity_LightmapInd] 2D 8
// 52 instructions, 4 temp regs, 0 temp arrays:
// ALU 31 float, 0 int, 0 uint
// TEX 9 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmfpafepimffojdpkejfpagdiilhggiejabaaaaaapmaiaaaaadaaaaaa
cmaaaaaaoiaaaaaabmabaaaaejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaknaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apabaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
niahaaaaeaaaaaaapgabaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaad
aagabaaaaiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaa
ahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadpcbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaad
dcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
dcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaabaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaadaaaaaadiaaaaaiccaabaaa
abaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaaaaaaaaaidcaabaaa
abaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaaaaaaaaaaadaaaaaa
dgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaapcaaaakbcaabaaaacaaaaaaaceaaaaaolaffbdpdkmnbddpaaaaaaaa
aaaaaaaaigaabaaaaaaaaaaabacaaaakccaabaaaacaaaaaaaceaaaaaomafnblo
pdaedfdpdkmnbddpaaaaaaaaegacbaaaaaaaaaaabacaaaakecaabaaaacaaaaaa
aceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaaegacbaaaaaaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegbabaaaaeaaaaaaeghobaaaaiaaaaaaaagabaaaaiaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaebdiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaaeaaaaaaeghobaaaahaaaaaaaagabaaaahaaaaaadiaaaaahccaabaaa
aaaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaaebdiaaaaahocaabaaaaaaaaaaa
agajbaaaacaaaaaafgafbaaaaaaaaaaaaoaaaaahgcaabaaaabaaaaaaagbbbaaa
adaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaacaaaaaajgafbaaaabaaaaaa
eghobaaaagaaaaaaaagabaaaagaaaaaadcaaaaajhcaabaaaaaaaaaaajgahbaaa
aaaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaai
ocaabaaaabaaaaaaagajbaaaadaaaaaafgiocaaaaaaaaaaaaeaaaaaadcaaaaal
hcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaafaaaaaajgahbaia
ebaaaaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbabaaaacaaaaaaagajbaaa
acaaaaaafgaobaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
jgahbaaaabaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
ConstBuffer "$Globals" 192 // 92 used size, 16 vars
Float 48 [_BumpPower]
Float 52 [_AtlasOffsetX]
Float 56 [_AtlasOffsetY]
Float 60 [_AtlasScaleX]
Float 64 [_AtlasScaleY]
Vector 68 [_Color] 3
Vector 80 [_TrimColor] 3
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DiffuseTrimTex] 2D 5
SetTexture 2 [_BumpTrimTex] 2D 4
SetTexture 3 [_BodyOcclusionTex] 2D 3
SetTexture 4 [_BodyBumpTex] 2D 2
SetTexture 5 [_BumpMap] 2D 1
SetTexture 6 [_LightBuffer] 2D 6
SetTexture 7 [unity_Lightmap] 2D 7
SetTexture 8 [unity_LightmapInd] 2D 8
// 52 instructions, 4 temp regs, 0 temp arrays:
// ALU 31 float, 0 int, 0 uint
// TEX 9 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedpgmlidfbkfgdbkppdflppogjpkeiohpjabaaaaaafaanaaaaaeaaaaaa
daaaaaaaiaaeaaaagaamaaaabmanaaaaebgpgodjeiaeaaaaeiaeaaaaaaacpppp
peadaaaafeaaaaaaabaaeiaaaaaafeaaaaaafeaaajaaceaaaaaafeaaaaaaaaaa
afababaaaeacacaaadadadaaacaeaeaaabafafaaagagagaaahahahaaaiaiaiaa
aaaaadaaadaaaaaaaaaaaaaaaaacppppfbaaaaafadaaapkaaaaaaaeaaaaaialp
aaaaaaaaaaaaiadpfbaaaaafaeaaapkaaaaaaaebdkmnbddpaaaaaaaaolaffbdp
fbaaaaafafaaapkaomafnblopdaedfdpdkmnbddpaaaaaaaafbaaaaafagaaapka
olafnblopdaedflpdkmnbddpaaaaaaaabpaaaaacaaaaaaiaaaaaaplabpaaaaac
aaaaaaiaabaaaplabpaaaaacaaaaaaiaacaaaplabpaaaaacaaaaaaiaadaaadla
bpaaaaacaaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkabpaaaaacaaaaaaja
acaiapkabpaaaaacaaaaaajaadaiapkabpaaaaacaaaaaajaaeaiapkabpaaaaac
aaaaaajaafaiapkabpaaaaacaaaaaajaagaiapkabpaaaaacaaaaaajaahaiapka
bpaaaaacaaaaaajaaiaiapkaecaaaaadaaaacpiaaaaaoelaaeaioekaecaaaaad
abaacpiaaaaaoelaabaioekaecaaaaadacaacpiaadaaoelaaiaioekaecaaaaad
adaacpiaadaaoelaahaioekaecaaaaadaeaaapiaaaaaoelaafaioekaecaaaaad
afaaapiaaaaaoelaaaaioekaaeaaaaaeagaacbiaaaaappiaadaaaakaadaaffka
aeaaaaaeagaacciaaaaaffiaadaaaakaadaaffkaaeaaaaaeaaaacbiaabaappia
adaaaakaadaaffkaaeaaaaaeaaaacciaabaaffiaadaaaakaadaaffkabcaaaaae
abaaadiaabaaaalaagaaoeiaaaaaoeiaafaaaaadaaaaadiaabaaoeiaaaaaaaka
afaaaaadabaaabiaaaaakklaaaaappkaafaaaaadabaaaciaaaaapplaabaaaaka
acaaaaadabaaadiaabaaoeiaaaaamjkaagaaaaacaaaaaiiaacaapplaafaaaaad
agaaadiaaaaappiaacaaoelaecaaaaadahaacpiaabaaoeiaacaioekaecaaaaad
abaaapiaabaaoeiaadaioekaecaaaaadagaacpiaagaaoeiaagaioekaaeaaaaae
aiaacbiaahaappiaadaaaakaadaaffkaaeaaaaaeaiaacciaahaaffiaadaaaaka
adaaffkafkaaaaaeaaaadiiaaiaaoeiaaiaaoeiaadaakkkaacaaaaadaaaaciia
aaaappibadaappkaahaaaaacaaaaciiaaaaappiaagaaaaacaiaaceiaaaaappia
abaaaaacaaaaaeiaadaakkkaacaaaaadaaaaahiaaaaaoeiaaiaaoeiaceaaaaac
ahaaahiaaaaaoeiaaiaaaaadaaaadbiaaeaablkaahaaoeiaaiaaaaadaaaadcia
afaaoekaahaaoeiaaiaaaaadaaaadeiaagaaoekaahaaoeiaafaaaaadaaaaciia
acaappiaaeaaaakaafaaaaadacaachiaacaaoeiaaaaappiaaiaaaaadaeaaciia
aaaaoeiaacaaoeiaafaaaaadadaaciiaadaappiaaeaaaakaafaaaaadaaaachia
adaaoeiaadaappiaaeaaaaaeaaaachiaaaaaoeiaaeaappiaagaaoeiaafaaaaad
acaaadiaafaaoeiaabaamjkaafaaaaadacaaaeiaafaakkiaabaappkaaeaaaaae
abaaaoiaaeaabliaacaablkaacaablibaeaaaaaeabaaaoiaabaaaalaabaaoeia
acaabliaafaaaaadabaachiaabaaaaiaabaabliaafaaaaadaaaachiaaaaaoeia
abaaoeiaabaaaaacaaaaciiaadaakkkaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcniahaaaaeaaaaaaapgabaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaa
fkaaaaadaagabaaaaiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaae
aahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaae
aahabaaaahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaa
gcbaaaaddcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadcaaaaapdcaabaaaaaaaaaaahgapbaaaaaaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaadkaabaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaabaaaaaa
eghobaaaafaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
abaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaabaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaackbabaaaabaaaaaadkiacaaaaaaaaaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaadkbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaajgifcaaaaaaaaaaaadaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaadkaabaaaaaaaaaaadgaaaaagbcaabaaaadaaaaaaakiacaaaaaaaaaaa
adaaaaaadgaaaaafecaabaaaadaaaaaaabeaaaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaagacbaaaadaaaaaaegacbaaaacaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaapcaaaakbcaabaaaacaaaaaaaceaaaaaolaffbdpdkmnbddp
aaaaaaaaaaaaaaaaigaabaaaaaaaaaaabacaaaakccaabaaaacaaaaaaaceaaaaa
omafnblopdaedfdpdkmnbddpaaaaaaaaegacbaaaaaaaaaaabacaaaakecaabaaa
acaaaaaaaceaaaaaolafnblopdaedflpdkmnbddpaaaaaaaaegacbaaaaaaaaaaa
efaaaaajpcaabaaaaaaaaaaaegbabaaaaeaaaaaaeghobaaaaiaaaaaaaagabaaa
aiaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaeb
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaa
acaaaaaaegbabaaaaeaaaaaaeghobaaaahaaaaaaaagabaaaahaaaaaadiaaaaah
ccaabaaaaaaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaaebdiaaaaahocaabaaa
aaaaaaaaagajbaaaacaaaaaafgafbaaaaaaaaaaaaoaaaaahgcaabaaaabaaaaaa
agbbbaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaacaaaaaajgafbaaa
abaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaadcaaaaajhcaabaaaaaaaaaaa
jgahbaaaaaaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
diaaaaaiocaabaaaabaaaaaaagajbaaaadaaaaaafgiocaaaaaaaaaaaaeaaaaaa
dcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaaafaaaaaa
jgahbaiaebaaaaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbabaaaacaaaaaa
agajbaaaacaaaaaafgaobaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaa
abaaaaaajgahbaaaabaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaaaaadoaaaaab
ejfdeheoleaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaa
knaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaapabaaaakeaaaaaaabaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapalaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaa
aeaaaaaaadadaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaaaaaa
fdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}

}
	}

#LINE 181
		
	} 
	
	Fallback "VertexLit"
}

